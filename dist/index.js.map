{
  "version": 3,
  "sources": ["../lib/smirnov.js", "../lib/marsaglia.js", "../lib/ascending.js", "../lib/subtract.js", "../lib/validate.js", "../lib/cdf.js", "../lib/get_cdf.js", "../lib/print.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar binomcoefln = require( '@stdlib/math-base-special-binomcoefln' );\nvar floor = require( '@stdlib/math-base-special-floor' );\nvar exp = require( '@stdlib/math-base-special-exp' );\nvar ln = require( '@stdlib/math-base-special-ln' );\n\n\n// MAIN //\n\n/**\n* Evaluates the CDF for the one-sided test statistics, i.e., the maximum by which the empirical CDF exceeds / is less than the hypothesized CDF.\n*\n* @private\n* @param {number} d - the argument of the CDF of D_n^+ / D_n^-\n* @param {PositiveInteger} n - number of variates\n* @returns {number} evaluated CDF, i.e., P( D_n^+ < d )\n*/\nfunction pKolmogorov1( d, n ) {\n\tvar len;\n\tvar out;\n\tvar tmp;\n\tvar i;\n\n\tif ( d <= 0.0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( d >= 1.0 ) {\n\t\treturn 1.0;\n\t}\n\tlen = floor( n * (1.0-d) ) + 1;\n\tout = 0.0;\n\tfor ( i = 0; i < len; i++ ) {\n\t\ttmp = binomcoefln( n, i );\n\t\ttmp += ( n - i ) * ln( 1.0 - d - (i/n) );\n\t\ttmp += ( i - 1.0 ) * ln( d + (i/n) );\n\t\tout += exp( tmp );\n\t}\n\treturn 1.0 - (d * out);\n}\n\n\n// EXPORTS //\n\nmodule.exports = pKolmogorov1;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar floor = require( '@stdlib/math-base-special-floor' );\nvar sqrt = require( '@stdlib/math-base-special-sqrt' );\nvar pow = require( '@stdlib/math-base-special-pow' );\nvar exp = require( '@stdlib/math-base-special-exp' );\nvar Float64Array = require( '@stdlib/array-float64' );\n\n\n// MAIN //\n\n/**\n* Evaluates the Kolmogorov distribution. This function is a JavaScript implementation of a procedure developed by Marsaglia & Tsang.\n*\n* ## References\n*\n* -   Marsaglia, George, Wai Wan Tsang, and Jingbo Wang. 2003. \"Evaluating Kolmogorov's Distribution.\" _Journal of Statistical Software_ 8 (18): 1\u20134. doi:[10.18637/jss.v008.i18](https://doi.org/10.18637/jss.v008.i18).\n*\n* @private\n* @param {number} d - the argument of the CDF of D_n\n* @param {number} n - number of variates\n* @returns {number} evaluated CDF, i.e. P( D_n < d )\n*/\nfunction pKolmogorov( d, n ) {\n\tvar eH;\n\tvar eQ;\n\tvar h;\n\tvar H;\n\tvar Q;\n\tvar g;\n\tvar i;\n\tvar j;\n\tvar k;\n\tvar m;\n\tvar s;\n\n\ts = d * d * n;\n\tif ( s > 7.24 || ( s > 3.76 && n > 99 ) ) {\n\t\treturn 1 - (2 * exp( -( 2.000071 + (0.331/sqrt(n)) + (1.409/n) ) * s ));\n\t}\n\tk = floor( n * d ) + 1;\n\tm = (2*k) - 1;\n\th = k - (n*d);\n\tH = new Float64Array( m * m );\n\tQ = new Float64Array( m * m );\n\tfor ( i = 0; i < m; i++ ) {\n\t\tfor ( j = 0; j < m; j++ ) {\n\t\t\tif ( i - j + 1 < 0 ) {\n\t\t\t\tH[ (i*m) + j ] = 0;\n\t\t\t} else {\n\t\t\t\tH[ (i*m) + j ] = 1;\n\t\t\t}\n\t\t}\n\t}\n\tfor ( i = 0; i < m; i++ ) {\n\t\tH[ i * m ] -= pow( h, i+1 );\n\t\tH[ ((m-1) * m) + i ] -= pow( h, (m-i) );\n\t}\n\tH[ (m-1) * m ] += ( ( (2*h)-1 > 0 ) ? pow( (2*h)-1, m ) : 0 );\n\tfor ( i = 0; i < m; i++ ) {\n\t\tfor ( j = 0; j < m; j++ ) {\n\t\t\tif ( i - j + 1 > 0 ) {\n\t\t\t\tfor ( g = 1; g <= i - j + 1; g++ ) {\n\t\t\t\t\tH[ (i*m) + j ] /= g;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\teH = 0;\n\tmpow( H, eH, n );\n\ts = Q[ ((k-1) * m) + k - 1 ];\n\tfor ( i = 1; i <= n; i++ ) {\n\t\ts = s * i / n;\n\t\tif ( s < 1e-140 ) {\n\t\t\ts *= 1e140;\n\t\t\teQ -= 140;\n\t\t}\n\t}\n\ts *= pow( 10, eQ );\n\treturn s;\n\n\t/**\n\t* Matrix exponentiation. Mutates Q matrix.\n\t*\n\t* @private\n\t* @param {Float64Array} A - input matrix\n\t* @param {number} eA - matrix power\n\t* @param {number} n - number of variates\n\t*/\n\tfunction mpow( A, eA, n ) {\n\t\tvar eB;\n\t\tvar B;\n\t\tvar i;\n\n\t\tif ( n === 1 ) {\n\t\t\tfor ( i = 0; i < m*m; i++ ) {\n\t\t\t\tQ[ i ] = A[ i ];\n\t\t\t\teQ = eA;\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tmpow( A, eA, floor( n/2 ) );\n\t\tB = mmult( Q, Q );\n\t\teB = 2 * eQ;\n\t\tif ( n % 2 === 0 ) {\n\t\t\tfor ( i = 0; i < m*m; i++ ) {\n\t\t\t\tQ[ i ] = B[ i ];\n\t\t\t}\n\t\t\teQ = eB;\n\t\t} else {\n\t\t\tQ = mmult( A, B );\n\t\t\teQ = eA + eB;\n\t\t}\n\t\tif ( Q[ (floor(m/2) * m) + floor(m/2) ] > 1e140 ) {\n\t\t\tfor ( i = 0; i < m*m; i++ ) {\n\t\t\t\tQ[ i ] *= 1e-140;\n\t\t\t}\n\t\t\teQ += 140;\n\t\t}\n\t}\n\n\t/**\n\t* Multiply matrices x and y.\n\t*\n\t* @private\n\t* @param {Float64Array} x - first input matrix\n\t* @param {Float64Array} y - second input matrix\n\t* @returns {Float64Array} matrix product\n\t*/\n\tfunction mmult( x, y ) {\n\t\tvar i;\n\t\tvar j;\n\t\tvar k;\n\t\tvar s;\n\t\tvar z;\n\n\t\tz = new Float64Array( m * m );\n\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\tfor ( j = 0; j < m; j++ ) {\n\t\t\t\ts = 0;\n\t\t\t\tfor ( k = 0; k < m; k++ ) {\n\t\t\t\t\ts += x[ (i*m) + k ] * y[ (k*m) + j ];\n\t\t\t\t\tz[ (i*m) + j ] = s;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn z;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = pKolmogorov;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Comparator function used to sort values in ascending order.\n*\n* @private\n* @param {number} a - first value\n* @param {number} b - second value\n* @returns {number} difference between `a` and `b`\n*/\nfunction ascending( a, b ) {\n\treturn a - b;\n}\n\n\n// EXPORTS //\n\nmodule.exports = ascending;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes an element-wise subtraction.\n*\n* @private\n* @param {number} x - scalar minuend (implicitly broadcasted to full length array)\n* @param {NumericArray} arr - array of subtrahends\n* @returns {NumericArray} output array\n*\n* @example\n* var x = 3;\n* var arr = [ 1, 2, 2, 3 ];\n*\n* var y = subtract( x, arr );\n* // returns [ 2, 1, 1, 0 ]\n*/\nfunction subtract( x, arr ) {\n\tvar len;\n\tvar res;\n\tvar i;\n\n\tlen = arr.length;\n\tres = new Array( len );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tres[ i ] = x - arr[ i ];\n\t}\n\n\treturn res;\n}\n\n\n// EXPORTS //\n\nmodule.exports = subtract;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar isnan = require( '@stdlib/assert-is-nan' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {boolean} [options.sorted] - boolean indicating if the input data is already sorted in ascending order\n* @param {string} [options.alternative] - alternative hypothesis\n* @returns {(null|Error)} null or an error\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'alpha', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'alternative' ) ) {\n\t\topts.alternative = options.alternative;\n\t\tif ( !isString( opts.alternative ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'alternative', opts.alternative ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'sorted' ) ) {\n\t\topts.sorted = options.sorted;\n\t\tif ( !isBoolean( opts.sorted ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'sorted', opts.sorted ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar arcsine = require( '@stdlib/stats-base-dists-arcsine-cdf' );\nvar beta = require( '@stdlib/stats-base-dists-beta-cdf' );\nvar betaprime = require( '@stdlib/stats-base-dists-betaprime-cdf' );\nvar cauchy = require( '@stdlib/stats-base-dists-cauchy-cdf' );\nvar chi = require( '@stdlib/stats-base-dists-chi-cdf' );\nvar chisquare = require( '@stdlib/stats-base-dists-chisquare-cdf' );\nvar cosine = require( '@stdlib/stats-base-dists-cosine-cdf' );\nvar erlang = require( '@stdlib/stats-base-dists-erlang-cdf' );\nvar exponential = require( '@stdlib/stats-base-dists-exponential-cdf' );\nvar f = require( '@stdlib/stats-base-dists-f-cdf' );\nvar frechet = require( '@stdlib/stats-base-dists-frechet-cdf' );\nvar gamma = require( '@stdlib/stats-base-dists-gamma-cdf' );\nvar gumbel = require( '@stdlib/stats-base-dists-gumbel-cdf' );\nvar invgamma = require( '@stdlib/stats-base-dists-invgamma-cdf' );\nvar kumaraswamy = require( '@stdlib/stats-base-dists-kumaraswamy-cdf' );\nvar laplace = require( '@stdlib/stats-base-dists-laplace-cdf' );\nvar levy = require( '@stdlib/stats-base-dists-levy-cdf' );\nvar logistic = require( '@stdlib/stats-base-dists-logistic-cdf' );\nvar lognormal = require( '@stdlib/stats-base-dists-lognormal-cdf' );\nvar normal = require( '@stdlib/stats-base-dists-normal-cdf' );\nvar pareto1 = require( '@stdlib/stats-base-dists-pareto-type1-cdf' );\nvar rayleigh = require( '@stdlib/stats-base-dists-rayleigh-cdf' );\nvar t = require( '@stdlib/stats-base-dists-t-cdf' );\nvar triangular = require( '@stdlib/stats-base-dists-triangular-cdf' );\nvar uniform = require( '@stdlib/stats-base-dists-uniform-cdf' );\nvar weibull = require( '@stdlib/stats-base-dists-weibull-cdf' );\n\n\n// MAIN //\n\nvar CDF = {};\n\nCDF[ 'arcsine' ] = arcsine;\nCDF[ 'beta' ] = beta;\nCDF[ 'betaprime' ] = betaprime;\nCDF[ 'cauchy' ] = cauchy;\nCDF[ 'chi' ] = chi;\nCDF[ 'chisquare' ] = chisquare;\nCDF[ 'cosine' ] = cosine;\nCDF[ 'erlang' ] = erlang;\nCDF[ 'exponential' ] = exponential;\nCDF[ 'f' ] = f;\nCDF[ 'frechet' ] = frechet;\nCDF[ 'gamma' ] = gamma;\nCDF[ 'gumbel' ] = gumbel;\nCDF[ 'invgamma' ] = invgamma;\nCDF[ 'kumaraswamy' ] = kumaraswamy;\nCDF[ 'laplace' ] = laplace;\nCDF[ 'levy' ] = levy;\nCDF[ 'logistic' ] = logistic;\nCDF[ 'lognormal' ] = lognormal;\nCDF[ 'normal' ] = normal;\nCDF[ 'pareto-type1' ] = pareto1;\nCDF[ 'rayleigh' ] = rayleigh;\nCDF[ 't' ] = t;\nCDF[ 'triangular' ] = triangular;\nCDF[ 'uniform' ] = uniform;\nCDF[ 'weibull' ] = weibull;\n\n\n// EXPORTS //\n\nmodule.exports = CDF;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar format = require( '@stdlib/string-format' );\nvar CDF = require( './cdf.js' );\n\n\n// MAIN //\n\n/**\n* Returns the cumulative distribution function (CDF) corresponding to a provided distribution name.\n*\n* @private\n* @param {string} name - distribution name\n* @throws {Error} unsupported/unrecognized distribution name\n* @returns {Function} cumulative distribution function (CDF)\n*/\nfunction getCDF( name ) {\n\tvar cdf = CDF[ name ];\n\tif ( cdf === void 0 ) {\n\t\tthrow new Error( format( 'invalid argument. Unsupported/unrecognized distribution name. Value: `%s`.', name ) );\n\t}\n\treturn cdf;\n}\n\n\n// EXPORTS //\n\nmodule.exports = getCDF;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' );\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar roundn = require( '@stdlib/math-base-special-roundn' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Pretty-print output of test.\n*\n* @param {Object} [opts] - options object\n* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {string} formatted output\n*/\nfunction print( opts ) { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar decision;\n\tvar dgts;\n\tvar str;\n\n\tdgts = 4;\n\tdecision = true;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'digits', opts.digits ) );\n\t\t\t}\n\t\t\tdgts = opts.digits;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'decision', opts.decision ) );\n\t\t\t}\n\t\t\tdecision = opts.decision;\n\t\t}\n\t}\n\n\tstr = '';\n\tstr += this.method;\n\tstr += '\\n\\n';\n\tstr += 'Null hypothesis: the CDF of `x` is ';\n\tswitch ( this.alternative ) {\n\tcase 'less':\n\t\tstr += 'greater than or equal to ';\n\t\tbreak;\n\tcase 'greater':\n\t\tstr += 'less than or equal to ';\n\t\tbreak;\n\tcase 'two-sided':\n\tdefault:\n\t\tstr += 'equal to ';\n\t\tbreak;\n\t}\n\tstr += 'the reference CDF';\n\tstr += '\\n\\n';\n\tstr += '    pValue: ' + roundn( this.pValue, -dgts ) + '\\n';\n\tstr += '    statistic: ' + roundn( this.statistic, -dgts );\n\tstr += '\\n\\n';\n\tif ( decision ) {\n\t\tstr += 'Test Decision: ';\n\t\tif ( this.rejected ) {\n\t\t\tstr += 'Reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t} else {\n\t\t\tstr += 'Fail to reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t}\n\t\tstr += '\\n';\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nmodule.exports = print;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isTypedArrayLike = require( '@stdlib/assert-is-typed-array-like' );\nvar isNumber = require( '@stdlib/assert-is-number' );\nvar isNumberArray = require( '@stdlib/assert-is-number-array' ).primitives;\nvar setReadOnly = require( '@stdlib/utils-define-read-only-property' );\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar format = require( '@stdlib/string-format' );\nvar isnan = require( '@stdlib/assert-is-nan' );\nvar max = require( '@stdlib/stats-strided-max' );\nvar pKolmogorov1 = require( './smirnov.js' );\nvar pKolmogorov = require( './marsaglia.js' );\nvar ascending = require( './ascending.js' );\nvar subtract = require( './subtract.js' );\nvar validate = require( './validate.js' );\nvar getCDF = require( './get_cdf.js' );\nvar print = require( './print.js' ); // eslint-disable-line stdlib/no-redeclare\n\n\n// FUNCTIONS //\n\nvar slice = Array.prototype.slice;\n\n\n// MAIN //\n\n/**\n* Computes a Kolmogorov-Smirnov goodness-of-fit test.\n*\n* @param {NumericArray} x - input array holding numeric values\n* @param {(Function|string)} y - either a CDF function or a string denoting the name of a distribution\n* @param {...number} [params] - distribution parameters passed to reference CDF\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {boolean} [options.sorted=false] - boolean indicating if the input array is already in sorted order\n* @param {string} [options.alternative=\"two-sided\"] - string indicating whether to conduct two-sided or one-sided hypothesis test (other options: `less`, `greater`)\n* @throws {TypeError} argument x has to be a typed array or array of numbers\n* @throws {TypeError} argument y has to be a CDF function or string\n* @throws {TypeError} options must be an object\n* @throws {TypeError} alpha option has to be a number\n* @throws {RangeError} alpha option has to be a number in the interval `[0,1]`\n* @throws {TypeError} alternative option has to be a string\n* @throws {Error} alternative option must be `two-sided`, `less` or `greater`\n* @throws {TypeError} sorted option has to be a boolean\n* @returns {Object} test result object\n*\n* @example\n* var out = kstest( [ 2.0, 1.0, 5.0, -5.0, 3.0, 0.5, 6.0 ], 'normal', 0.0, 1.0 );\n* // returns { 'pValue': ~0.015, 'statistic': ~0.556, ... }\n*/\nfunction kstest() {\n\tvar nDistParams;\n\tvar distParams;\n\tvar distArgs;\n\tvar options;\n\tvar alpha;\n\tvar opts;\n\tvar pval;\n\tvar stat;\n\tvar yVal;\n\tvar alt;\n\tvar err;\n\tvar idx;\n\tvar out;\n\tvar val;\n\tvar i;\n\tvar n;\n\tvar x;\n\tvar y;\n\n\tx = arguments[ 0 ];\n\ty = arguments[ 1 ];\n\tif ( !isNumberArray( x ) && !isTypedArrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a typed array or number array. Value: `%s`.', x ) );\n\t}\n\tif ( !isFunction( y ) && !isString( y ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be either a CDF function or a string. Value: `%s`.', y ) );\n\t}\n\tif ( isString( y ) ) {\n\t\ty = getCDF( y );\n\t}\n\tnDistParams = y.length - 1.0;\n\tn = x.length;\n\n\tdistParams = new Array( nDistParams ); // eslint-disable-line stdlib/no-new-array\n\tfor ( i = 0; i < nDistParams; i++ ) {\n\t\tidx = i + 2;\n\t\tval = arguments[ idx ];\n\t\tif ( !isNumber( val ) || isnan( val ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Distribution parameter must be a number. Value: `%s`.', val ) );\n\t\t}\n\t\tdistParams[ i ] = arguments[ idx ];\n\t}\n\topts = {};\n\tif ( arguments.length > 2 + nDistParams ) {\n\t\toptions = arguments[ 2 + nDistParams ];\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Make a copy to prevent mutation of x:\n\tx = slice.call( x );\n\n\tif ( opts.alpha === void 0 ) {\n\t\talpha = 0.05;\n\t} else {\n\t\talpha = opts.alpha;\n\t}\n\tif ( alpha < 0.0 || alpha > 1.0 ) {\n\t\tthrow new RangeError( format( 'invalid option. `%s` option must be a number on the interval: [0, 1]. Option: `%f`.', 'alpha', alpha ) );\n\t}\n\n\t// Input data has to be sorted:\n\tif ( opts.sorted !== true ) {\n\t\tx.sort( ascending );\n\t}\n\tdistArgs = [ null ].concat( distParams );\n\tfor ( i = 0; i < n; i++ ) {\n\t\tdistArgs[ 0 ] = x[ i ];\n\t\tyVal = y.apply( null, distArgs );\n\t\tx[ i ] = yVal - ( i / n );\n\t}\n\n\talt = opts.alternative || 'two-sided';\n\tswitch ( alt ) {\n\tcase 'two-sided':\n\t\tstat = max( n, [ max( n, x, 1 ), max( n, subtract( 1/n, x ), 1 ) ], 1 );\n\t\tbreak;\n\tcase 'greater':\n\t\tstat = max( n, subtract( 1/n, x ), 1 );\n\t\tbreak;\n\tcase 'less':\n\t\tstat = max( n, x, 1 );\n\t\tbreak;\n\tdefault:\n\t\tthrow new Error( format( 'invalid option. `%s` option must be one of the following: \"%s\". Option: `%s`.', 'alternative', [ 'two-sided', 'less', 'greater' ].join( '\", \"' ), alt ) );\n\t}\n\tif ( alt === 'two-sided' ) {\n\t\tpval = 1.0 - pKolmogorov( stat, n );\n\t} else {\n\t\tpval = 1.0 - pKolmogorov1( stat, n );\n\t}\n\n\tout = {};\n\tsetReadOnly( out, 'rejected', pval <= alpha );\n\tsetReadOnly( out, 'alpha', alpha );\n\tsetReadOnly( out, 'pValue', pval );\n\tsetReadOnly( out, 'statistic', stat );\n\tsetReadOnly( out, 'method', 'Kolmogorov-Smirnov goodness-of-fit test' );\n\tsetReadOnly( out, 'print', print );\n\tsetReadOnly( out, 'alternative', alt );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = kstest;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a Kolmogorov-Smirnov goodness-of-fit test.\n*\n* @module @stdlib/stats-kstest\n*\n* @example\n* var generator = require( '@stdlib/random-base-normal' ).factory;\n* var kstest = require( '@stdlib/stats-kstest' );\n*\n* var rnorm;\n* var out;\n* var i;\n* var x;\n*\n* // Values drawn from a Normal(3,1) distribution\n* rnorm = generator( 3.0, 1.0, {\n*     'seed': 293\n* });\n* x = new Array( 100 );\n* for ( i = 0; i < 100; i++ ) {\n*     x[ i ] = rnorm();\n* }\n*\n* // Test against N(0,1)\n* out = kstest( x, 'normal', 0.0, 1.0 );\n* // returns { pValue: 0, statistic: ~0.901, ... }\n*\n* // Test against N(3,1)\n* out = kstest( x, 'normal', 3.0, 1.0 );\n* // returns { pValue: ~0.234, statistic: ~0.102, ... }\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,GAAAC,EAAA,cAsBA,IAAIC,GAAc,QAAS,uCAAwC,EAC/DC,GAAQ,QAAS,iCAAkC,EACnDC,GAAM,QAAS,+BAAgC,EAC/CC,EAAK,QAAS,8BAA+B,EAajD,SAASC,GAAcC,EAAGC,EAAI,CAC7B,IAAIC,EACAC,EACAC,EACAC,EAEJ,GAAKL,GAAK,EACT,MAAO,GAER,GAAKA,GAAK,EACT,MAAO,GAIR,IAFAE,EAAMN,GAAOK,GAAK,EAAID,EAAG,EAAI,EAC7BG,EAAM,EACAE,EAAI,EAAGA,EAAIH,EAAKG,IACrBD,EAAMT,GAAaM,EAAGI,CAAE,EACxBD,IAASH,EAAII,GAAMP,EAAI,EAAME,EAAKK,EAAEJ,CAAG,EACvCG,IAASC,EAAI,GAAQP,EAAIE,EAAKK,EAAEJ,CAAG,EACnCE,GAAON,GAAKO,CAAI,EAEjB,MAAO,GAAOJ,EAAIG,CACnB,CAKAT,EAAO,QAAUK,KChEjB,IAAAO,EAAAC,EAAA,SAAAC,GAAAC,EAAA,cAsBA,IAAIC,EAAQ,QAAS,iCAAkC,EACnDC,GAAO,QAAS,gCAAiC,EACjDC,EAAM,QAAS,+BAAgC,EAC/CC,GAAM,QAAS,+BAAgC,EAC/CC,EAAe,QAAS,uBAAwB,EAiBpD,SAASC,GAAaC,EAAGC,EAAI,CAC5B,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACA,EAGJ,GADA,EAAIX,EAAIA,EAAIC,EACP,EAAI,MAAU,EAAI,MAAQA,EAAI,GAClC,MAAO,GAAK,EAAIJ,GAAK,EAAG,SAAY,KAAMF,GAAKM,CAAC,EAAM,MAAMA,GAAO,CAAE,EAOtE,IALAS,EAAIhB,EAAOO,EAAID,CAAE,EAAI,EACrBW,EAAK,EAAED,EAAK,EACZN,EAAIM,EAAKT,EAAED,EACXK,EAAI,IAAIP,EAAca,EAAIA,CAAE,EAC5BL,EAAI,IAAIR,EAAca,EAAIA,CAAE,EACtBH,EAAI,EAAGA,EAAIG,EAAGH,IACnB,IAAMC,EAAI,EAAGA,EAAIE,EAAGF,IACdD,EAAIC,EAAI,EAAI,EAChBJ,EAAIG,EAAEG,EAAKF,CAAE,EAAI,EAEjBJ,EAAIG,EAAEG,EAAKF,CAAE,EAAI,EAIpB,IAAMD,EAAI,EAAGA,EAAIG,EAAGH,IACnBH,EAAGG,EAAIG,CAAE,GAAKf,EAAKQ,EAAGI,EAAE,CAAE,EAC1BH,GAAKM,EAAE,GAAKA,EAAKH,CAAE,GAAKZ,EAAKQ,EAAIO,EAAEH,CAAG,EAGvC,IADAH,GAAIM,EAAE,GAAKA,CAAE,GAAU,EAAEP,EAAG,EAAI,EAAMR,EAAM,EAAEQ,EAAG,EAAGO,CAAE,EAAI,EACpDH,EAAI,EAAGA,EAAIG,EAAGH,IACnB,IAAMC,EAAI,EAAGA,EAAIE,EAAGF,IACnB,GAAKD,EAAIC,EAAI,EAAI,EAChB,IAAMF,EAAI,EAAGA,GAAKC,EAAIC,EAAI,EAAGF,IAC5BF,EAAIG,EAAEG,EAAKF,CAAE,GAAKF,EAQtB,IAHAL,EAAK,EACLU,EAAMP,EAAGH,EAAID,CAAE,EACf,EAAIK,GAAKI,EAAE,GAAKC,EAAKD,EAAI,CAAE,EACrBF,EAAI,EAAGA,GAAKP,EAAGO,IACpB,EAAI,EAAIA,EAAIP,EACP,EAAI,SACR,GAAK,MACLE,GAAM,KAGR,UAAKP,EAAK,GAAIO,CAAG,EACV,EAUP,SAASS,EAAMC,EAAGC,EAAIb,EAAI,CACzB,IAAIc,EACAC,EACAR,EAEJ,GAAKP,IAAM,EAAI,CACd,IAAMO,EAAI,EAAGA,EAAIG,EAAEA,EAAGH,IACrBF,EAAGE,CAAE,EAAIK,EAAGL,CAAE,EACdL,EAAKW,EAEN,MACD,CAIA,GAHAF,EAAMC,EAAGC,EAAIpB,EAAOO,EAAE,CAAE,CAAE,EAC1Be,EAAIC,EAAOX,EAAGA,CAAE,EAChBS,EAAK,EAAIZ,EACJF,EAAI,IAAM,EAAI,CAClB,IAAMO,EAAI,EAAGA,EAAIG,EAAEA,EAAGH,IACrBF,EAAGE,CAAE,EAAIQ,EAAGR,CAAE,EAEfL,EAAKY,CACN,MACCT,EAAIW,EAAOJ,EAAGG,CAAE,EAChBb,EAAKW,EAAKC,EAEX,GAAKT,EAAIZ,EAAMiB,EAAE,CAAC,EAAIA,EAAKjB,EAAMiB,EAAE,CAAC,CAAE,EAAI,MAAQ,CACjD,IAAMH,EAAI,EAAGA,EAAIG,EAAEA,EAAGH,IACrBF,EAAGE,CAAE,GAAK,OAEXL,GAAM,GACP,CACD,CAUA,SAASc,EAAOC,EAAGC,EAAI,CACtB,IAAIX,EACAC,EACAC,EACAU,EACAC,EAGJ,IADAA,EAAI,IAAIvB,EAAca,EAAIA,CAAE,EACtBH,EAAI,EAAGA,EAAIG,EAAGH,IACnB,IAAMC,EAAI,EAAGA,EAAIE,EAAGF,IAEnB,IADAW,EAAI,EACEV,EAAI,EAAGA,EAAIC,EAAGD,IACnBU,GAAKF,EAAIV,EAAEG,EAAKD,CAAE,EAAIS,EAAIT,EAAEC,EAAKF,CAAE,EACnCY,EAAIb,EAAEG,EAAKF,CAAE,EAAIW,EAIpB,OAAOC,CACR,CACD,CAKA5B,EAAO,QAAUM,KC7KjB,IAAAuB,EAAAC,EAAA,SAAAC,GAAAC,EAAA,cA4BA,SAASC,GAAWC,EAAGC,EAAI,CAC1B,OAAOD,EAAIC,CACZ,CAKAH,EAAO,QAAUC,KCnCjB,IAAAG,EAAAC,EAAA,SAAAC,GAAAC,EAAA,cAqCA,SAASC,GAAUC,EAAGC,EAAM,CAC3B,IAAIC,EACAC,EACAC,EAIJ,IAFAF,EAAMD,EAAI,OACVE,EAAM,IAAI,MAAOD,CAAI,EACfE,EAAI,EAAGA,EAAIF,EAAKE,IACrBD,EAAKC,CAAE,EAAIJ,EAAIC,EAAKG,CAAE,EAGvB,OAAOD,CACR,CAKAL,EAAO,QAAUC,KCtDjB,IAAAM,EAAAC,EAAA,SAAAC,GAAAC,EAAA,cAsBA,IAAIC,GAAY,QAAS,2BAA4B,EAAE,YACnDC,GAAW,QAAS,0BAA2B,EAAE,YACjDC,GAAW,QAAS,gCAAiC,EACrDC,GAAW,QAAS,0BAA2B,EAAE,YACjDC,GAAQ,QAAS,uBAAwB,EACzCC,EAAa,QAAS,iCAAkC,EACxDC,EAAS,QAAS,uBAAwB,EAgB9C,SAASC,GAAUC,EAAMC,EAAU,CAClC,OAAMP,GAAUO,CAAQ,EAGnBJ,EAAYI,EAAS,OAAQ,IACjCD,EAAK,MAAQC,EAAQ,MAChB,CAACR,GAAUO,EAAK,KAAM,GAAKJ,GAAOI,EAAK,KAAM,GAC1C,IAAI,UAAWF,EAAQ,8DAA+D,QAASE,EAAK,KAAM,CAAE,EAGhHH,EAAYI,EAAS,aAAc,IACvCD,EAAK,YAAcC,EAAQ,YACtB,CAACN,GAAUK,EAAK,WAAY,GACzB,IAAI,UAAWF,EAAQ,8DAA+D,cAAeE,EAAK,WAAY,CAAE,EAG5HH,EAAYI,EAAS,QAAS,IAClCD,EAAK,OAASC,EAAQ,OACjB,CAACT,GAAWQ,EAAK,MAAO,GACrB,IAAI,UAAWF,EAAQ,+DAAgE,SAAUE,EAAK,MAAO,CAAE,EAGjH,KApBC,IAAI,UAAWF,EAAQ,qEAAsEG,CAAQ,CAAE,CAqBhH,CAKAV,EAAO,QAAUQ,KCxEjB,IAAAG,EAAAC,EAAA,SAAAC,GAAAC,EAAA,cA0BA,IAAIC,GAAU,QAAS,sCAAuC,EAC1DC,GAAO,QAAS,mCAAoC,EACpDC,GAAY,QAAS,wCAAyC,EAC9DC,GAAS,QAAS,qCAAsC,EACxDC,GAAM,QAAS,kCAAmC,EAClDC,GAAY,QAAS,wCAAyC,EAC9DC,GAAS,QAAS,qCAAsC,EACxDC,GAAS,QAAS,qCAAsC,EACxDC,GAAc,QAAS,0CAA2C,EAClEC,GAAI,QAAS,gCAAiC,EAC9CC,GAAU,QAAS,sCAAuC,EAC1DC,GAAQ,QAAS,oCAAqC,EACtDC,GAAS,QAAS,qCAAsC,EACxDC,GAAW,QAAS,uCAAwC,EAC5DC,GAAc,QAAS,0CAA2C,EAClEC,GAAU,QAAS,sCAAuC,EAC1DC,GAAO,QAAS,mCAAoC,EACpDC,GAAW,QAAS,uCAAwC,EAC5DC,GAAY,QAAS,wCAAyC,EAC9DC,GAAS,QAAS,qCAAsC,EACxDC,GAAU,QAAS,2CAA4C,EAC/DC,GAAW,QAAS,uCAAwC,EAC5DC,GAAI,QAAS,gCAAiC,EAC9CC,GAAa,QAAS,yCAA0C,EAChEC,GAAU,QAAS,sCAAuC,EAC1DC,GAAU,QAAS,sCAAuC,EAK1DC,EAAM,CAAC,EAEXA,EAAK,QAAc1B,GACnB0B,EAAK,KAAWzB,GAChByB,EAAK,UAAgBxB,GACrBwB,EAAK,OAAavB,GAClBuB,EAAK,IAAUtB,GACfsB,EAAK,UAAgBrB,GACrBqB,EAAK,OAAapB,GAClBoB,EAAK,OAAanB,GAClBmB,EAAK,YAAkBlB,GACvBkB,EAAK,EAAQjB,GACbiB,EAAK,QAAchB,GACnBgB,EAAK,MAAYf,GACjBe,EAAK,OAAad,GAClBc,EAAK,SAAeb,GACpBa,EAAK,YAAkBZ,GACvBY,EAAK,QAAcX,GACnBW,EAAK,KAAWV,GAChBU,EAAK,SAAeT,GACpBS,EAAK,UAAgBR,GACrBQ,EAAK,OAAaP,GAClBO,EAAK,cAAe,EAAIN,GACxBM,EAAK,SAAeL,GACpBK,EAAK,EAAQJ,GACbI,EAAK,WAAiBH,GACtBG,EAAK,QAAcF,GACnBE,EAAK,QAAcD,GAKnB1B,EAAO,QAAU2B,ICxFjB,IAAAC,EAAAC,EAAA,SAAAC,GAAAC,EAAA,cAsBA,IAAIC,GAAS,QAAS,uBAAwB,EAC1CC,GAAM,IAaV,SAASC,GAAQC,EAAO,CACvB,IAAIC,EAAMH,GAAKE,CAAK,EACpB,GAAKC,IAAQ,OACZ,MAAM,IAAI,MAAOJ,GAAQ,6EAA8EG,CAAK,CAAE,EAE/G,OAAOC,CACR,CAKAL,EAAO,QAAUG,KC/CjB,IAAAG,EAAAC,EAAA,SAAAC,GAAAC,EAAA,cAsBA,IAAIC,GAAoB,QAAS,oCAAqC,EAClEC,GAAW,QAAS,gCAAiC,EACrDC,GAAY,QAAS,2BAA4B,EAAE,YACnDC,EAAa,QAAS,iCAAkC,EACxDC,EAAS,QAAS,kCAAmC,EACrDC,EAAS,QAAS,uBAAwB,EAe9C,SAASC,GAAOC,EAAO,CAEtB,IAAIC,EACAC,EACAC,EAIJ,GAFAD,EAAO,EACPD,EAAW,GACN,UAAU,OAAS,EAAI,CAC3B,GAAK,CAACP,GAAUM,CAAK,EACpB,MAAM,IAAI,UAAWF,EAAQ,mEAAoEE,CAAK,CAAE,EAEzG,GAAKJ,EAAYI,EAAM,QAAS,EAAI,CACnC,GAAK,CAACP,GAAmBO,EAAK,MAAO,EACpC,MAAM,IAAI,UAAWF,EAAQ,wEAAyE,SAAUE,EAAK,MAAO,CAAE,EAE/HE,EAAOF,EAAK,MACb,CACA,GAAKJ,EAAYI,EAAM,UAAW,EAAI,CACrC,GAAK,CAACL,GAAWK,EAAK,QAAS,EAC9B,MAAM,IAAI,UAAWF,EAAQ,+DAAgE,WAAYE,EAAK,QAAS,CAAE,EAE1HC,EAAWD,EAAK,QACjB,CACD,CAMA,OAJAG,EAAM,GACNA,GAAO,KAAK,OACZA,GAAO,OACPA,GAAO,sCACE,KAAK,YAAc,CAC5B,IAAK,OACJA,GAAO,4BACP,MACD,IAAK,UACJA,GAAO,yBACP,MACD,IAAK,YACL,QACCA,GAAO,YACP,KACD,CACA,OAAAA,GAAO,oBACPA,GAAO,OACPA,GAAO,eAAiBN,EAAQ,KAAK,OAAQ,CAACK,CAAK,EAAI,KACvDC,GAAO,kBAAoBN,EAAQ,KAAK,UAAW,CAACK,CAAK,EACzDC,GAAO,OACFF,IACJE,GAAO,kBACF,KAAK,SACTA,GAAO,0CAA6C,KAAK,MAAM,IAAO,uBAEtEA,GAAO,kDAAqD,KAAK,MAAM,IAAO,uBAE/EA,GAAO,MAEDA,CACR,CAKAX,EAAO,QAAUO,KCxGjB,IAAAK,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBA,IAAIC,GAAmB,QAAS,oCAAqC,EACjEC,GAAW,QAAS,0BAA2B,EAC/CC,GAAgB,QAAS,gCAAiC,EAAE,WAC5DC,EAAc,QAAS,yCAA0C,EACjEC,GAAa,QAAS,4BAA6B,EACnDC,EAAW,QAAS,0BAA2B,EAAE,YACjDC,EAAS,QAAS,uBAAwB,EAC1CC,GAAQ,QAAS,uBAAwB,EACzCC,EAAM,QAAS,2BAA4B,EAC3CC,GAAe,IACfC,GAAc,IACdC,GAAY,IACZC,EAAW,IACXC,GAAW,IACXC,GAAS,IACTC,GAAQ,IAKRC,GAAQ,MAAM,UAAU,MA6B5B,SAASC,IAAS,CACjB,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAIJ,GAFAD,EAAI,UAAW,CAAE,EACjBC,EAAI,UAAW,CAAE,EACZ,CAACjC,GAAegC,CAAE,GAAK,CAAClC,GAAkBkC,CAAE,EAChD,MAAM,IAAI,UAAW5B,EAAQ,uFAAwF4B,CAAE,CAAE,EAE1H,GAAK,CAAC9B,GAAY+B,CAAE,GAAK,CAAC9B,EAAU8B,CAAE,EACrC,MAAM,IAAI,UAAW7B,EAAQ,4FAA6F6B,CAAE,CAAE,EAS/H,IAPK9B,EAAU8B,CAAE,IAChBA,EAAIrB,GAAQqB,CAAE,GAEfjB,EAAciB,EAAE,OAAS,EACzBF,EAAIC,EAAE,OAENf,EAAa,IAAI,MAAOD,CAAY,EAC9Bc,EAAI,EAAGA,EAAId,EAAac,IAAM,CAGnC,GAFAH,EAAMG,EAAI,EACVD,EAAM,UAAWF,CAAI,EAChB,CAAC5B,GAAU8B,CAAI,GAAKxB,GAAOwB,CAAI,EACnC,MAAM,IAAI,UAAWzB,EAAQ,0EAA2EyB,CAAI,CAAE,EAE/GZ,EAAYa,CAAE,EAAI,UAAWH,CAAI,CAClC,CAEA,GADAN,EAAO,CAAC,EACH,UAAU,OAAS,EAAIL,IAC3BG,EAAU,UAAW,EAAIH,CAAY,EACrCU,EAAMf,GAAUU,EAAMF,CAAQ,EACzBO,GACJ,MAAMA,EAWR,GAPAM,EAAIlB,GAAM,KAAMkB,CAAE,EAEbX,EAAK,QAAU,OACnBD,EAAQ,IAERA,EAAQC,EAAK,MAETD,EAAQ,GAAOA,EAAQ,EAC3B,MAAM,IAAI,WAAYhB,EAAQ,sFAAuF,QAASgB,CAAM,CAAE,EAQvI,IAJKC,EAAK,SAAW,IACpBW,EAAE,KAAMvB,EAAU,EAEnBS,EAAW,CAAE,IAAK,EAAE,OAAQD,CAAW,EACjCa,EAAI,EAAGA,EAAIC,EAAGD,IACnBZ,EAAU,CAAE,EAAIc,EAAGF,CAAE,EACrBN,EAAOS,EAAE,MAAO,KAAMf,CAAS,EAC/Bc,EAAGF,CAAE,EAAIN,EAASM,EAAIC,EAIvB,OADAN,EAAMJ,EAAK,aAAe,YACjBI,EAAM,CACf,IAAK,YACJF,EAAOjB,EAAKyB,EAAG,CAAEzB,EAAKyB,EAAGC,EAAG,CAAE,EAAG1B,EAAKyB,EAAGrB,EAAU,EAAEqB,EAAGC,CAAE,EAAG,CAAE,CAAE,EAAG,CAAE,EACtE,MACD,IAAK,UACJT,EAAOjB,EAAKyB,EAAGrB,EAAU,EAAEqB,EAAGC,CAAE,EAAG,CAAE,EACrC,MACD,IAAK,OACJT,EAAOjB,EAAKyB,EAAGC,EAAG,CAAE,EACpB,MACD,QACC,MAAM,IAAI,MAAO5B,EAAQ,gFAAiF,cAAe,CAAE,YAAa,OAAQ,SAAU,EAAE,KAAM,MAAO,EAAGqB,CAAI,CAAE,CACnL,CACA,OAAKA,IAAQ,YACZH,EAAO,EAAMd,GAAae,EAAMQ,CAAE,EAElCT,EAAO,EAAMf,GAAcgB,EAAMQ,CAAE,EAGpCH,EAAM,CAAC,EACP3B,EAAa2B,EAAK,WAAYN,GAAQF,CAAM,EAC5CnB,EAAa2B,EAAK,QAASR,CAAM,EACjCnB,EAAa2B,EAAK,SAAUN,CAAK,EACjCrB,EAAa2B,EAAK,YAAaL,CAAK,EACpCtB,EAAa2B,EAAK,SAAU,yCAA0C,EACtE3B,EAAa2B,EAAK,QAASf,EAAM,EACjCZ,EAAa2B,EAAK,cAAeH,CAAI,EAC9BG,CACR,CAKA/B,GAAO,QAAUkB,KC7HjB,IAAImB,GAAO,KAKX,OAAO,QAAUA",
  "names": ["require_smirnov", "__commonJSMin", "exports", "module", "binomcoefln", "floor", "exp", "ln", "pKolmogorov1", "d", "n", "len", "out", "tmp", "i", "require_marsaglia", "__commonJSMin", "exports", "module", "floor", "sqrt", "pow", "exp", "Float64Array", "pKolmogorov", "d", "n", "eH", "eQ", "h", "H", "Q", "g", "i", "j", "k", "m", "mpow", "A", "eA", "eB", "B", "mmult", "x", "y", "s", "z", "require_ascending", "__commonJSMin", "exports", "module", "ascending", "a", "b", "require_subtract", "__commonJSMin", "exports", "module", "subtract", "x", "arr", "len", "res", "i", "require_validate", "__commonJSMin", "exports", "module", "isBoolean", "isNumber", "isObject", "isString", "isnan", "hasOwnProp", "format", "validate", "opts", "options", "require_cdf", "__commonJSMin", "exports", "module", "arcsine", "beta", "betaprime", "cauchy", "chi", "chisquare", "cosine", "erlang", "exponential", "f", "frechet", "gamma", "gumbel", "invgamma", "kumaraswamy", "laplace", "levy", "logistic", "lognormal", "normal", "pareto1", "rayleigh", "t", "triangular", "uniform", "weibull", "CDF", "require_get_cdf", "__commonJSMin", "exports", "module", "format", "CDF", "getCDF", "name", "cdf", "require_print", "__commonJSMin", "exports", "module", "isPositiveInteger", "isObject", "isBoolean", "hasOwnProp", "roundn", "format", "print", "opts", "decision", "dgts", "str", "require_main", "__commonJSMin", "exports", "module", "isTypedArrayLike", "isNumber", "isNumberArray", "setReadOnly", "isFunction", "isString", "format", "isnan", "max", "pKolmogorov1", "pKolmogorov", "ascending", "subtract", "validate", "getCDF", "print", "slice", "kstest", "nDistParams", "distParams", "distArgs", "options", "alpha", "opts", "pval", "stat", "yVal", "alt", "err", "idx", "out", "val", "i", "n", "x", "y", "main"]
}
