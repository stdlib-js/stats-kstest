{"version":3,"file":"mod.js","sources":["../node_modules/@stdlib/utils-define-property/lib/define_property.js","../node_modules/@stdlib/utils-define-property/lib/builtin.js","../node_modules/@stdlib/string-base-format-interpolate/lib/is_number.js","../node_modules/@stdlib/string-base-format-interpolate/lib/zero_pad.js","../node_modules/@stdlib/string-base-format-interpolate/lib/format_integer.js","../node_modules/@stdlib/string-base-format-interpolate/lib/is_string.js","../node_modules/@stdlib/string-base-format-interpolate/lib/format_double.js","../node_modules/@stdlib/string-base-format-interpolate/lib/space_pad.js","../node_modules/@stdlib/string-base-format-interpolate/lib/main.js","../node_modules/@stdlib/string-base-format-tokenize/lib/main.js","../node_modules/@stdlib/string-format/lib/is_string.js","../node_modules/@stdlib/string-format/lib/main.js","../node_modules/@stdlib/utils-define-property/lib/polyfill.js","../node_modules/@stdlib/utils-define-property/lib/index.js","../node_modules/@stdlib/utils-define-property/lib/has_define_property_support.js","../node_modules/@stdlib/utils-define-nonenumerable-read-only-property/lib/main.js","../node_modules/@stdlib/assert-is-number/lib/primitive.js","../node_modules/@stdlib/assert-has-tostringtag-support/lib/main.js","../node_modules/@stdlib/assert-has-symbol-support/lib/main.js","../node_modules/@stdlib/utils-native-class/lib/tostring.js","../node_modules/@stdlib/assert-has-own-property/lib/main.js","../node_modules/@stdlib/symbol-ctor/lib/main.js","../node_modules/@stdlib/utils-native-class/lib/tostringtag.js","../node_modules/@stdlib/utils-native-class/lib/index.js","../node_modules/@stdlib/utils-native-class/lib/polyfill.js","../node_modules/@stdlib/utils-native-class/lib/main.js","../node_modules/@stdlib/number-ctor/lib/main.js","../node_modules/@stdlib/assert-is-number/lib/tostring.js","../node_modules/@stdlib/assert-is-number/lib/object.js","../node_modules/@stdlib/assert-is-number/lib/try2serialize.js","../node_modules/@stdlib/assert-is-number/lib/main.js","../node_modules/@stdlib/assert-is-number/lib/index.js","../node_modules/@stdlib/constants-float64-pinf/lib/index.js","../node_modules/@stdlib/constants-float64-ninf/lib/index.js","../node_modules/@stdlib/math-base-special-floor/lib/main.js","../node_modules/@stdlib/math-base-assert-is-integer/lib/main.js","../node_modules/@stdlib/assert-is-integer/lib/integer.js","../node_modules/@stdlib/assert-is-integer/lib/primitive.js","../node_modules/@stdlib/assert-is-integer/lib/object.js","../node_modules/@stdlib/assert-is-integer/lib/main.js","../node_modules/@stdlib/assert-is-nonnegative-integer/lib/primitive.js","../node_modules/@stdlib/assert-is-nonnegative-integer/lib/object.js","../node_modules/@stdlib/assert-is-nonnegative-integer/lib/main.js","../node_modules/@stdlib/assert-is-integer/lib/index.js","../node_modules/@stdlib/assert-is-nonnegative-integer/lib/index.js","../node_modules/@stdlib/assert-is-typed-array-like/lib/main.js","../node_modules/@stdlib/constants-array-max-typed-array-length/lib/index.js","../node_modules/@stdlib/assert-tools-array-like-function/lib/main.js","../node_modules/@stdlib/assert-is-array-like/lib/main.js","../node_modules/@stdlib/constants-array-max-array-length/lib/index.js","../node_modules/@stdlib/assert-is-number-array/lib/index.js","../node_modules/@stdlib/utils-define-read-only-property/lib/main.js","../node_modules/@stdlib/utils-type-of/lib/fixtures/re.js","../node_modules/@stdlib/assert-is-boolean/lib/primitive.js","../node_modules/@stdlib/boolean-ctor/lib/main.js","../node_modules/@stdlib/assert-is-boolean/lib/tostring.js","../node_modules/@stdlib/assert-is-boolean/lib/object.js","../node_modules/@stdlib/assert-is-boolean/lib/try2serialize.js","../node_modules/@stdlib/assert-is-boolean/lib/main.js","../node_modules/@stdlib/utils-global/lib/codegen.js","../node_modules/@stdlib/assert-is-boolean/lib/index.js","../node_modules/@stdlib/utils-global/lib/self.js","../node_modules/@stdlib/utils-global/lib/window.js","../node_modules/@stdlib/utils-global/lib/global.js","../node_modules/@stdlib/utils-global/lib/global_this.js","../node_modules/@stdlib/utils-type-of/lib/fixtures/nodelist.js","../node_modules/@stdlib/utils-global/lib/main.js","../node_modules/@stdlib/utils-type-of/lib/fixtures/typedarray.js","../node_modules/@stdlib/regexp-function-name/lib/main.js","../node_modules/@stdlib/regexp-function-name/lib/regexp.js","../node_modules/@stdlib/regexp-function-name/lib/index.js","../node_modules/@stdlib/assert-is-array/lib/main.js","../node_modules/@stdlib/assert-is-object-like/lib/main.js","../node_modules/@stdlib/utils-constructor-name/lib/main.js","../node_modules/@stdlib/assert-is-buffer/lib/main.js","../node_modules/@stdlib/assert-is-object-like/lib/index.js","../node_modules/@stdlib/assert-tools-array-function/lib/main.js","../node_modules/@stdlib/utils-type-of/lib/index.js","../node_modules/@stdlib/utils-type-of/lib/check.js","../node_modules/@stdlib/utils-type-of/lib/polyfill.js","../node_modules/@stdlib/utils-type-of/lib/main.js","../node_modules/@stdlib/assert-is-function/lib/main.js","../node_modules/@stdlib/assert-is-string/lib/primitive.js","../node_modules/@stdlib/assert-is-string/lib/valueof.js","../node_modules/@stdlib/assert-is-string/lib/object.js","../node_modules/@stdlib/assert-is-string/lib/try2valueof.js","../node_modules/@stdlib/assert-is-string/lib/main.js","../node_modules/@stdlib/math-base-assert-is-nan/lib/main.js","../node_modules/@stdlib/assert-is-nan/lib/primitive.js","../node_modules/@stdlib/assert-is-nan/lib/object.js","../node_modules/@stdlib/assert-is-nan/lib/main.js","../node_modules/@stdlib/math-base-assert-is-positive-zero/lib/main.js","../node_modules/@stdlib/stats-base-max/lib/max.js","../node_modules/@stdlib/math-base-assert-is-infinite/lib/main.js","../node_modules/@stdlib/math-base-special-abs/lib/main.js","../node_modules/@stdlib/assert-is-string/lib/index.js","../node_modules/@stdlib/assert-is-nan/lib/index.js","../node_modules/@stdlib/stats-base-max/lib/main.js","../node_modules/@stdlib/stats-base-max/lib/ndarray.js","../node_modules/@stdlib/assert-is-uint32array/lib/main.js","../node_modules/@stdlib/constants-uint32-max/lib/index.js","../node_modules/@stdlib/assert-has-uint32array-support/lib/uint32array.js","../node_modules/@stdlib/array-uint32/lib/main.js","../node_modules/@stdlib/array-uint32/lib/index.js","../node_modules/@stdlib/assert-has-uint32array-support/lib/main.js","../node_modules/@stdlib/array-uint32/lib/polyfill.js","../node_modules/@stdlib/assert-is-float64array/lib/main.js","../node_modules/@stdlib/assert-has-float64array-support/lib/float64array.js","../node_modules/@stdlib/array-float64/lib/main.js","../node_modules/@stdlib/array-float64/lib/index.js","../node_modules/@stdlib/assert-has-float64array-support/lib/main.js","../node_modules/@stdlib/array-float64/lib/polyfill.js","../node_modules/@stdlib/assert-is-uint8array/lib/main.js","../node_modules/@stdlib/constants-uint8-max/lib/index.js","../node_modules/@stdlib/assert-has-uint8array-support/lib/uint8array.js","../node_modules/@stdlib/array-uint8/lib/main.js","../node_modules/@stdlib/array-uint8/lib/index.js","../node_modules/@stdlib/assert-has-uint8array-support/lib/main.js","../node_modules/@stdlib/array-uint8/lib/polyfill.js","../node_modules/@stdlib/assert-is-uint16array/lib/main.js","../node_modules/@stdlib/constants-uint16-max/lib/index.js","../node_modules/@stdlib/assert-has-uint16array-support/lib/uint16array.js","../node_modules/@stdlib/array-uint16/lib/main.js","../node_modules/@stdlib/array-uint16/lib/index.js","../node_modules/@stdlib/assert-has-uint16array-support/lib/main.js","../node_modules/@stdlib/array-uint16/lib/polyfill.js","../node_modules/@stdlib/assert-is-little-endian/lib/main.js","../node_modules/@stdlib/assert-is-little-endian/lib/ctors.js","../node_modules/@stdlib/number-float64-base-get-high-word/lib/high.js","../node_modules/@stdlib/number-float64-base-get-high-word/lib/main.js","../node_modules/@stdlib/number-float64-base-set-high-word/lib/high.js","../node_modules/@stdlib/number-float64-base-set-high-word/lib/main.js","../node_modules/@stdlib/math-base-special-ln/lib/main.js","../node_modules/@stdlib/constants-float64-exponent-bias/lib/index.js","../node_modules/@stdlib/math-base-special-ln/lib/polyval_p.js","../node_modules/@stdlib/math-base-special-ln/lib/polyval_q.js","../node_modules/@stdlib/math-base-special-ceil/lib/main.js","../node_modules/@stdlib/math-base-special-trunc/lib/main.js","../node_modules/@stdlib/math-base-special-kernel-cos/lib/main.js","../node_modules/@stdlib/math-base-special-kernel-cos/lib/polyval_c13.js","../node_modules/@stdlib/math-base-special-kernel-cos/lib/polyval_c46.js","../node_modules/@stdlib/math-base-special-kernel-sin/lib/main.js","../node_modules/@stdlib/constants-float64-high-word-abs-mask/lib/index.js","../node_modules/@stdlib/number-float64-base-from-words/lib/indices.js","../node_modules/@stdlib/number-float64-base-get-low-word/lib/low.js","../node_modules/@stdlib/number-float64-base-get-low-word/lib/main.js","../node_modules/@stdlib/number-float64-base-from-words/lib/main.js","../node_modules/@stdlib/constants-float64-max-base2-exponent/lib/index.js","../node_modules/@stdlib/number-float64-base-to-words/lib/indices.js","../node_modules/@stdlib/number-float64-base-to-words/lib/assign.js","../node_modules/@stdlib/number-float64-base-to-words/lib/main.js","../node_modules/@stdlib/number-float64-base-to-words/lib/index.js","../node_modules/@stdlib/math-base-special-copysign/lib/main.js","../node_modules/@stdlib/constants-float64-high-word-sign-mask/lib/index.js","../node_modules/@stdlib/number-float64-base-normalize/lib/assign.js","../node_modules/@stdlib/constants-float64-smallest-normal/lib/index.js","../node_modules/@stdlib/number-float64-base-normalize/lib/index.js","../node_modules/@stdlib/number-float64-base-normalize/lib/main.js","../node_modules/@stdlib/math-base-special-ldexp/lib/main.js","../node_modules/@stdlib/number-float64-base-exponent/lib/main.js","../node_modules/@stdlib/constants-float64-high-word-exponent-mask/lib/index.js","../node_modules/@stdlib/constants-float64-min-base2-exponent-subnormal/lib/index.js","../node_modules/@stdlib/constants-float64-max-base2-exponent-subnormal/lib/index.js","../node_modules/@stdlib/array-base-zeros/lib/main.js","../node_modules/@stdlib/array-base-filled/lib/main.js","../node_modules/@stdlib/math-base-special-rempio2/lib/kernel_rempio2.js","../node_modules/@stdlib/math-base-special-round/lib/main.js","../node_modules/@stdlib/math-base-special-rempio2/lib/rempio2_medium.js","../node_modules/@stdlib/math-base-special-rempio2/lib/main.js","../node_modules/@stdlib/constants-float64-high-word-significand-mask/lib/index.js","../node_modules/@stdlib/math-base-special-cos/lib/main.js","../node_modules/@stdlib/math-base-special-sin/lib/main.js","../node_modules/@stdlib/constants-float64-pi/lib/index.js","../node_modules/@stdlib/math-base-special-sinpi/lib/main.js","../node_modules/@stdlib/math-base-special-gammaln/lib/main.js","../node_modules/@stdlib/math-base-special-gammaln/lib/polyval_a1.js","../node_modules/@stdlib/math-base-special-gammaln/lib/polyval_a2.js","../node_modules/@stdlib/math-base-special-gammaln/lib/polyval_t1.js","../node_modules/@stdlib/math-base-special-gammaln/lib/polyval_t2.js","../node_modules/@stdlib/math-base-special-gammaln/lib/polyval_t3.js","../node_modules/@stdlib/math-base-special-gammaln/lib/polyval_u.js","../node_modules/@stdlib/math-base-special-gammaln/lib/polyval_v.js","../node_modules/@stdlib/math-base-special-gammaln/lib/polyval_s.js","../node_modules/@stdlib/math-base-special-gammaln/lib/polyval_r.js","../node_modules/@stdlib/math-base-special-gammaln/lib/polyval_w.js","../node_modules/@stdlib/math-base-special-log1p/lib/main.js","../node_modules/@stdlib/math-base-special-log1p/lib/polyval_lp.js","../node_modules/@stdlib/math-base-assert-is-negative-zero/lib/main.js","../node_modules/@stdlib/math-base-assert-is-even/lib/main.js","../node_modules/@stdlib/math-base-assert-is-odd/lib/main.js","../node_modules/@stdlib/math-base-special-sqrt/lib/main.js","../node_modules/@stdlib/number-float64-base-set-low-word/lib/low.js","../node_modules/@stdlib/number-float64-base-set-low-word/lib/main.js","../node_modules/@stdlib/number-uint32-base-to-int32/lib/main.js","../node_modules/@stdlib/math-base-special-pow/lib/log2ax.js","../node_modules/@stdlib/math-base-special-pow/lib/main.js","../node_modules/@stdlib/math-base-special-pow/lib/y_is_infinite.js","../node_modules/@stdlib/math-base-special-pow/lib/x_is_zero.js","../node_modules/@stdlib/math-base-special-pow/lib/y_is_huge.js","../node_modules/@stdlib/math-base-special-pow/lib/logx.js","../node_modules/@stdlib/math-base-special-pow/lib/polyval_w.js","../node_modules/@stdlib/math-base-special-pow/lib/polyval_l.js","../node_modules/@stdlib/math-base-special-pow/lib/pow2.js","../node_modules/@stdlib/math-base-special-pow/lib/polyval_p.js","../node_modules/@stdlib/constants-float64-ln-two/lib/index.js","../node_modules/@stdlib/math-base-special-exp/lib/main.js","../node_modules/@stdlib/math-base-special-exp/lib/expmulti.js","../node_modules/@stdlib/math-base-special-exp/lib/polyval_p.js","../node_modules/@stdlib/math-base-special-gamma/lib/stirling_approximation.js","../node_modules/@stdlib/math-base-special-gamma/lib/polyval_s.js","../node_modules/@stdlib/constants-float64-sqrt-two-pi/lib/index.js","../node_modules/@stdlib/math-base-special-gamma/lib/small_approximation.js","../node_modules/@stdlib/constants-float64-eulergamma/lib/index.js","../node_modules/@stdlib/math-base-special-gamma/lib/main.js","../node_modules/@stdlib/math-base-special-gamma/lib/rational_pq.js","../node_modules/@stdlib/math-base-special-max/lib/main.js","../node_modules/@stdlib/math-base-special-min/lib/main.js","../node_modules/@stdlib/constants-float64-ln-sqrt-two-pi/lib/index.js","../node_modules/@stdlib/math-base-special-betaln/lib/dceval.js","../node_modules/@stdlib/math-base-special-betaln/lib/gamma_correction.js","../node_modules/@stdlib/math-base-special-binomcoefln/lib/main.js","../node_modules/@stdlib/math-base-special-betaln/lib/main.js","../lib/smirnov.js","../lib/marsaglia.js","../lib/ascending.js","../lib/subtract.js","../node_modules/@stdlib/object-ctor/lib/main.js","../node_modules/@stdlib/utils-get-prototype-of/lib/detect.js","../node_modules/@stdlib/utils-get-prototype-of/lib/native.js","../node_modules/@stdlib/utils-get-prototype-of/lib/polyfill.js","../node_modules/@stdlib/utils-get-prototype-of/lib/proto.js","../node_modules/@stdlib/assert-is-plain-object/lib/main.js","../node_modules/@stdlib/assert-is-object/lib/main.js","../node_modules/@stdlib/utils-get-prototype-of/lib/main.js","../lib/validate.js","../node_modules/@stdlib/math-base-special-asin/lib/main.js","../node_modules/@stdlib/math-base-special-asin/lib/rational_rs.js","../node_modules/@stdlib/constants-float64-fourth-pi/lib/index.js","../node_modules/@stdlib/math-base-special-asin/lib/rational_pq.js","../node_modules/@stdlib/stats-base-dists-arcsine-cdf/lib/main.js","../node_modules/@stdlib/utils-constant-function/lib/main.js","../node_modules/@stdlib/stats-base-dists-arcsine-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-arcsine-cdf/lib/factory.js","../node_modules/@stdlib/math-base-special-expm1/lib/main.js","../node_modules/@stdlib/constants-float64-half-ln-two/lib/index.js","../node_modules/@stdlib/math-base-special-expm1/lib/polyval_q.js","../node_modules/@stdlib/constants-float64-e/lib/index.js","../node_modules/@stdlib/constants-float64-eps/lib/index.js","../node_modules/@stdlib/math-base-special-beta/lib/lanczos_sum_expg_scaled.js","../node_modules/@stdlib/math-base-special-beta/lib/main.js","../node_modules/@stdlib/constants-float64-max/lib/index.js","../node_modules/@stdlib/constants-float64-half-pi/lib/index.js","../node_modules/@stdlib/math-base-special-factorial/lib/main.js","../node_modules/@stdlib/math-base-special-gamma-lanczos-sum/lib/rational_pq.js","../node_modules/@stdlib/math-base-special-gamma-delta-ratio/lib/gamma_delta_ratio_lanczos.js","../node_modules/@stdlib/constants-float64-gamma-lanczos-g/lib/index.js","../node_modules/@stdlib/math-base-special-gamma-delta-ratio/lib/main.js","../node_modules/@stdlib/constants-float64-sqrt-eps/lib/index.js","../node_modules/@stdlib/constants-float64-max-ln/lib/index.js","../node_modules/@stdlib/math-base-special-erfc/lib/main.js","../node_modules/@stdlib/math-base-special-erfc/lib/polyval_pp.js","../node_modules/@stdlib/math-base-special-erfc/lib/polyval_qq.js","../node_modules/@stdlib/math-base-special-erfc/lib/polyval_pa.js","../node_modules/@stdlib/math-base-special-erfc/lib/polyval_qa.js","../node_modules/@stdlib/math-base-special-erfc/lib/polyval_ra.js","../node_modules/@stdlib/math-base-special-erfc/lib/polyval_sa.js","../node_modules/@stdlib/math-base-special-erfc/lib/polyval_rb.js","../node_modules/@stdlib/math-base-special-erfc/lib/polyval_sb.js","../node_modules/@stdlib/constants-float64-min-ln/lib/index.js","../node_modules/@stdlib/math-base-special-gammainc/lib/full_igamma_prefix.js","../node_modules/@stdlib/math-base-tools-evalpoly/lib/main.js","../node_modules/@stdlib/function-ctor/lib/main.js","../node_modules/@stdlib/math-base-tools-evalpoly/lib/index.js","../node_modules/@stdlib/math-base-tools-evalpoly/lib/factory.js","../node_modules/@stdlib/utils-eval/lib/index.js","../node_modules/@stdlib/assert-has-generator-support/lib/main.js","../node_modules/@stdlib/math-base-tools-sum-series/lib/basic.js","../node_modules/@stdlib/math-base-tools-sum-series/lib/index.js","../node_modules/@stdlib/math-base-tools-sum-series/lib/generators.js","../node_modules/@stdlib/math-base-special-gammainc/lib/igamma_temme_large.js","../node_modules/@stdlib/math-base-special-log1pmx/lib/main.js","../node_modules/@stdlib/math-base-special-log1pmx/lib/log1p_series.js","../node_modules/@stdlib/math-base-special-gammainc/lib/polyval_c0.js","../node_modules/@stdlib/math-base-special-gammainc/lib/polyval_c1.js","../node_modules/@stdlib/math-base-special-gammainc/lib/polyval_c2.js","../node_modules/@stdlib/math-base-special-gammainc/lib/polyval_c3.js","../node_modules/@stdlib/math-base-special-gammainc/lib/polyval_c4.js","../node_modules/@stdlib/math-base-special-gammainc/lib/polyval_c5.js","../node_modules/@stdlib/math-base-special-gammainc/lib/polyval_c6.js","../node_modules/@stdlib/math-base-special-gammainc/lib/polyval_c7.js","../node_modules/@stdlib/math-base-special-gammainc/lib/polyval_c8.js","../node_modules/@stdlib/constants-float64-two-pi/lib/index.js","../node_modules/@stdlib/math-base-special-gammainc/lib/lower_gamma_series.js","../node_modules/@stdlib/math-base-special-gammainc/lib/lower_incomplete_gamma_series.js","../node_modules/@stdlib/math-base-special-gamma-lanczos-sum-expg-scaled/lib/rational_pq.js","../node_modules/@stdlib/math-base-special-gammainc/lib/regularised_gamma_prefix.js","../node_modules/@stdlib/math-base-special-gamma1pm1/lib/lgamma_small_imp.js","../node_modules/@stdlib/math-base-special-gamma1pm1/lib/rational_p1q1.js","../node_modules/@stdlib/math-base-special-gamma1pm1/lib/rational_p2q2.js","../node_modules/@stdlib/math-base-special-gamma1pm1/lib/rational_p3q3.js","../node_modules/@stdlib/math-base-special-gammainc/lib/tgamma_small_upper_part.js","../node_modules/@stdlib/math-base-special-gamma1pm1/lib/main.js","../node_modules/@stdlib/math-base-special-powm1/lib/main.js","../node_modules/@stdlib/math-base-special-gammainc/lib/small_gamma2_series.js","../node_modules/@stdlib/math-base-tools-continued-fraction/lib/generators.js","../node_modules/@stdlib/constants-float32-smallest-normal/lib/index.js","../node_modules/@stdlib/math-base-tools-continued-fraction/lib/basic.js","../node_modules/@stdlib/math-base-tools-continued-fraction/lib/index.js","../node_modules/@stdlib/math-base-special-gammainc/lib/upper_gamma_fraction.js","../node_modules/@stdlib/math-base-special-gammainc/lib/upper_incomplete_gamma_fract.js","../node_modules/@stdlib/math-base-special-gammainc/lib/main.js","../node_modules/@stdlib/math-base-special-gammainc/lib/finite_gamma_q.js","../node_modules/@stdlib/math-base-special-gammainc/lib/finite_half_gamma_q.js","../node_modules/@stdlib/math-base-special-kernel-betainc/lib/beta_small_b_large_a_series.js","../node_modules/@stdlib/math-base-special-kernel-betainc/lib/regularized_gamma_prefix.js","../node_modules/@stdlib/math-base-special-kernel-betainc/lib/full_igamma_prefix.js","../node_modules/@stdlib/math-base-special-kernel-betainc/lib/rising_factorial_ratio.js","../node_modules/@stdlib/math-base-special-kernel-betainc/lib/ibeta_power_terms.js","../node_modules/@stdlib/math-base-special-minabs/lib/main.js","../node_modules/@stdlib/math-base-special-maxabs/lib/main.js","../node_modules/@stdlib/math-base-special-kernel-betainc/lib/ibeta_fraction2.js","../node_modules/@stdlib/math-base-special-binomcoef/lib/main.js","../node_modules/@stdlib/math-base-special-kernel-betainc/lib/ibeta_a_step.js","../node_modules/@stdlib/math-base-special-kernel-betainc/lib/ibeta_series.js","../node_modules/@stdlib/math-base-special-kernel-betainc/lib/assign.js","../node_modules/@stdlib/math-base-special-kernel-betainc/lib/binomial_ccdf.js","../node_modules/@stdlib/math-base-special-betainc/lib/main.js","../node_modules/@stdlib/stats-base-dists-beta-cdf/lib/main.js","../node_modules/@stdlib/stats-base-dists-beta-cdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-betaprime-cdf/lib/main.js","../node_modules/@stdlib/math-base-special-kernel-betainc/lib/index.js","../node_modules/@stdlib/math-base-special-kernel-betainc/lib/main.js","../node_modules/@stdlib/stats-base-dists-beta-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-betaprime-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-betaprime-cdf/lib/factory.js","../node_modules/@stdlib/math-base-special-atan2/lib/main.js","../node_modules/@stdlib/number-float64-base-signbit/lib/main.js","../node_modules/@stdlib/math-base-special-atan/lib/main.js","../node_modules/@stdlib/math-base-special-atan/lib/polyval_p.js","../node_modules/@stdlib/math-base-special-atan/lib/polyval_q.js","../node_modules/@stdlib/stats-base-dists-cauchy-cdf/lib/main.js","../node_modules/@stdlib/stats-base-dists-gamma-cdf/lib/main.js","../node_modules/@stdlib/stats-base-dists-degenerate-cdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-gamma-cdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-chi-cdf/lib/main.js","../node_modules/@stdlib/stats-base-dists-chisquare-cdf/lib/main.js","../node_modules/@stdlib/stats-base-dists-cosine-cdf/lib/main.js","../node_modules/@stdlib/math-base-assert-is-nonnegative-integer/lib/main.js","../node_modules/@stdlib/stats-base-dists-erlang-cdf/lib/main.js","../node_modules/@stdlib/stats-base-dists-exponential-cdf/lib/main.js","../node_modules/@stdlib/stats-base-dists-f-cdf/lib/main.js","../node_modules/@stdlib/stats-base-dists-frechet-cdf/lib/main.js","../node_modules/@stdlib/stats-base-dists-gumbel-cdf/lib/main.js","../node_modules/@stdlib/stats-base-dists-invgamma-cdf/lib/main.js","../node_modules/@stdlib/stats-base-dists-kumaraswamy-cdf/lib/main.js","../node_modules/@stdlib/stats-base-dists-laplace-cdf/lib/main.js","../node_modules/@stdlib/stats-base-dists-levy-cdf/lib/main.js","../node_modules/@stdlib/stats-base-dists-logistic-cdf/lib/main.js","../node_modules/@stdlib/stats-base-dists-normal-cdf/lib/main.js","../node_modules/@stdlib/stats-base-dists-lognormal-cdf/lib/main.js","../node_modules/@stdlib/stats-base-dists-pareto-type1-cdf/lib/main.js","../node_modules/@stdlib/stats-base-dists-rayleigh-cdf/lib/main.js","../node_modules/@stdlib/stats-base-dists-t-cdf/lib/main.js","../node_modules/@stdlib/stats-base-dists-triangular-cdf/lib/main.js","../node_modules/@stdlib/stats-base-dists-uniform-cdf/lib/main.js","../node_modules/@stdlib/stats-base-dists-weibull-cdf/lib/main.js","../node_modules/@stdlib/stats-base-dists-cauchy-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-cauchy-cdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-degenerate-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-degenerate-cdf/lib/main.js","../node_modules/@stdlib/stats-base-dists-gamma-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-chi-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-chi-cdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-chisquare-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-chisquare-cdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-cosine-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-cosine-cdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-erlang-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-erlang-cdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-exponential-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-exponential-cdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-f-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-f-cdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-frechet-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-frechet-cdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-gumbel-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-gumbel-cdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-invgamma-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-invgamma-cdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-kumaraswamy-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-kumaraswamy-cdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-laplace-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-laplace-cdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-levy-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-levy-cdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-logistic-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-logistic-cdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-normal-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-normal-cdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-lognormal-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-lognormal-cdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-pareto-type1-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-pareto-type1-cdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-rayleigh-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-rayleigh-cdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-t-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-t-cdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-triangular-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-triangular-cdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-uniform-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-uniform-cdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-weibull-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-weibull-cdf/lib/factory.js","../lib/cdf.js","../lib/get_cdf.js","../node_modules/@stdlib/assert-is-positive-integer/lib/primitive.js","../node_modules/@stdlib/assert-is-positive-integer/lib/object.js","../node_modules/@stdlib/assert-is-positive-integer/lib/main.js","../node_modules/@stdlib/assert-is-positive-integer/lib/index.js","../node_modules/@stdlib/constants-float64-max-safe-integer/lib/index.js","../node_modules/@stdlib/math-base-special-roundn/lib/main.js","../node_modules/@stdlib/constants-float64-min-base10-exponent-subnormal/lib/index.js","../node_modules/@stdlib/constants-float64-max-base10-exponent/lib/index.js","../node_modules/@stdlib/constants-float64-min-base10-exponent/lib/index.js","../lib/print.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof Object.defineProperty === 'function' ) ? Object.defineProperty : null;\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Defines (or modifies) an object property.\n*\n* ## Notes\n*\n* -   Property descriptors come in two flavors: **data descriptors** and **accessor descriptors**. A data descriptor is a property that has a value, which may or may not be writable. An accessor descriptor is a property described by a getter-setter function pair. A descriptor must be one of these two flavors and cannot be both.\n*\n* @name defineProperty\n* @type {Function}\n* @param {Object} obj - object on which to define the property\n* @param {(string|symbol)} prop - property name\n* @param {Object} descriptor - property descriptor\n* @param {boolean} [descriptor.configurable=false] - boolean indicating if property descriptor can be changed and if the property can be deleted from the provided object\n* @param {boolean} [descriptor.enumerable=false] - boolean indicating if the property shows up when enumerating object properties\n* @param {boolean} [descriptor.writable=false] - boolean indicating if the value associated with the property can be changed with an assignment operator\n* @param {*} [descriptor.value] - property value\n* @param {(Function|void)} [descriptor.get=undefined] - function which serves as a getter for the property, or, if no getter, undefined. When the property is accessed, a getter function is called without arguments and with the `this` context set to the object through which the property is accessed (which may not be the object on which the property is defined due to inheritance). The return value will be used as the property value.\n* @param {(Function|void)} [descriptor.set=undefined] - function which serves as a setter for the property, or, if no setter, undefined. When assigning a property value, a setter function is called with one argument (the value being assigned to the property) and with the `this` context set to the object through which the property is assigned.\n* @throws {TypeError} first argument must be an object\n* @throws {TypeError} third argument must be an object\n* @throws {Error} property descriptor cannot have both a value and a setter and/or getter\n* @returns {Object} object with added property\n*\n* @example\n* var obj = {};\n*\n* defineProperty( obj, 'foo', {\n*     'value': 'bar'\n* });\n*\n* var str = obj.foo;\n* // returns 'bar'\n*/\nvar defineProperty = Object.defineProperty;\n\n\n// EXPORTS //\n\nexport default defineProperty;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is a number primitive.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number primitive\n*\n* @example\n* var bool = isNumber( 3.14 );\n* // returns true\n*\n* @example\n* var bool = isNumber( NaN );\n* // returns true\n*\n* @example\n* var bool = isNumber( new Number( 3.14 ) );\n* // returns false\n*/\nfunction isNumber( value ) {\n\treturn ( typeof value === 'number' );  // NOTE: we inline the `isNumber.isPrimitive` function from `@stdlib/assert/is-number` in order to avoid circular dependencies.\n}\n\n\n// EXPORTS //\n\nexport default isNumber;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// FUNCTIONS //\n\n/**\n* Tests if a string starts with a minus sign (`-`).\n*\n* @private\n* @param {string} str - input string\n* @returns {boolean} boolean indicating if a string starts with a minus sign (`-`)\n*/\nfunction startsWithMinus( str ) {\n\treturn str[ 0 ] === '-';\n}\n\n/**\n* Returns a string of `n` zeros.\n*\n* @private\n* @param {number} n - number of zeros\n* @returns {string} string of zeros\n*/\nfunction zeros( n ) {\n\tvar out = '';\n\tvar i;\n\tfor ( i = 0; i < n; i++ ) {\n\t\tout += '0';\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Pads a token with zeros to the specified width.\n*\n* @private\n* @param {string} str - token argument\n* @param {number} width - token width\n* @param {boolean} [right=false] - boolean indicating whether to pad to the right\n* @returns {string} padded token argument\n*/\nfunction zeroPad( str, width, right ) {\n\tvar negative = false;\n\tvar pad = width - str.length;\n\tif ( pad < 0 ) {\n\t\treturn str;\n\t}\n\tif ( startsWithMinus( str ) ) {\n\t\tnegative = true;\n\t\tstr = str.substr( 1 );\n\t}\n\tstr = ( right ) ?\n\t\tstr + zeros( pad ) :\n\t\tzeros( pad ) + str;\n\tif ( negative ) {\n\t\tstr = '-' + str;\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nexport default zeroPad;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNumber from './is_number.js';\nimport zeroPad from './zero_pad.js';\n\n// NOTE: for the following, we explicitly avoid using stdlib packages in this particular package in order to avoid circular dependencies.\nvar lowercase = String.prototype.toLowerCase;\nvar uppercase = String.prototype.toUpperCase;\n\n\n// MAIN //\n\n/**\n* Formats a token object argument as an integer.\n*\n* @private\n* @param {Object} token - token object\n* @throws {Error} must provide a valid integer\n* @returns {string} formatted token argument\n*/\nfunction formatInteger( token ) {\n\tvar base;\n\tvar out;\n\tvar i;\n\n\tswitch ( token.specifier ) {\n\tcase 'b':\n\t\t// Case: %b (binary)\n\t\tbase = 2;\n\t\tbreak;\n\tcase 'o':\n\t\t// Case: %o (octal)\n\t\tbase = 8;\n\t\tbreak;\n\tcase 'x':\n\tcase 'X':\n\t\t// Case: %x, %X (hexadecimal)\n\t\tbase = 16;\n\t\tbreak;\n\tcase 'd':\n\tcase 'i':\n\tcase 'u':\n\tdefault:\n\t\t// Case: %d, %i, %u (decimal)\n\t\tbase = 10;\n\t\tbreak;\n\t}\n\tout = token.arg;\n\ti = parseInt( out, 10 );\n\tif ( !isFinite( i ) ) { // NOTE: We use the global `isFinite` function here instead of `@stdlib/math/base/assert/is-finite` in order to avoid circular dependencies.\n\t\tif ( !isNumber( out ) ) {\n\t\t\tthrow new Error( 'invalid integer. Value: ' + out );\n\t\t}\n\t\ti = 0;\n\t}\n\tif ( i < 0 && ( token.specifier === 'u' || base !== 10 ) ) {\n\t\ti = 0xffffffff + i + 1;\n\t}\n\tif ( i < 0 ) {\n\t\tout = ( -i ).toString( base );\n\t\tif ( token.precision ) {\n\t\t\tout = zeroPad( out, token.precision, token.padRight );\n\t\t}\n\t\tout = '-' + out;\n\t} else {\n\t\tout = i.toString( base );\n\t\tif ( !i && !token.precision ) {\n\t\t\tout = '';\n\t\t} else if ( token.precision ) {\n\t\t\tout = zeroPad( out, token.precision, token.padRight );\n\t\t}\n\t\tif ( token.sign ) {\n\t\t\tout = token.sign + out;\n\t\t}\n\t}\n\tif ( base === 16 ) {\n\t\tif ( token.alternate ) {\n\t\t\tout = '0x' + out;\n\t\t}\n\t\tout = ( token.specifier === uppercase.call( token.specifier ) ) ?\n\t\t\tuppercase.call( out ) :\n\t\t\tlowercase.call( out );\n\t}\n\tif ( base === 8 ) {\n\t\tif ( token.alternate && out.charAt( 0 ) !== '0' ) {\n\t\t\tout = '0' + out;\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default formatInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is a string primitive.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a string primitive\n*\n* @example\n* var bool = isString( 'beep' );\n* // returns true\n*\n* @example\n* var bool = isString( new String( 'beep' ) );\n* // returns false\n*/\nfunction isString( value ) {\n\treturn ( typeof value === 'string' ); // NOTE: we inline the `isString.isPrimitive` function from `@stdlib/assert/is-string` in order to avoid circular dependencies.\n}\n\n\n// EXPORTS //\n\nexport default isString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNumber from './is_number.js';\n\n// NOTE: for the following, we explicitly avoid using stdlib packages in this particular package in order to avoid circular dependencies.\nvar abs = Math.abs; // eslint-disable-line stdlib/no-builtin-math\nvar lowercase = String.prototype.toLowerCase;\nvar uppercase = String.prototype.toUpperCase;\nvar replace = String.prototype.replace;\n\n\n// VARIABLES //\n\nvar RE_EXP_POS_DIGITS = /e\\+(\\d)$/;\nvar RE_EXP_NEG_DIGITS = /e-(\\d)$/;\nvar RE_ONLY_DIGITS = /^(\\d+)$/;\nvar RE_DIGITS_BEFORE_EXP = /^(\\d+)e/;\nvar RE_TRAILING_PERIOD_ZERO = /\\.0$/;\nvar RE_PERIOD_ZERO_EXP = /\\.0*e/;\nvar RE_ZERO_BEFORE_EXP = /(\\..*[^0])0*e/;\n\n\n// MAIN //\n\n/**\n* Formats a token object argument as a floating-point number.\n*\n* @private\n* @param {Object} token - token object\n* @throws {Error} must provide a valid floating-point number\n* @returns {string} formatted token argument\n*/\nfunction formatDouble( token ) {\n\tvar digits;\n\tvar out;\n\tvar f = parseFloat( token.arg );\n\tif ( !isFinite( f ) ) { // NOTE: We use the global `isFinite` function here instead of `@stdlib/math/base/assert/is-finite` in order to avoid circular dependencies.\n\t\tif ( !isNumber( token.arg ) ) {\n\t\t\tthrow new Error( 'invalid floating-point number. Value: ' + out );\n\t\t}\n\t\t// Case: NaN, Infinity, or -Infinity\n\t\tf = token.arg;\n\t}\n\tswitch ( token.specifier ) {\n\tcase 'e':\n\tcase 'E':\n\t\tout = f.toExponential( token.precision );\n\t\tbreak;\n\tcase 'f':\n\tcase 'F':\n\t\tout = f.toFixed( token.precision );\n\t\tbreak;\n\tcase 'g':\n\tcase 'G':\n\t\tif ( abs( f ) < 0.0001 ) {\n\t\t\tdigits = token.precision;\n\t\t\tif ( digits > 0 ) {\n\t\t\t\tdigits -= 1;\n\t\t\t}\n\t\t\tout = f.toExponential( digits );\n\t\t} else {\n\t\t\tout = f.toPrecision( token.precision );\n\t\t}\n\t\tif ( !token.alternate ) {\n\t\t\tout = replace.call( out, RE_ZERO_BEFORE_EXP, '$1e' );\n\t\t\tout = replace.call( out, RE_PERIOD_ZERO_EXP, 'e');\n\t\t\tout = replace.call( out, RE_TRAILING_PERIOD_ZERO, '' );\n\t\t}\n\t\tbreak;\n\tdefault:\n\t\tthrow new Error( 'invalid double notation. Value: ' + token.specifier );\n\t}\n\tout = replace.call( out, RE_EXP_POS_DIGITS, 'e+0$1' );\n\tout = replace.call( out, RE_EXP_NEG_DIGITS, 'e-0$1' );\n\tif ( token.alternate ) {\n\t\tout = replace.call( out, RE_ONLY_DIGITS, '$1.' );\n\t\tout = replace.call( out, RE_DIGITS_BEFORE_EXP, '$1.e' );\n\t}\n\tif ( f >= 0 && token.sign ) {\n\t\tout = token.sign + out;\n\t}\n\tout = ( token.specifier === uppercase.call( token.specifier ) ) ?\n\t\tuppercase.call( out ) :\n\t\tlowercase.call( out );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default formatDouble;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// FUNCTIONS //\n\n/**\n* Returns `n` spaces.\n*\n* @private\n* @param {number} n - number of spaces\n* @returns {string} string of spaces\n*/\nfunction spaces( n ) {\n\tvar out = '';\n\tvar i;\n\tfor ( i = 0; i < n; i++ ) {\n\t\tout += ' ';\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Pads a token with spaces to the specified width.\n*\n* @private\n* @param {string} str - token argument\n* @param {number} width - token width\n* @param {boolean} [right=false] - boolean indicating whether to pad to the right\n* @returns {string} padded token argument\n*/\nfunction spacePad( str, width, right ) {\n\tvar pad = width - str.length;\n\tif ( pad < 0 ) {\n\t\treturn str;\n\t}\n\tstr = ( right ) ?\n\t\tstr + spaces( pad ) :\n\t\tspaces( pad ) + str;\n\treturn str;\n}\n\n\n// EXPORTS //\n\nexport default spacePad;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport formatInteger from './format_integer.js';\nimport isString from './is_string.js';\nimport formatDouble from './format_double.js';\nimport spacePad from './space_pad.js';\nimport zeroPad from './zero_pad.js';\n\n\n// VARIABLES //\n\nvar fromCharCode = String.fromCharCode;\nvar isnan = isNaN; // NOTE: We use the global `isNaN` function here instead of `@stdlib/math/base/assert/is-nan` to avoid circular dependencies.\nvar isArray = Array.isArray; // NOTE: We use the global `Array.isArray` function here instead of `@stdlib/assert/is-array` to avoid circular dependencies.\n\n\n// FUNCTIONS //\n\n/**\n* Initializes token object with properties of supplied format identifier object or default values if not present.\n*\n* @private\n* @param {Object} token - format identifier object\n* @returns {Object} token object\n*/\nfunction initialize( token ) {\n\tvar out = {};\n\tout.specifier = token.specifier;\n\tout.precision = ( token.precision === void 0 ) ? 1 : token.precision;\n\tout.width = token.width;\n\tout.flags = token.flags || '';\n\tout.mapping = token.mapping;\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Generates string from a token array by interpolating values.\n*\n* @param {Array} tokens - string parts and format identifier objects\n* @param {Array} ...args - variable values\n* @throws {TypeError} first argument must be an array\n* @throws {Error} invalid flags\n* @returns {string} formatted string\n*\n* @example\n* var tokens = [ 'beep ', { 'specifier': 's' } ];\n* var out = formatInterpolate( tokens, 'boop' );\n* // returns 'beep boop'\n*/\nfunction formatInterpolate( tokens ) {\n\tvar hasPeriod;\n\tvar flags;\n\tvar token;\n\tvar flag;\n\tvar num;\n\tvar out;\n\tvar pos;\n\tvar i;\n\tvar j;\n\n\tif ( !isArray( tokens ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an array. Value: `' + tokens + '`.' );\n\t}\n\tout = '';\n\tpos = 1;\n\tfor ( i = 0; i < tokens.length; i++ ) {\n\t\ttoken = tokens[ i ];\n\t\tif ( isString( token ) ) {\n\t\t\tout += token;\n\t\t} else {\n\t\t\thasPeriod = token.precision !== void 0;\n\t\t\ttoken = initialize( token );\n\t\t\tif ( !token.specifier ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. Token is missing `specifier` property. Index: `'+ i +'`. Value: `' + token + '`.' );\n\t\t\t}\n\t\t\tif ( token.mapping ) {\n\t\t\t\tpos = token.mapping;\n\t\t\t}\n\t\t\tflags = token.flags;\n\t\t\tfor ( j = 0; j < flags.length; j++ ) {\n\t\t\t\tflag = flags.charAt( j );\n\t\t\t\tswitch ( flag ) {\n\t\t\t\tcase ' ':\n\t\t\t\t\ttoken.sign = ' ';\n\t\t\t\t\tbreak;\n\t\t\t\tcase '+':\n\t\t\t\t\ttoken.sign = '+';\n\t\t\t\t\tbreak;\n\t\t\t\tcase '-':\n\t\t\t\t\ttoken.padRight = true;\n\t\t\t\t\ttoken.padZeros = false;\n\t\t\t\t\tbreak;\n\t\t\t\tcase '0':\n\t\t\t\t\ttoken.padZeros = flags.indexOf( '-' ) < 0; // NOTE: We use built-in `Array.prototype.indexOf` here instead of `@stdlib/assert/contains` in order to avoid circular dependencies.\n\t\t\t\t\tbreak;\n\t\t\t\tcase '#':\n\t\t\t\t\ttoken.alternate = true;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error( 'invalid flag: ' + flag );\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( token.width === '*' ) {\n\t\t\t\ttoken.width = parseInt( arguments[ pos ], 10 );\n\t\t\t\tpos += 1;\n\t\t\t\tif ( isnan( token.width ) ) {\n\t\t\t\t\tthrow new TypeError( 'the argument for * width at position ' + pos + ' is not a number. Value: `' + token.width + '`.' );\n\t\t\t\t}\n\t\t\t\tif ( token.width < 0 ) {\n\t\t\t\t\ttoken.padRight = true;\n\t\t\t\t\ttoken.width = -token.width;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( hasPeriod ) {\n\t\t\t\tif ( token.precision === '*' ) {\n\t\t\t\t\ttoken.precision = parseInt( arguments[ pos ], 10 );\n\t\t\t\t\tpos += 1;\n\t\t\t\t\tif ( isnan( token.precision ) ) {\n\t\t\t\t\t\tthrow new TypeError( 'the argument for * precision at position ' + pos + ' is not a number. Value: `' + token.precision + '`.' );\n\t\t\t\t\t}\n\t\t\t\t\tif ( token.precision < 0 ) {\n\t\t\t\t\t\ttoken.precision = 1;\n\t\t\t\t\t\thasPeriod = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\ttoken.arg = arguments[ pos ];\n\t\t\tswitch ( token.specifier ) {\n\t\t\tcase 'b':\n\t\t\tcase 'o':\n\t\t\tcase 'x':\n\t\t\tcase 'X':\n\t\t\tcase 'd':\n\t\t\tcase 'i':\n\t\t\tcase 'u':\n\t\t\t\t// Case: %b (binary), %o (octal), %x, %X (hexadecimal), %d, %i (decimal), %u (unsigned decimal)\n\t\t\t\tif ( hasPeriod ) {\n\t\t\t\t\ttoken.padZeros = false;\n\t\t\t\t}\n\t\t\t\ttoken.arg = formatInteger( token );\n\t\t\t\tbreak;\n\t\t\tcase 's':\n\t\t\t\t// Case: %s (string)\n\t\t\t\ttoken.maxWidth = ( hasPeriod ) ? token.precision : -1;\n\t\t\t\tbreak;\n\t\t\tcase 'c':\n\t\t\t\t// Case: %c (character)\n\t\t\t\tif ( !isnan( token.arg ) ) {\n\t\t\t\t\tnum = parseInt( token.arg, 10 );\n\t\t\t\t\tif ( num < 0 || num > 127 ) {\n\t\t\t\t\t\tthrow new Error( 'invalid character code. Value: ' + token.arg );\n\t\t\t\t\t}\n\t\t\t\t\ttoken.arg = ( isnan( num ) ) ?\n\t\t\t\t\t\tString( token.arg ) :\n\t\t\t\t\t\tfromCharCode( num );\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'e':\n\t\t\tcase 'E':\n\t\t\tcase 'f':\n\t\t\tcase 'F':\n\t\t\tcase 'g':\n\t\t\tcase 'G':\n\t\t\t\t// Case: %e, %E (scientific notation), %f, %F (decimal floating point), %g, %G (uses the shorter of %e/E or %f/F)\n\t\t\t\tif ( !hasPeriod ) {\n\t\t\t\t\ttoken.precision = 6;\n\t\t\t\t}\n\t\t\t\ttoken.arg = formatDouble( token );\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'invalid specifier: ' + token.specifier );\n\t\t\t}\n\t\t\t// Fit argument into field width...\n\t\t\tif ( token.maxWidth >= 0 && token.arg.length > token.maxWidth ) {\n\t\t\t\ttoken.arg = token.arg.substring( 0, token.maxWidth );\n\t\t\t}\n\t\t\tif ( token.padZeros ) {\n\t\t\t\ttoken.arg = zeroPad( token.arg, token.width || token.precision, token.padRight ); // eslint-disable-line max-len\n\t\t\t} else if ( token.width ) {\n\t\t\t\ttoken.arg = spacePad( token.arg, token.width, token.padRight );\n\t\t\t}\n\t\t\tout += token.arg || '';\n\t\t\tpos += 1;\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default formatInterpolate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar RE = /%(?:([1-9]\\d*)\\$)?([0 +\\-#]*)(\\*|\\d+)?(?:(\\.)(\\*|\\d+)?)?[hlL]?([%A-Za-z])/g;\n\n\n// FUNCTIONS //\n\n/**\n* Parses a delimiter.\n*\n* @private\n* @param {Array} match - regular expression match\n* @returns {Object} delimiter token object\n*/\nfunction parse( match ) {\n\tvar token = {\n\t\t'mapping': ( match[ 1 ] ) ? parseInt( match[ 1 ], 10 ) : void 0,\n\t\t'flags': match[ 2 ],\n\t\t'width': match[ 3 ],\n\t\t'precision': match[ 5 ],\n\t\t'specifier': match[ 6 ]\n\t};\n\tif ( match[ 4 ] === '.' && match[ 5 ] === void 0 ) {\n\t\ttoken.precision = '1';\n\t}\n\treturn token;\n}\n\n\n// MAIN //\n\n/**\n* Tokenizes a string into an array of string parts and format identifier objects.\n*\n* @param {string} str - input string\n* @returns {Array} tokens\n*\n* @example\n* var tokens = formatTokenize( 'Hello %s!' );\n* // returns [ 'Hello ', {...}, '!' ]\n*/\nfunction formatTokenize( str ) {\n\tvar content;\n\tvar tokens;\n\tvar match;\n\tvar prev;\n\n\ttokens = [];\n\tprev = 0;\n\tmatch = RE.exec( str );\n\twhile ( match ) {\n\t\tcontent = str.slice( prev, RE.lastIndex - match[ 0 ].length );\n\t\tif ( content.length ) {\n\t\t\ttokens.push( content );\n\t\t}\n\t\ttokens.push( parse( match ) );\n\t\tprev = RE.lastIndex;\n\t\tmatch = RE.exec( str );\n\t}\n\tcontent = str.slice( prev );\n\tif ( content.length ) {\n\t\ttokens.push( content );\n\t}\n\treturn tokens;\n}\n\n\n// EXPORTS //\n\nexport default formatTokenize;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is a string primitive.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a string primitive\n*\n* @example\n* var bool = isString( 'beep' );\n* // returns true\n*\n* @example\n* var bool = isString( new String( 'beep' ) );\n* // returns false\n*/\nfunction isString( value ) {\n\treturn ( typeof value === 'string' ); // NOTE: we inline the `isString.isPrimitive` function from `@stdlib/assert/is-string` in order to avoid circular dependencies.\n}\n\n\n// EXPORTS //\n\nexport default isString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport interpolate from '@stdlib/string-base-format-interpolate';\nimport tokenize from '@stdlib/string-base-format-tokenize';\nimport isString from './is_string.js';\n\n\n// MAIN //\n\n/**\n* Inserts supplied variable values into a format string.\n*\n* @param {string} str - input string\n* @param {Array} ...args - variable values\n* @throws {TypeError} first argument must be a string\n* @throws {Error} invalid flags\n* @returns {string} formatted string\n*\n* @example\n* var str = format( 'Hello %s!', 'world' );\n* // returns 'Hello world!'\n*\n* @example\n* var str = format( 'Pi: ~%.2f', 3.141592653589793 );\n* // returns 'Pi: ~3.14'\n*/\nfunction format( str ) {\n\tvar tokens;\n\tvar args;\n\tvar i;\n\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', str ) );\n\t}\n\ttokens = tokenize( str );\n\targs = new Array( arguments.length );\n\targs[ 0 ] = tokens;\n\tfor ( i = 1; i < args.length; i++ ) {\n\t\targs[ i ] = arguments[ i ];\n\t}\n\treturn interpolate.apply( null, args );\n}\n\n\n// EXPORTS //\n\nexport default format;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-underscore-dangle, no-proto */\n\n'use strict';\n\n// MODULES //\n\nimport format from '@stdlib/string-format';\n\n\n// VARIABLES //\n\nvar objectProtoype = Object.prototype;\nvar toStr = objectProtoype.toString;\nvar defineGetter = objectProtoype.__defineGetter__;\nvar defineSetter = objectProtoype.__defineSetter__;\nvar lookupGetter = objectProtoype.__lookupGetter__;\nvar lookupSetter = objectProtoype.__lookupSetter__;\n\n\n// MAIN //\n\n/**\n* Defines (or modifies) an object property.\n*\n* ## Notes\n*\n* -   Property descriptors come in two flavors: **data descriptors** and **accessor descriptors**. A data descriptor is a property that has a value, which may or may not be writable. An accessor descriptor is a property described by a getter-setter function pair. A descriptor must be one of these two flavors and cannot be both.\n*\n* @param {Object} obj - object on which to define the property\n* @param {string} prop - property name\n* @param {Object} descriptor - property descriptor\n* @param {boolean} [descriptor.configurable=false] - boolean indicating if property descriptor can be changed and if the property can be deleted from the provided object\n* @param {boolean} [descriptor.enumerable=false] - boolean indicating if the property shows up when enumerating object properties\n* @param {boolean} [descriptor.writable=false] - boolean indicating if the value associated with the property can be changed with an assignment operator\n* @param {*} [descriptor.value] - property value\n* @param {(Function|void)} [descriptor.get=undefined] - function which serves as a getter for the property, or, if no getter, undefined. When the property is accessed, a getter function is called without arguments and with the `this` context set to the object through which the property is accessed (which may not be the object on which the property is defined due to inheritance). The return value will be used as the property value.\n* @param {(Function|void)} [descriptor.set=undefined] - function which serves as a setter for the property, or, if no setter, undefined. When assigning a property value, a setter function is called with one argument (the value being assigned to the property) and with the `this` context set to the object through which the property is assigned.\n* @throws {TypeError} first argument must be an object\n* @throws {TypeError} third argument must be an object\n* @throws {Error} property descriptor cannot have both a value and a setter and/or getter\n* @returns {Object} object with added property\n*\n* @example\n* var obj = {};\n*\n* defineProperty( obj, 'foo', {\n*     'value': 'bar'\n* });\n*\n* var str = obj.foo;\n* // returns 'bar'\n*/\nfunction defineProperty( obj, prop, descriptor ) {\n\tvar prototype;\n\tvar hasValue;\n\tvar hasGet;\n\tvar hasSet;\n\n\tif ( typeof obj !== 'object' || obj === null || toStr.call( obj ) === '[object Array]' ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an object. Value: `%s`.', obj ) );\n\t}\n\tif ( typeof descriptor !== 'object' || descriptor === null || toStr.call( descriptor ) === '[object Array]' ) {\n\t\tthrow new TypeError( format( 'invalid argument. Property descriptor must be an object. Value: `%s`.', descriptor ) );\n\t}\n\thasValue = ( 'value' in descriptor );\n\tif ( hasValue ) {\n\t\tif (\n\t\t\tlookupGetter.call( obj, prop ) ||\n\t\t\tlookupSetter.call( obj, prop )\n\t\t) {\n\t\t\t// Override `__proto__` to avoid touching inherited accessors:\n\t\t\tprototype = obj.__proto__;\n\t\t\tobj.__proto__ = objectProtoype;\n\n\t\t\t// Delete property as existing getters/setters prevent assigning value to specified property:\n\t\t\tdelete obj[ prop ];\n\t\t\tobj[ prop ] = descriptor.value;\n\n\t\t\t// Restore original prototype:\n\t\t\tobj.__proto__ = prototype;\n\t\t} else {\n\t\t\tobj[ prop ] = descriptor.value;\n\t\t}\n\t}\n\thasGet = ( 'get' in descriptor );\n\thasSet = ( 'set' in descriptor );\n\n\tif ( hasValue && ( hasGet || hasSet ) ) {\n\t\tthrow new Error( 'invalid argument. Cannot specify one or more accessors and a value or writable attribute in the property descriptor.' );\n\t}\n\n\tif ( hasGet && defineGetter ) {\n\t\tdefineGetter.call( obj, prop, descriptor.get );\n\t}\n\tif ( hasSet && defineSetter ) {\n\t\tdefineSetter.call( obj, prop, descriptor.set );\n\t}\n\treturn obj;\n}\n\n\n// EXPORTS //\n\nexport default defineProperty;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Define (or modify) an object property.\n*\n* @module @stdlib/utils-define-property\n*\n* @example\n* import defineProperty from '@stdlib/utils-define-property';\n*\n* var obj = {};\n* defineProperty( obj, 'foo', {\n*     'value': 'bar',\n*     'writable': false,\n*     'configurable': false,\n*     'enumerable': false\n* });\n* obj.foo = 'boop'; // => throws\n*/\n\n// MODULES //\n\nimport hasDefinePropertySupport from './has_define_property_support.js';\nimport builtin from './builtin.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar defineProperty;\nif ( hasDefinePropertySupport() ) {\n\tdefineProperty = builtin;\n} else {\n\tdefineProperty = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default defineProperty;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from './define_property.js';\n\n\n// MAIN //\n\n/**\n* Tests for `Object.defineProperty` support.\n*\n* @private\n* @returns {boolean} boolean indicating if an environment has `Object.defineProperty` support\n*\n* @example\n* var bool = hasDefinePropertySupport();\n* // returns <boolean>\n*/\nfunction hasDefinePropertySupport() {\n\t// Test basic support...\n\ttry {\n\t\tdefineProperty( {}, 'x', {} );\n\t\treturn true;\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\treturn false;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default hasDefinePropertySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from '@stdlib/utils-define-property';\n\n\n// MAIN //\n\n/**\n* Defines a non-enumerable read-only property.\n*\n* @param {Object} obj - object on which to define the property\n* @param {(string|symbol)} prop - property name\n* @param {*} value - value to set\n*\n* @example\n* var obj = {};\n*\n* setNonEnumerableReadOnly( obj, 'foo', 'bar' );\n*\n* try {\n*     obj.foo = 'boop';\n* } catch ( err ) {\n*     console.error( err.message );\n* }\n*/\nfunction setNonEnumerableReadOnly( obj, prop, value ) {\n\tdefineProperty( obj, prop, {\n\t\t'configurable': false,\n\t\t'enumerable': false,\n\t\t'writable': false,\n\t\t'value': value\n\t});\n}\n\n\n// EXPORTS //\n\nexport default setNonEnumerableReadOnly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is a number primitive.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number primitive\n*\n* @example\n* var bool = isNumber( 3.14 );\n* // returns true\n*\n* @example\n* var bool = isNumber( NaN );\n* // returns true\n*\n* @example\n* var bool = isNumber( new Number( 3.14 ) );\n* // returns false\n*/\nfunction isNumber( value ) {\n\treturn ( typeof value === 'number' );\n}\n\n\n// EXPORTS //\n\nexport default isNumber;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasSymbols from '@stdlib/assert-has-symbol-support';\n\n\n// VARIABLES //\n\nvar FLG = hasSymbols();\n\n\n// MAIN //\n\n/**\n* Tests for native `toStringTag` support.\n*\n* @returns {boolean} boolean indicating if an environment has `toStringTag` support\n*\n* @example\n* var bool = hasToStringTagSupport();\n* // returns <boolean>\n*/\nfunction hasToStringTagSupport() {\n\treturn ( FLG && typeof Symbol.toStringTag === 'symbol' );\n}\n\n\n// EXPORTS //\n\nexport default hasToStringTagSupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Tests for native `Symbol` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Symbol` support\n*\n* @example\n* var bool = hasSymbolSupport();\n* // returns <boolean>\n*/\nfunction hasSymbolSupport() {\n\treturn (\n\t\ttypeof Symbol === 'function' &&\n\t\ttypeof Symbol( 'foo' ) === 'symbol'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default hasSymbolSupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar toStr = Object.prototype.toString;\n\n\n// EXPORTS //\n\nexport default toStr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// FUNCTIONS //\n\nvar has = Object.prototype.hasOwnProperty;\n\n\n// MAIN //\n\n/**\n* Tests if an object has a specified property.\n*\n* @param {*} value - value to test\n* @param {*} property - property to test\n* @returns {boolean} boolean indicating if an object has a specified property\n*\n* @example\n* var beep = {\n*     'boop': true\n* };\n*\n* var bool = hasOwnProp( beep, 'boop' );\n* // returns true\n*\n* @example\n* var beep = {\n*     'boop': true\n* };\n*\n* var bool = hasOwnProp( beep, 'bap' );\n* // returns false\n*/\nfunction hasOwnProp( value, property ) {\n\tif (\n\t\tvalue === void 0 ||\n\t\tvalue === null\n\t) {\n\t\treturn false;\n\t}\n\treturn has.call( value, property );\n}\n\n\n// EXPORTS //\n\nexport default hasOwnProp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar Sym = ( typeof Symbol === 'function' ) ? Symbol : void 0; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default Sym;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Symbol from '@stdlib/symbol-ctor';\n\n\n// MAIN //\n\nvar toStrTag = ( typeof Symbol === 'function' ) ? Symbol.toStringTag : '';\n\n\n// EXPORTS //\n\nexport default toStrTag;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a string value indicating a specification defined classification of an object.\n*\n* @module @stdlib/utils-native-class\n*\n* @example\n* import nativeClass from '@stdlib/utils-native-class';\n*\n* var str = nativeClass( 'a' );\n* // returns '[object String]'\n*\n* str = nativeClass( 5 );\n* // returns '[object Number]'\n*\n* function Beep() {\n*     return this;\n* }\n* str = nativeClass( new Beep() );\n* // returns '[object Object]'\n*/\n\n// MODULES //\n\nimport hasToStringTag from '@stdlib/assert-has-tostringtag-support';\nimport builtin from './main.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar main;\nif ( hasToStringTag() ) {\n\tmain = polyfill;\n} else {\n\tmain = builtin;\n}\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport toStringTag from './tostringtag.js';\nimport toStr from './tostring.js';\n\n\n// MAIN //\n\n/**\n* Returns a string value indicating a specification defined classification of an object in environments supporting `Symbol.toStringTag`.\n*\n* @param {*} v - input value\n* @returns {string} string value indicating a specification defined classification of the input value\n*\n* @example\n* var str = nativeClass( 'a' );\n* // returns '[object String]'\n*\n* @example\n* var str = nativeClass( 5 );\n* // returns '[object Number]'\n*\n* @example\n* function Beep() {\n*     return this;\n* }\n* var str = nativeClass( new Beep() );\n* // returns '[object Object]'\n*/\nfunction nativeClass( v ) {\n\tvar isOwn;\n\tvar tag;\n\tvar out;\n\n\tif ( v === null || v === void 0 ) {\n\t\treturn toStr.call( v );\n\t}\n\ttag = v[ toStringTag ];\n\tisOwn = hasOwnProp( v, toStringTag );\n\n\t// Attempt to override the `toStringTag` property. For built-ins having a `Symbol.toStringTag` property (e.g., `JSON`, `Math`, etc), the `Symbol.toStringTag` property is read-only (e.g., , so we need to wrap in a `try/catch`.\n\ttry {\n\t\tv[ toStringTag ] = void 0;\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\treturn toStr.call( v );\n\t}\n\tout = toStr.call( v );\n\n\tif ( isOwn ) {\n\t\tv[ toStringTag ] = tag;\n\t} else {\n\t\tdelete v[ toStringTag ];\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default nativeClass;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport toStr from './tostring.js';\n\n\n// MAIN //\n\n/**\n* Returns a string value indicating a specification defined classification (via the internal property `[[Class]]`) of an object.\n*\n* @param {*} v - input value\n* @returns {string} string value indicating a specification defined classification of the input value\n*\n* @example\n* var str = nativeClass( 'a' );\n* // returns '[object String]'\n*\n* @example\n* var str = nativeClass( 5 );\n* // returns '[object Number]'\n*\n* @example\n* function Beep() {\n*     return this;\n* }\n* var str = nativeClass( new Beep() );\n* // returns '[object Object]'\n*/\nfunction nativeClass( v ) {\n\treturn toStr.call( v );\n}\n\n\n// EXPORTS //\n\nexport default nativeClass;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// EXPORTS //\n\nexport default Number; // eslint-disable-line stdlib/require-globals\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Number from '@stdlib/number-ctor';\n\n\n// MAIN //\n\n// eslint-disable-next-line stdlib/no-redeclare\nvar toString = Number.prototype.toString; // non-generic\n\n\n// EXPORTS //\n\nexport default toString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasToStringTag from '@stdlib/assert-has-tostringtag-support';\nimport nativeClass from '@stdlib/utils-native-class';\nimport Number from '@stdlib/number-ctor';\nimport test from './try2serialize.js';\n\n\n// VARIABLES //\n\nvar FLG = hasToStringTag();\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number object.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number object\n*\n* @example\n* var bool = isNumber( 3.14 );\n* // returns false\n*\n* @example\n* var bool = isNumber( new Number( 3.14 ) );\n* // returns true\n*/\nfunction isNumber( value ) {\n\tif ( typeof value === 'object' ) {\n\t\tif ( value instanceof Number ) {\n\t\t\treturn true;\n\t\t}\n\t\tif ( FLG ) {\n\t\t\treturn test( value );\n\t\t}\n\t\treturn ( nativeClass( value ) === '[object Number]' );\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default isNumber;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport toString from './tostring.js'; // eslint-disable-line stdlib/no-redeclare\n\n\n// MAIN //\n\n/**\n* Attempts to serialize a value to a string.\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value can be serialized\n*/\nfunction test( value ) {\n\ttry {\n\t\ttoString.call( value );\n\t\treturn true;\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\treturn false;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default test;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a number\n*\n* @example\n* var bool = isNumber( 3.14 );\n* // returns true\n*\n* @example\n* var bool = isNumber( new Number( 3.14 ) );\n* // returns true\n*\n* @example\n* var bool = isNumber( NaN );\n* // returns true\n*\n* @example\n* var bool = isNumber( null );\n* // returns false\n*/\nfunction isNumber( value ) {\n\treturn ( isPrimitive( value ) || isObject( value ) );\n}\n\n\n// EXPORTS //\n\nexport default isNumber;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is a number.\n*\n* @module @stdlib/assert-is-number\n*\n* @example\n* import isNumber from '@stdlib/assert-is-number';\n*\n* var bool = isNumber( 3.14 );\n* // returns true\n*\n* bool = isNumber( new Number( 3.14 ) );\n* // returns true\n*\n* bool = isNumber( NaN );\n* // returns true\n*\n* bool = isNumber( null );\n* // returns false\n*\n* @example\n* import { isPrimitive as isNumber } from '@stdlib/assert-is-number';\n*\n* var bool = isNumber( 3.14 );\n* // returns true\n*\n* bool = isNumber( NaN );\n* // returns true\n*\n* bool = isNumber( new Number( 3.14 ) );\n* // returns false\n*\n* @example\n* import { isObject as isNumber } from '@stdlib/assert-is-number';\n*\n* var bool = isNumber( 3.14 );\n* // returns false\n*\n* bool = isNumber( new Number( 3.14 ) );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'isPrimitive', isPrimitive );\nsetReadOnly( main, 'isObject', isObject );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Double-precision floating-point positive infinity.\n*\n* @module @stdlib/constants-float64-pinf\n* @type {number}\n*\n* @example\n* import FLOAT64_PINF from '@stdlib/constants-float64-pinf';\n* // returns Infinity\n*/\n\n\n// MAIN //\n\n/**\n* Double-precision floating-point positive infinity.\n*\n* ## Notes\n*\n* Double-precision floating-point positive infinity has the bit sequence\n*\n* ```binarystring\n* 0 11111111111 00000000000000000000 00000000000000000000000000000000\n* ```\n*\n* @constant\n* @type {number}\n* @default Number.POSITIVE_INFINITY\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_PINF = Number.POSITIVE_INFINITY; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default FLOAT64_PINF;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Double-precision floating-point negative infinity.\n*\n* @module @stdlib/constants-float64-ninf\n* @type {number}\n*\n* @example\n* import FLOAT64_NINF from '@stdlib/constants-float64-ninf';\n* // returns -Infinity\n*/\n\n// MODULES //\n\nimport Number from '@stdlib/number-ctor';\n\n\n// MAIN //\n\n/**\n* Double-precision floating-point negative infinity.\n*\n* ## Notes\n*\n* Double-precision floating-point negative infinity has the bit sequence\n*\n* ```binarystring\n* 1 11111111111 00000000000000000000 00000000000000000000000000000000\n* ```\n*\n* @constant\n* @type {number}\n* @default Number.NEGATIVE_INFINITY\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_NINF = Number.NEGATIVE_INFINITY;\n\n\n// EXPORTS //\n\nexport default FLOAT64_NINF;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: implementation (?)\n\n/**\n* Rounds a double-precision floating-point number toward negative infinity.\n*\n* @param {number} x - input value\n* @returns {number} rounded value\n*\n* @example\n* var v = floor( -4.2 );\n* // returns -5.0\n*\n* @example\n* var v = floor( 9.99999 );\n* // returns 9.0\n*\n* @example\n* var v = floor( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = floor( NaN );\n* // returns NaN\n*/\nvar floor = Math.floor; // eslint-disable-line stdlib/no-builtin-math\n\n\n// EXPORTS //\n\nexport default floor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math-base-special-floor';\n\n\n// MAIN //\n\n/**\n* Tests if a finite double-precision floating-point number is an integer.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is an integer\n*\n* @example\n* var bool = isInteger( 1.0 );\n* // returns true\n*\n* @example\n* var bool = isInteger( 3.14 );\n* // returns false\n*/\nfunction isInteger( x ) {\n\treturn (floor(x) === x);\n}\n\n\n// EXPORTS //\n\nexport default isInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport isInt from '@stdlib/math-base-assert-is-integer';\n\n\n// MAIN //\n\n/**\n* Tests if a number primitive is an integer value.\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a number primitive is an integer value\n*/\nfunction isInteger( value ) {\n\treturn (\n\t\tvalue < PINF &&\n\t\tvalue > NINF &&\n\t\tisInt( value )\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport isInt from './integer.js';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number primitive having an integer value.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number primitive having an integer value\n*\n* @example\n* var bool = isInteger( -3.0 );\n* // returns true\n*\n* @example\n* var bool = isInteger( new Number( -3.0 ) );\n* // returns false\n*/\nfunction isInteger( value ) {\n\treturn (\n\t\tisNumber( value ) &&\n\t\tisInt( value )\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isObject as isNumber } from '@stdlib/assert-is-number';\nimport isInt from './integer.js';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number object having an integer value.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number object having an integer value\n*\n* @example\n* var bool = isInteger( 3.0 );\n* // returns false\n*\n* @example\n* var bool = isInteger( new Number( 3.0 ) );\n* // returns true\n*/\nfunction isInteger( value ) {\n\treturn (\n\t\tisNumber( value ) &&\n\t\tisInt( value.valueOf() )\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\n/**\n* Tests if a value is an integer.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is an integer\n*\n* @example\n* var bool = isInteger( 5.0 );\n* // returns true\n*\n* @example\n* var bool = isInteger( new Number( 5.0 ) );\n* // returns true\n*\n* @example\n* var bool = isInteger( -3.14 );\n* // returns false\n*\n* @example\n* var bool = isInteger( null );\n* // returns false\n*/\nfunction isInteger( value ) {\n\treturn ( isPrimitive( value ) || isObject( value ) );\n}\n\n\n// EXPORTS //\n\nexport default isInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isInteger } from '@stdlib/assert-is-integer';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number primitive having a nonnegative integer value.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number primitive having a nonnegative integer value\n*\n* @example\n* var bool = isNonNegativeInteger( 3.0 );\n* // returns true\n*\n* @example\n* var bool = isNonNegativeInteger( new Number( 3.0 ) );\n* // returns false\n*/\nfunction isNonNegativeInteger( value ) {\n\treturn (\n\t\tisInteger( value ) &&\n\t\tvalue >= 0\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isNonNegativeInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isObject as isInteger } from '@stdlib/assert-is-integer';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number object having a nonnegative integer value.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number object having a nonnegative integer value\n*\n* @example\n* var bool = isNonNegativeInteger( 3.0 );\n* // returns false\n*\n* @example\n* var bool = isNonNegativeInteger( new Number( 3.0 ) );\n* // returns true\n*/\nfunction isNonNegativeInteger( value ) {\n\treturn (\n\t\tisInteger( value ) &&\n\t\tvalue.valueOf() >= 0\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isNonNegativeInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a nonnegative integer.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a nonnegative integer\n*\n* @example\n* var bool = isNonNegativeInteger( 5.0 );\n* // returns true\n*\n* @example\n* var bool = isNonNegativeInteger( new Number( 5.0 ) );\n* // returns true\n*\n* @example\n* var bool = isNonNegativeInteger( -5.0 );\n* // returns false\n*\n* @example\n* var bool = isNonNegativeInteger( 3.14 );\n* // returns false\n*\n* @example\n* var bool = isNonNegativeInteger( null );\n* // returns false\n*/\nfunction isNonNegativeInteger( value ) {\n\treturn ( isPrimitive( value ) || isObject( value ) );\n}\n\n\n// EXPORTS //\n\nexport default isNonNegativeInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is an integer.\n*\n* @module @stdlib/assert-is-integer\n*\n* @example\n* import isInteger from '@stdlib/assert-is-integer';\n*\n* var bool = isInteger( 5.0 );\n* // returns true\n*\n* bool = isInteger( new Number( 5.0 ) );\n* // returns true\n*\n* bool = isInteger( -3.14 );\n* // returns false\n*\n* bool = isInteger( null );\n* // returns false\n*\n* @example\n* // Use interface to check for integer primitives...\n* import { isPrimitive as isInteger } from '@stdlib/assert-is-integer';\n*\n* var bool = isInteger( -3.0 );\n* // returns true\n*\n* bool = isInteger( new Number( -3.0 ) );\n* // returns false\n*\n* @example\n* // Use interface to check for integer objects...\n* import { isObject as isInteger } from '@stdlib/assert-is-integer';\n*\n* var bool = isInteger( 3.0 );\n* // returns false\n*\n* bool = isInteger( new Number( 3.0 ) );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'isPrimitive', isPrimitive );\nsetReadOnly( main, 'isObject', isObject );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is a nonnegative integer.\n*\n* @module @stdlib/assert-is-nonnegative-integer\n*\n* @example\n* import isNonNegativeInteger from '@stdlib/assert-is-nonnegative-integer';\n*\n* var bool = isNonNegativeInteger( 5.0 );\n* // returns true\n*\n* bool = isNonNegativeInteger( new Number( 5.0 ) );\n* // returns true\n*\n* bool = isNonNegativeInteger( -5.0 );\n* // returns false\n*\n* bool = isNonNegativeInteger( 3.14 );\n* // returns false\n*\n* bool = isNonNegativeInteger( null );\n* // returns false\n*\n* @example\n* import { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer';\n*\n* var bool = isNonNegativeInteger( 3.0 );\n* // returns true\n*\n* bool = isNonNegativeInteger( new Number( 3.0 ) );\n* // returns false\n*\n* @example\n* import { isObject as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer';\n*\n* var bool = isNonNegativeInteger( 3.0 );\n* // returns false\n*\n* bool = isNonNegativeInteger( new Number( 3.0 ) );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'isPrimitive', isPrimitive );\nsetReadOnly( main, 'isObject', isObject );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer';\nimport MAX from '@stdlib/constants-array-max-typed-array-length';\n\n\n// MAIN //\n\n/**\n* Tests if a value is typed-array-like.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is typed-array-like\n*\n* @example\n* var arr = {\n*\t'BYTES_PER_ELEMENT': 8,\n*\t'length': 10,\n*\t'byteOffset': 0,\n*\t'byteLength': 10\n* };\n* var val = isTypedArrayLike( arr );\n* // returns true\n*\n* @example\n* import Int8Array from '@stdlib/array-int8';\n*\n* var val = isTypedArrayLike( new Int8Array( 4 ) );\n* // returns true\n*\n* @example\n* var val = isTypedArrayLike( [] );\n* // returns false\n*\n* @example\n* var val = isTypedArrayLike( {} );\n* // returns false\n*\n* @example\n* var val = isTypedArrayLike( null );\n* // returns false\n*\n* @example\n* var val = isTypedArrayLike( 'beep' );\n* // returns false\n*/\nfunction isTypedArrayLike( value ) {\n\treturn (\n\t\tvalue !== null &&\n\t\ttypeof value === 'object' &&\n\t\tisNonNegativeInteger( value.length ) &&\n\t\tvalue.length <= MAX &&\n\t\ttypeof value.BYTES_PER_ELEMENT === 'number' &&\n\t\ttypeof value.byteOffset === 'number' &&\n\t\ttypeof value.byteLength === 'number'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isTypedArrayLike;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum length of a typed array.\n*\n* @module @stdlib/constants-array-max-typed-array-length\n*\n* @example\n* import MAX_TYPED_ARRAY_LENGTH from '@stdlib/constants-array-max-typed-array-length';\n* // returns 9007199254740991\n*/\n\n// MAIN //\n\n/**\n* Maximum length of a typed array.\n*\n* ```tex\n* 2^{53} - 1\n* ```\n*\n* @constant\n* @type {number}\n* @default 9007199254740991\n*/\nvar MAX_TYPED_ARRAY_LENGTH = 9007199254740991;\n\n\n// EXPORTS //\n\nexport default MAX_TYPED_ARRAY_LENGTH;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isArrayLike from '@stdlib/assert-is-array-like';\nimport format from '@stdlib/string-format';\n\n\n// MAIN //\n\n/**\n* Returns a function which tests if every element in an array-like object passes a test condition.\n*\n* @param {Function} predicate - function to apply\n* @throws {TypeError} must provide a function\n* @returns {Function} an array-like object function\n*\n* @example\n* import isOdd from '@stdlib/assert-is-odd';\n*\n* var arr1 = [ 1, 3, 5, 7 ];\n* var arr2 = [ 3, 5, 8 ];\n*\n* var validate = arraylikefcn( isOdd );\n*\n* var bool = validate( arr1 );\n* // returns true\n*\n* bool = validate( arr2 );\n* // returns false\n*/\nfunction arraylikefcn( predicate ) {\n\tif ( typeof predicate !== 'function' ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a function. Value: `%s`.', predicate ) );\n\t}\n\treturn every;\n\n\t/**\n\t* Tests if every element in an array-like object passes a test condition.\n\t*\n\t* @private\n\t* @param {*} value - value to test\n\t* @returns {boolean} boolean indicating whether a value is an array-like object for which all elements pass a test condition\n\t*/\n\tfunction every( value ) {\n\t\tvar len;\n\t\tvar i;\n\t\tif ( !isArrayLike( value ) ) {\n\t\t\treturn false;\n\t\t}\n\t\tlen = value.length;\n\t\tif ( len === 0 ) {\n\t\t\treturn false;\n\t\t}\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tif ( predicate( value[ i ] ) === false ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default arraylikefcn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nimport MAX_LENGTH from '@stdlib/constants-array-max-array-length';\n\n\n// MAIN //\n\n/**\n* Tests if a value is array-like.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is array-like\n*\n* @example\n* var bool = isArrayLike( [] );\n* // returns true\n*\n* @example\n* var bool = isArrayLike( {'length':10} );\n* // returns true\n*/\nfunction isArrayLike( value ) {\n\treturn (\n\t\tvalue !== void 0 &&\n\t\tvalue !== null &&\n\t\ttypeof value !== 'function' &&\n\t\ttypeof value.length === 'number' &&\n\t\tisInteger( value.length ) &&\n\t\tvalue.length >= 0 &&\n\t\tvalue.length <= MAX_LENGTH\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isArrayLike;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum length of a generic array.\n*\n* @module @stdlib/constants-array-max-array-length\n*\n* @example\n* import MAX_ARRAY_LENGTH from '@stdlib/constants-array-max-array-length';\n* // returns 4294967295\n*/\n\n// MAIN //\n\n/**\n* Maximum length of a generic array.\n*\n* ```tex\n* 2^{32} - 1\n* ```\n*\n* @constant\n* @type {uinteger32}\n* @default 4294967295\n*/\nvar MAX_ARRAY_LENGTH = 4294967295>>>0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default MAX_ARRAY_LENGTH;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is an array-like object of numbers.\n*\n* @module @stdlib/assert-is-number-array\n*\n* @example\n* import isNumberArray from '@stdlib/assert-is-number-array';\n*\n* var bool = isNumberArray( [ 1, 2, 3 ] );\n* // returns true\n*\n* bool = isNumberArray( [ '1', 2, 3 ] );\n* // returns false\n*\n* @example\n* import { primitives as isNumberArray } from '@stdlib/assert-is-number-array';\n*\n* var bool = isNumberArray( [ 1, 2, 3 ] );\n* // returns true\n*\n* bool = isNumberArray( [ 1, new Number( 2 ) ] );\n* // returns false\n*\n* @example\n* import { objects as isNumberArray } from '@stdlib/assert-is-number-array';\n*\n* var bool = isNumberArray( [ new Number( 1 ), new Number( 2 ) ] );\n* // returns true\n*\n* bool = isNumberArray( [ new Number( 1 ), 2 ] );\n* // returns false\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport arrayfun from '@stdlib/assert-tools-array-like-function';\nimport isNumber from '@stdlib/assert-is-number';\n\n\n// VARIABLES //\n\nvar isPrimitiveArray = arrayfun( isNumber.isPrimitive );\nvar isObjectArray = arrayfun( isNumber.isObject );\n\n\n// MAIN //\n\nvar isNumberArray = arrayfun( isNumber );\nsetReadOnly( isNumberArray, 'primitives', isPrimitiveArray );\nsetReadOnly( isNumberArray, 'objects', isObjectArray );\n\n\n// EXPORTS //\n\nexport default isNumberArray;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from '@stdlib/utils-define-property';\n\n\n// MAIN //\n\n/**\n* Defines a read-only property.\n*\n* @param {Object} obj - object on which to define the property\n* @param {(string|symbol)} prop - property name\n* @param {*} value - value to set\n*\n* @example\n* var obj = {};\n*\n* setReadOnly( obj, 'foo', 'bar' );\n*\n* try {\n*     obj.foo = 'boop';\n* } catch ( err ) {\n*     console.error( err.message );\n* }\n*/\nfunction setReadOnly( obj, prop, value ) {\n\tdefineProperty( obj, prop, {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'writable': false,\n\t\t'value': value\n\t});\n}\n\n\n// EXPORTS //\n\nexport default setReadOnly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\nvar RE = /./;\n\n\n// EXPORTS //\n\nexport default RE;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is a boolean primitive.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a boolean primitive\n*\n* @example\n* var bool = isBoolean( true );\n* // returns true\n*\n* @example\n* var bool = isBoolean( false );\n* // returns true\n*\n* @example\n* import Boolean from '@stdlib/boolean-ctor';\n*\n* var bool = isBoolean( new Boolean( true ) );\n* // returns false\n*/\nfunction isBoolean( value ) {\n\treturn ( typeof value === 'boolean' );\n}\n\n\n// EXPORTS //\n\nexport default isBoolean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns a boolean.\n*\n* @name Boolean\n* @constructor\n* @type {Function}\n* @param {*} value - input value\n* @returns {(boolean|Boolean)} boolean\n*\n* @example\n* var b = Boolean( null );\n* // returns false\n*\n* b = Boolean( [] );\n* // returns true\n*\n* b = Boolean( {} );\n* // returns true\n*\n* @example\n* var b = new Boolean( false );\n* // returns <Boolean>\n*/\nvar Bool = Boolean; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default Bool;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// eslint-disable-next-line stdlib/no-redeclare\nvar toString = Boolean.prototype.toString; // non-generic\n\n\n// EXPORTS //\n\nexport default toString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasToStringTag from '@stdlib/assert-has-tostringtag-support';\nimport nativeClass from '@stdlib/utils-native-class';\nimport Boolean from '@stdlib/boolean-ctor';\nimport test from './try2serialize.js';\n\n\n// VARIABLES //\n\nvar FLG = hasToStringTag();\n\n\n// MAIN //\n\n/**\n* Tests if a value is a boolean object.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a boolean object\n*\n* @example\n* var bool = isBoolean( true );\n* // returns false\n*\n* @example\n* import Boolean from '@stdlib/boolean-ctor';\n*\n* var bool = isBoolean( new Boolean( false ) );\n* // returns true\n*/\nfunction isBoolean( value ) {\n\tif ( typeof value === 'object' ) {\n\t\tif ( value instanceof Boolean ) {\n\t\t\treturn true;\n\t\t}\n\t\tif ( FLG ) {\n\t\t\treturn test( value );\n\t\t}\n\t\treturn ( nativeClass( value ) === '[object Boolean]' );\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default isBoolean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport toString from './tostring.js'; // eslint-disable-line stdlib/no-redeclare\n\n\n// MAIN //\n\n/**\n* Attempts to serialize a value to a string.\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value can be serialized\n*/\nfunction test( value ) {\n\ttry {\n\t\ttoString.call( value );\n\t\treturn true;\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\treturn false;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default test;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a boolean.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a boolean\n*\n* @example\n* var bool = isBoolean( false );\n* // returns true\n*\n* @example\n* var bool = isBoolean( true );\n* // returns true\n*\n* @example\n* import Boolean from '@stdlib/boolean-ctor';\n*\n* var bool = isBoolean( new Boolean( false ) );\n* // returns true\n*\n* @example\n* import Boolean from '@stdlib/boolean-ctor';\n*\n* var bool = isBoolean( new Boolean( true ) );\n* // returns true\n*/\nfunction isBoolean( value ) {\n\treturn ( isPrimitive( value ) || isObject( value ) );\n}\n\n\n// EXPORTS //\n\nexport default isBoolean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the global object using code generation.\n*\n* @private\n* @returns {Object} global object\n*/\nfunction getGlobal() {\n\treturn new Function( 'return this;' )(); // eslint-disable-line no-new-func, stdlib/require-globals\n}\n\n\n// EXPORTS //\n\nexport default getGlobal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is a boolean.\n*\n* @module @stdlib/assert-is-boolean\n*\n* @example\n* import Boolean from '@stdlib/boolean-ctor';\n* import isBoolean from '@stdlib/assert-is-boolean';\n*\n* var bool = isBoolean( false );\n* // returns true\n*\n* bool = isBoolean( new Boolean( false ) );\n* // returns true\n*\n* @example\n* import Boolean from '@stdlib/boolean-ctor';\n* import { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\n*\n* var bool = isBoolean( false );\n* // returns true\n*\n* bool = isBoolean( new Boolean( true ) );\n* // returns false\n*\n* @example\n* import Boolean from '@stdlib/boolean-ctor';\n* import { isObject as isBoolean } from '@stdlib/assert-is-boolean';\n*\n* var bool = isBoolean( true );\n* // returns false\n*\n* bool = isBoolean( new Boolean( false ) );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'isPrimitive', isPrimitive );\nsetReadOnly( main, 'isObject', isObject );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar obj = ( typeof self === 'object' ) ? self : null;\n\n\n// EXPORTS //\n\nexport default obj;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar obj = ( typeof window === 'object' ) ? window : null;\n\n\n// EXPORTS //\n\nexport default obj;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar obj = ( typeof global === 'object' ) ? global : null;\n\n\n// EXPORTS //\n\nexport default obj;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar obj = ( typeof globalThis === 'object' ) ? globalThis : null; // eslint-disable-line no-undef\n\n\n// EXPORTS //\n\nexport default obj;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport getGlobal from '@stdlib/utils-global';\n\n\n// MAIN //\n\nvar root = getGlobal();\nvar nodeList = root.document && root.document.childNodes;\n\n\n// EXPORTS //\n\nexport default nodeList;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport format from '@stdlib/string-format';\nimport getThis from './codegen.js';\nimport Self from './self.js';\nimport Win from './window.js';\nimport Global from './global.js';\nimport GlobalThis from './global_this.js';\n\n\n// MAIN //\n\n/**\n* Returns the global object.\n*\n* ## Notes\n*\n* -   Using code generation is the **most** reliable way to resolve the global object; however, doing so is likely to violate content security policies (CSPs) in, e.g., Chrome Apps and elsewhere.\n*\n* @param {boolean} [codegen=false] - boolean indicating whether to use code generation to resolve the global object\n* @throws {TypeError} must provide a boolean\n* @throws {Error} unable to resolve global object\n* @returns {Object} global object\n*\n* @example\n* var g = getGlobal();\n* // returns {...}\n*/\nfunction getGlobal( codegen ) {\n\tif ( arguments.length ) {\n\t\tif ( !isBoolean( codegen ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a boolean. Value: `%s`.', codegen ) );\n\t\t}\n\t\tif ( codegen ) {\n\t\t\treturn getThis();\n\t\t}\n\t\t// Fall through...\n\t}\n\t// Case: 2020 revision of ECMAScript standard\n\tif ( GlobalThis ) {\n\t\treturn GlobalThis;\n\t}\n\t// Case: browsers and web workers\n\tif ( Self ) {\n\t\treturn Self;\n\t}\n\t// Case: browsers\n\tif ( Win ) {\n\t\treturn Win;\n\t}\n\t// Case: Node.js\n\tif ( Global ) {\n\t\treturn Global;\n\t}\n\t// Case: unknown\n\tthrow new Error( 'unexpected error. Unable to resolve global object.' );\n}\n\n\n// EXPORTS //\n\nexport default getGlobal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\nvar typedarray = Int8Array; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default typedarray;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns a regular expression to capture everything that is not a space immediately after the `function` keyword and before the first left parenthesis.\n*\n* @returns {RegExp} regular expression\n*\n* @example\n* var RE_FUNCTION_NAME = reFunctionName();\n*\n* function fname( fcn ) {\n*     return RE_FUNCTION_NAME.exec( fcn.toString() )[ 1 ];\n* }\n*\n* var fn = fname( Math.sqrt );\n* // returns 'sqrt'\n*\n* fn = fname( Int8Array );\n* // returns 'Int8Array'\n*\n* fn = fname( Object.prototype.toString );\n* // returns 'toString'\n*\n* fn = fname( function(){} );\n* // returns ''\n*/\nfunction reFunctionName() {\n\treturn /^\\s*function\\s*([^(]*)/i;\n}\n\n\n// EXPORTS //\n\nexport default reFunctionName;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport reFunctionName from './main.js';\n\n\n// MAIN //\n\n/**\n* Captures everything that is not a space immediately after the `function` keyword and before the first left parenthesis.\n*\n* Regular expression: `/^\\s*function\\s*([^(]*)/i`\n*\n* -   `/^\\s*`\n*     -   Match zero or more spaces at beginning\n*\n* -   `function`\n*     -   Match the word `function`\n*\n* -   `\\s*`\n*     -   Match zero or more spaces after the word `function`\n*\n* -   `()`\n*     -   Capture\n*\n* -   `[^(]*`\n*     -   Match anything except a left parenthesis `(` zero or more times\n*\n* -   `/i`\n*     -   ignore case\n*\n* @constant\n* @type {RegExp}\n* @default /^\\s*function\\s*([^(]*)/i\n*/\nvar RE_FUNCTION_NAME = reFunctionName();\n\n\n// EXPORTS //\n\nexport default RE_FUNCTION_NAME;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Regular expression to capture everything that is not a space immediately after the `function` keyword and before the first left parenthesis.\n*\n* @module @stdlib/regexp-function-name\n*\n* @example\n* import reFunctionName from '@stdlib/regexp-function-name';\n* var RE_FUNCTION_NAME = reFunctionName();\n*\n* function fname( fcn ) {\n*     return RE_FUNCTION_NAME.exec( fcn.toString() )[ 1 ];\n* }\n*\n* var fn = fname( Math.sqrt );\n* // returns 'sqrt'\n*\n* fn = fname( Int8Array );\n* // returns 'Int8Array'\n*\n* fn = fname( Object.prototype.toString );\n* // returns 'toString'\n*\n* fn = fname( function(){} );\n* // returns ''\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport REGEXP from './regexp.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'REGEXP', REGEXP );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nativeClass from '@stdlib/utils-native-class';\n\n\n// VARIABLES //\n\nvar f;\n\n\n// FUNCTIONS //\n\n/**\n* Tests if a value is an array.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is an array\n*\n* @example\n* var bool = isArray( [] );\n* // returns true\n*\n* @example\n* var bool = isArray( {} );\n* // returns false\n*/\nfunction isArray( value ) {\n\treturn ( nativeClass( value ) === '[object Array]' );\n}\n\n\n// MAIN //\n\nif ( Array.isArray ) {\n\tf = Array.isArray;\n} else {\n\tf = isArray;\n}\n\n\n// EXPORTS //\n\nexport default f;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is object-like.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether a value is object-like\n*\n* @example\n* var bool = isObjectLike( {} );\n* // returns true\n*\n* @example\n* var bool = isObjectLike( [] );\n* // returns true\n*\n* @example\n* var bool = isObjectLike( null );\n* // returns false\n*/\nfunction isObjectLike( value ) {\n\treturn (\n\t\tvalue !== null &&\n\t\ttypeof value === 'object'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isObjectLike;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nativeClass from '@stdlib/utils-native-class';\nimport { REGEXP as RE } from '@stdlib/regexp-function-name';\nimport isBuffer from '@stdlib/assert-is-buffer';\n\n\n// MAIN //\n\n/**\n* Determines the name of a value's constructor.\n*\n* @param {*} v - input value\n* @returns {string} name of a value's constructor\n*\n* @example\n* var v = constructorName( 'a' );\n* // returns 'String'\n*\n* @example\n* var v = constructorName( 5 );\n* // returns 'Number'\n*\n* @example\n* var v = constructorName( null );\n* // returns 'Null'\n*\n* @example\n* var v = constructorName( undefined );\n* // returns 'Undefined'\n*\n* @example\n* var v = constructorName( function noop() {} );\n* // returns 'Function'\n*/\nfunction constructorName( v ) {\n\tvar match;\n\tvar name;\n\tvar ctor;\n\tname = nativeClass( v ).slice( 8, -1 );\n\tif ( (name === 'Object' || name === 'Error') && v.constructor ) {\n\t\tctor = v.constructor;\n\t\tif ( typeof ctor.name === 'string' ) {\n\t\t\treturn ctor.name;\n\t\t}\n\t\tmatch = RE.exec( ctor.toString() );\n\t\tif ( match ) {\n\t\t\treturn match[ 1 ];\n\t\t}\n\t}\n\tif ( isBuffer( v ) ) {\n\t\treturn 'Buffer';\n\t}\n\treturn name;\n}\n\n\n// EXPORTS //\n\nexport default constructorName;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObjectLike from '@stdlib/assert-is-object-like';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a Buffer instance.\n*\n* @param {*} value - value to validate\n* @returns {boolean} boolean indicating if a value is a Buffer instance\n*\n* @example\n* var v = isBuffer( new Buffer( 'beep' ) );\n* // returns true\n*\n* @example\n* var v = isBuffer( new Buffer( [1,2,3,4] ) );\n* // returns true\n*\n* @example\n* var v = isBuffer( {} );\n* // returns false\n*\n* @example\n* var v = isBuffer( [] );\n* // returns false\n*/\nfunction isBuffer( value ) {\n\treturn (\n\t\tisObjectLike( value ) &&\n\t\t(\n\t\t\t// eslint-disable-next-line no-underscore-dangle\n\t\t\tvalue._isBuffer || // for envs missing Object.prototype.constructor (e.g., Safari 5-7)\n\t\t\t(\n\t\t\t\tvalue.constructor &&\n\n\t\t\t\t// WARNING: `typeof` is not a foolproof check, as certain envs consider RegExp and NodeList instances to be functions\n\t\t\t\ttypeof value.constructor.isBuffer === 'function' &&\n\t\t\t\tvalue.constructor.isBuffer( value )\n\t\t\t)\n\t\t)\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isBuffer;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is object-like.\n*\n* @module @stdlib/assert-is-object-like\n*\n* @example\n* import isObjectLike from '@stdlib/assert-is-object-like';\n*\n* var bool = isObjectLike( {} );\n* // returns true\n*\n* bool = isObjectLike( [] );\n* // returns true\n*\n* bool = isObjectLike( null );\n* // returns false\n*\n* @example\n* import { isObjectLikeArray as isObjectLike } from '@stdlib/assert-is-object-like';\n*\n* var bool = isObjectLike( [ {}, [] ] );\n* // returns true\n*\n* bool = isObjectLike( [ {}, '3.0' ] );\n* // returns false\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport arrayfun from '@stdlib/assert-tools-array-function';\nimport main from './main.js';\n\n\n// VARIABLES //\n\nvar isObjectLikeArray = arrayfun( main );\n\n\n// MAIN //\n\nsetReadOnly( main, 'isObjectLikeArray', isObjectLikeArray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isArray from '@stdlib/assert-is-array';\nimport format from '@stdlib/string-format';\n\n\n// MAIN //\n\n/**\n* Returns a function which tests if every element in an array passes a test condition.\n*\n* @param {Function} predicate - function to apply\n* @throws {TypeError} must provide a function\n* @returns {Function} an array function\n*\n* @example\n* import isOdd from '@stdlib/assert-is-odd';\n*\n* var arr1 = [ 1, 3, 5, 7 ];\n* var arr2 = [ 3, 5, 8 ];\n*\n* var validate = arrayfcn( isOdd );\n*\n* var bool = validate( arr1 );\n* // returns true\n*\n* bool = validate( arr2 );\n* // returns false\n*/\nfunction arrayfcn( predicate ) {\n\tif ( typeof predicate !== 'function' ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a function. Value: `%s`.', predicate ) );\n\t}\n\treturn every;\n\n\t/**\n\t* Tests if every element in an array passes a test condition.\n\t*\n\t* @private\n\t* @param {*} value - value to test\n\t* @returns {boolean} boolean indicating whether a value is an array for which all elements pass a test condition\n\t*/\n\tfunction every( value ) {\n\t\tvar len;\n\t\tvar i;\n\t\tif ( !isArray( value ) ) {\n\t\t\treturn false;\n\t\t}\n\t\tlen = value.length;\n\t\tif ( len === 0 ) {\n\t\t\treturn false;\n\t\t}\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tif ( predicate( value[ i ] ) === false ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default arrayfcn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Determine a value's type.\n*\n* @module @stdlib/utils-type-of\n*\n* @example\n* import typeOf from '@stdlib/utils-type-of';\n*\n* var str = typeOf( 'a' );\n* // returns 'string'\n*\n* str = typeOf( 5 );\n* // returns 'number'\n*/\n\n// MODULES //\n\nimport usePolyfill from './check.js';\nimport builtin from './main.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar main = ( usePolyfill() ) ? polyfill : builtin;\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport RE from './fixtures/re.js';\nimport nodeList from './fixtures/nodelist.js';\nimport typedarray from './fixtures/typedarray.js';\n\n\n// MAIN //\n\n/**\n* Checks whether a polyfill is needed when using the `typeof` operator.\n*\n* @private\n* @returns {boolean} boolean indicating whether a polyfill is needed\n*/\nfunction check() {\n\tif (\n\t\t// Chrome 1-12 returns 'function' for regular expression instances (see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof):\n\t\ttypeof RE === 'function' ||\n\n\t\t// Safari 8 returns 'object' for typed array and weak map constructors (underscore #1929):\n\t\ttypeof typedarray === 'object' ||\n\n\t\t// PhantomJS 1.9 returns 'function' for `NodeList` instances (underscore #2236):\n\t\ttypeof nodeList === 'function'\n\t) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default check;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ctorName from '@stdlib/utils-constructor-name';\n\n\n// MAIN //\n\n/**\n* Determines a value's type.\n*\n* @param {*} v - input value\n* @returns {string} string indicating the value's type\n*/\nfunction typeOf( v ) {\n\treturn ctorName( v ).toLowerCase();\n}\n\n\n// EXPORTS //\n\nexport default typeOf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ctorName from '@stdlib/utils-constructor-name';\n\n\n// NOTES //\n\n/*\n* Built-in `typeof` operator behavior:\n*\n* ```text\n* typeof null => 'object'\n* typeof undefined => 'undefined'\n* typeof 'a' => 'string'\n* typeof 5 => 'number'\n* typeof NaN => 'number'\n* typeof true => 'boolean'\n* typeof false => 'boolean'\n* typeof {} => 'object'\n* typeof [] => 'object'\n* typeof function foo(){} => 'function'\n* typeof function* foo(){} => 'object'\n* typeof Symbol() => 'symbol'\n* ```\n*\n*/\n\n\n// MAIN //\n\n/**\n* Determines a value's type.\n*\n* @param {*} v - input value\n* @returns {string} string indicating the value's type\n*/\nfunction typeOf( v ) {\n\tvar type;\n\n\t// Address `typeof null` => `object` (see http://wiki.ecmascript.org/doku.php?id=harmony:typeof_null):\n\tif ( v === null ) {\n\t\treturn 'null';\n\t}\n\ttype = typeof v;\n\n\t// If the `typeof` operator returned something other than `object`, we are done. Otherwise, we need to check for an internal class name or search for a constructor.\n\tif ( type === 'object' ) {\n\t\treturn ctorName( v ).toLowerCase();\n\t}\n\treturn type;\n}\n\n\n// EXPORTS //\n\nexport default typeOf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport typeOf from '@stdlib/utils-type-of';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a function.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a function\n*\n* @example\n* function beep() {\n*     return 'beep';\n* }\n*\n* var bool = isFunction( beep );\n* // returns true\n*/\nfunction isFunction( value ) {\n\t// Note: cannot use `typeof` directly, as various browser engines incorrectly return `'function'` when operating on non-function objects, such as regular expressions and NodeLists.\n\treturn ( typeOf( value ) === 'function' );\n}\n\n\n// EXPORTS //\n\nexport default isFunction;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is a string primitive.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a string primitive\n*\n* @example\n* var bool = isString( 'beep' );\n* // returns true\n*\n* @example\n* var bool = isString( new String( 'beep' ) );\n* // returns false\n*/\nfunction isString( value ) {\n\treturn ( typeof value === 'string' );\n}\n\n\n// EXPORTS //\n\nexport default isString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// eslint-disable-next-line stdlib/no-redeclare\nvar valueOf = String.prototype.valueOf; // non-generic\n\n\n// EXPORTS //\n\nexport default valueOf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasToStringTag from '@stdlib/assert-has-tostringtag-support';\nimport nativeClass from '@stdlib/utils-native-class';\nimport test from './try2valueof.js';\n\n\n// VARIABLES //\n\nvar FLG = hasToStringTag();\n\n\n// MAIN //\n\n/**\n* Tests if a value is a string object.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a string object\n*\n* @example\n* var bool = isString( new String( 'beep' ) );\n* // returns true\n*\n* @example\n* var bool = isString( 'beep' );\n* // returns false\n*/\nfunction isString( value ) {\n\tif ( typeof value === 'object' ) {\n\t\tif ( value instanceof String ) {\n\t\t\treturn true;\n\t\t}\n\t\tif ( FLG ) {\n\t\t\treturn test( value );\n\t\t}\n\t\treturn ( nativeClass( value ) === '[object String]' );\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default isString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport valueOf from './valueof.js'; // eslint-disable-line stdlib/no-redeclare\n\n\n// MAIN //\n\n/**\n* Attempts to extract a string value.\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a string can be extracted\n*/\nfunction test( value ) {\n\ttry {\n\t\tvalueOf.call( value );\n\t\treturn true;\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\treturn false;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default test;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a string.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a string\n*\n* @example\n* var bool = isString( new String( 'beep' ) );\n* // returns true\n*\n* @example\n* var bool = isString( 'beep' );\n* // returns true\n*/\nfunction isString( value ) {\n\treturn ( isPrimitive( value ) || isObject( value ) );\n}\n\n\n// EXPORTS //\n\nexport default isString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Tests if a double-precision floating-point numeric value is `NaN`.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is `NaN`\n*\n* @example\n* var bool = isnan( NaN );\n* // returns true\n*\n* @example\n* var bool = isnan( 7.0 );\n* // returns false\n*/\nfunction isnan( x ) {\n\treturn ( x !== x );\n}\n\n\n// EXPORTS //\n\nexport default isnan;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport isNan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a `NaN` number primitive.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a `NaN` number primitive\n*\n* @example\n* var bool = isnan( NaN );\n* // returns true\n*\n* @example\n* var bool = isnan( 3.14 );\n* // returns false\n*\n* @example\n* var bool = isnan( new Number( NaN ) );\n* // returns false\n*/\nfunction isnan( value ) {\n\treturn (\n\t\tisNumber( value ) &&\n\t\tisNan( value )\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isnan;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isObject as isNumber } from '@stdlib/assert-is-number';\nimport isNan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number object having a value of `NaN`.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number object having a value of `NaN`\n*\n* @example\n* var bool = isnan( NaN );\n* // returns false\n*\n* @example\n* var bool = isnan( new Number( NaN ) );\n* // returns true\n*/\nfunction isnan( value ) {\n\treturn (\n\t\tisNumber( value ) &&\n\t\tisNan( value.valueOf() )\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isnan;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\n/**\n* Tests if a value is `NaN`.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is `NaN`\n*\n* @example\n* var bool = isnan( NaN );\n* // returns true\n*\n* @example\n* var bool = isnan( new Number( NaN ) );\n* // returns true\n*\n* @example\n* var bool = isnan( 3.14 );\n* // returns false\n*\n* @example\n* var bool = isnan( null );\n* // returns false\n*/\nfunction isnan( value ) {\n\treturn ( isPrimitive( value ) || isObject( value ) );\n}\n\n\n// EXPORTS //\n\nexport default isnan;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Tests if a double-precision floating-point numeric value is positive zero.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is positive zero\n*\n* @example\n* var bool = isPositiveZero( 0.0 );\n* // returns true\n*\n* @example\n* var bool = isPositiveZero( -0.0 );\n* // returns false\n*/\nfunction isPositiveZero( x ) {\n\treturn (x === 0.0 && 1.0/x === PINF);\n}\n\n\n// EXPORTS //\n\nexport default isPositiveZero;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isPositiveZero from '@stdlib/math-base-assert-is-positive-zero';\n\n\n// MAIN //\n\n/**\n* Computes the maximum value of a strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} maximum value\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = max( N, x, 1 );\n* // returns 2.0\n*/\nfunction max( N, x, stride ) {\n\tvar max;\n\tvar ix;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tmax = x[ ix ];\n\tfor ( i = 1; i < N; i++ ) {\n\t\tix += stride;\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) ) {\n\t\t\treturn v;\n\t\t}\n\t\tif ( v > max || ( v === max && isPositiveZero( v ) ) ) {\n\t\t\tmax = v;\n\t\t}\n\t}\n\treturn max;\n}\n\n\n// EXPORTS //\n\nexport default max;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Tests if a double-precision floating-point numeric value is infinite.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is infinite\n*\n* @example\n* var bool = isInfinite( Infinity );\n* // returns true\n*\n* @example\n* var bool = isInfinite( -Infinity );\n* // returns true\n*\n* @example\n* var bool = isInfinite( 5.0 );\n* // returns false\n*\n* @example\n* var bool = isInfinite( NaN );\n* // returns false\n*/\nfunction isInfinite( x ) {\n\treturn (x === PINF || x === NINF);\n}\n\n\n// EXPORTS //\n\nexport default isInfinite;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the absolute value of a double-precision floating-point number `x`.\n*\n* @param {number} x - input value\n* @returns {number} absolute value\n*\n* @example\n* var v = abs( -1.0 );\n* // returns 1.0\n*\n* @example\n* var v = abs( 2.0 );\n* // returns 2.0\n*\n* @example\n* var v = abs( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = abs( -0.0 );\n* // returns 0.0\n*\n* @example\n* var v = abs( NaN );\n* // returns NaN\n*/\nfunction abs( x ) {\n\treturn Math.abs( x ); // eslint-disable-line stdlib/no-builtin-math\n}\n\n\n// EXPORTS //\n\nexport default abs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is a string.\n*\n* @module @stdlib/assert-is-string\n*\n* @example\n* import isString from '@stdlib/assert-is-string';\n*\n* var bool = isString( 'beep' );\n* // returns true\n*\n* bool = isString( new String( 'beep' ) );\n* // returns true\n*\n* bool = isString( 5 );\n* // returns false\n*\n* @example\n* import { isObject as isString } from '@stdlib/assert-is-string';\n*\n* var bool = isString( new String( 'beep' ) );\n* // returns true\n*\n* bool = isString( 'beep' );\n* // returns false\n*\n* @example\n* import { isPrimitive as isString } from '@stdlib/assert-is-string';\n*\n* var bool = isString( 'beep' );\n* // returns true\n*\n* bool = isString( new String( 'beep' ) );\n* // returns false\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'isPrimitive', isPrimitive );\nsetReadOnly( main, 'isObject', isObject );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is `NaN`.\n*\n* @module @stdlib/assert-is-nan\n*\n* @example\n* import isnan from '@stdlib/assert-is-nan';\n*\n* var bool = isnan( NaN );\n* // returns true\n*\n* bool = isnan( new Number( NaN ) );\n* // returns true\n*\n* bool = isnan( 3.14 );\n* // returns false\n*\n* bool = isnan( null );\n* // returns false\n*\n* @example\n* import { isPrimitive as isnan } from '@stdlib/assert-is-nan';\n*\n* var bool = isnan( NaN );\n* // returns true\n*\n* bool = isnan( 3.14 );\n* // returns false\n*\n* bool = isnan( new Number( NaN ) );\n* // returns false\n*\n* @example\n* import { isObject as isnan } from '@stdlib/assert-is-nan';\n*\n* var bool = isnan( NaN );\n* // returns false\n*\n* bool = isnan( new Number( NaN ) );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'isPrimitive', isPrimitive );\nsetReadOnly( main, 'isObject', isObject );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport max from './max.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( max, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default max;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isPositiveZero from '@stdlib/math-base-assert-is-positive-zero';\n\n\n// MAIN //\n\n/**\n* Computes the maximum value of a strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} maximum value\n*\n* @example\n* import floor from '@stdlib/math-base-special-floor';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = max( N, x, 2, 1 );\n* // returns 4.0\n*/\nfunction max( N, x, stride, offset ) {\n\tvar max;\n\tvar ix;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tmax = x[ ix ];\n\tfor ( i = 1; i < N; i++ ) {\n\t\tix += stride;\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) ) {\n\t\t\treturn v;\n\t\t}\n\t\tif ( v > max || ( v === max && isPositiveZero( v ) ) ) {\n\t\t\tmax = v;\n\t\t}\n\t}\n\treturn max;\n}\n\n\n// EXPORTS //\n\nexport default max;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nativeClass from '@stdlib/utils-native-class';\n\n\n// VARIABLES //\n\nvar hasUint32Array = ( typeof Uint32Array === 'function' ); // eslint-disable-line stdlib/require-globals\n\n\n// MAIN //\n\n/**\n* Tests if a value is a Uint32Array.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a Uint32Array\n*\n* @example\n* var bool = isUint32Array( new Uint32Array( 10 ) );\n* // returns true\n*\n* @example\n* var bool = isUint32Array( [] );\n* // returns false\n*/\nfunction isUint32Array( value ) {\n\treturn (\n\t\t( hasUint32Array && value instanceof Uint32Array ) || // eslint-disable-line stdlib/require-globals\n\t\tnativeClass( value ) === '[object Uint32Array]'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isUint32Array;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum unsigned 32-bit integer.\n*\n* @module @stdlib/constants-uint32-max\n* @type {uinteger32}\n*\n* @example\n* import UINT32_MAX from '@stdlib/constants-uint32-max';\n* // returns 4294967295\n*/\n\n\n// MAIN //\n\n/**\n* Maximum unsigned 32-bit integer.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* 2^{32} - 1\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 11111111111111111111111111111111\n* ```\n*\n* @constant\n* @type {uinteger32}\n* @default 4294967295\n*/\nvar UINT32_MAX = 4294967295;\n\n\n// EXPORTS //\n\nexport default UINT32_MAX;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof Uint32Array === 'function' ) ? Uint32Array : null; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar ctor = ( typeof Uint32Array === 'function' ) ? Uint32Array : void 0; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Typed array constructor which returns a typed array representing an array of 32-bit unsigned integers in the platform byte order.\n*\n* @module @stdlib/array-uint32\n*\n* @example\n* import ctor from '@stdlib/array-uint32';\n*\n* var arr = new ctor( 10 );\n* // returns <Uint32Array>\n*/\n\n// MODULES //\n\nimport hasUint32ArraySupport from '@stdlib/assert-has-uint32array-support';\nimport builtin from './main.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar ctor;\nif ( hasUint32ArraySupport() ) {\n\tctor = builtin;\n} else {\n\tctor = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isUint32Array from '@stdlib/assert-is-uint32array';\nimport UINT32_MAX from '@stdlib/constants-uint32-max';\nimport GlobalUint32Array from './uint32array.js';\n\n\n// MAIN //\n\n/**\n* Tests for native `Uint32Array` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Uint32Array` support\n*\n* @example\n* var bool = hasUint32ArraySupport();\n* // returns <boolean>\n*/\nfunction hasUint32ArraySupport() {\n\tvar bool;\n\tvar arr;\n\n\tif ( typeof GlobalUint32Array !== 'function' ) {\n\t\treturn false;\n\t}\n\t// Test basic support...\n\ttry {\n\t\tarr = [ 1, 3.14, -3.14, UINT32_MAX+1, UINT32_MAX+2 ];\n\t\tarr = new GlobalUint32Array( arr );\n\t\tbool = (\n\t\t\tisUint32Array( arr ) &&\n\t\t\tarr[ 0 ] === 1 &&\n\t\t\tarr[ 1 ] === 3 &&            // truncation\n\t\t\tarr[ 2 ] === UINT32_MAX-2 && // truncation and wrap around\n\t\t\tarr[ 3 ] === 0 &&            // wrap around\n\t\t\tarr[ 4 ] === 1               // wrap around\n\t\t);\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tbool = false;\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\n\nexport default hasUint32ArraySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: write polyfill\n\n// MAIN //\n\n/**\n* Typed array which represents an array of 32-bit unsigned integers in the platform byte order.\n*\n* @throws {Error} not implemented\n*/\nfunction polyfill() {\n\tthrow new Error( 'not implemented' );\n}\n\n\n// EXPORTS //\n\nexport default polyfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nativeClass from '@stdlib/utils-native-class';\n\n\n// VARIABLES //\n\nvar hasFloat64Array = ( typeof Float64Array === 'function' ); // eslint-disable-line stdlib/require-globals\n\n\n// MAIN //\n\n/**\n* Tests if a value is a Float64Array.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a Float64Array\n*\n* @example\n* var bool = isFloat64Array( new Float64Array( 10 ) );\n* // returns true\n*\n* @example\n* var bool = isFloat64Array( [] );\n* // returns false\n*/\nfunction isFloat64Array( value ) {\n\treturn (\n\t\t( hasFloat64Array && value instanceof Float64Array ) || // eslint-disable-line stdlib/require-globals\n\t\tnativeClass( value ) === '[object Float64Array]'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isFloat64Array;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof Float64Array === 'function' ) ? Float64Array : null; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar ctor = ( typeof Float64Array === 'function' ) ? Float64Array : void 0; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Typed array constructor which returns a typed array representing an array of double-precision floating-point numbers in the platform byte order.\n*\n* @module @stdlib/array-float64\n*\n* @example\n* import ctor from '@stdlib/array-float64';\n*\n* var arr = new ctor( 10 );\n* // returns <Float64Array>\n*/\n\n// MODULES //\n\nimport hasFloat64ArraySupport from '@stdlib/assert-has-float64array-support';\nimport builtin from './main.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar ctor;\nif ( hasFloat64ArraySupport() ) {\n\tctor = builtin;\n} else {\n\tctor = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isFloat64Array from '@stdlib/assert-is-float64array';\nimport GlobalFloat64Array from './float64array.js';\n\n\n// MAIN //\n\n/**\n* Tests for native `Float64Array` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Float64Array` support\n*\n* @example\n* var bool = hasFloat64ArraySupport();\n* // returns <boolean>\n*/\nfunction hasFloat64ArraySupport() {\n\tvar bool;\n\tvar arr;\n\n\tif ( typeof GlobalFloat64Array !== 'function' ) {\n\t\treturn false;\n\t}\n\t// Test basic support...\n\ttry {\n\t\tarr = new GlobalFloat64Array( [ 1.0, 3.14, -3.14, NaN ] );\n\t\tbool = (\n\t\t\tisFloat64Array( arr ) &&\n\t\t\tarr[ 0 ] === 1.0 &&\n\t\t\tarr[ 1 ] === 3.14 &&\n\t\t\tarr[ 2 ] === -3.14 &&\n\t\t\tarr[ 3 ] !== arr[ 3 ]\n\t\t);\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tbool = false;\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\n\nexport default hasFloat64ArraySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: write polyfill\n\n// MAIN //\n\n/**\n* Typed array which represents an array of double-precision floating-point numbers in the platform byte order.\n*\n* @throws {Error} not implemented\n*/\nfunction polyfill() {\n\tthrow new Error( 'not implemented' );\n}\n\n\n// EXPORTS //\n\nexport default polyfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nativeClass from '@stdlib/utils-native-class';\n\n\n// VARIABLES //\n\nvar hasUint8Array = ( typeof Uint8Array === 'function' ); // eslint-disable-line stdlib/require-globals\n\n\n// MAIN //\n\n/**\n* Tests if a value is a Uint8Array.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a Uint8Array\n*\n* @example\n* var bool = isUint8Array( new Uint8Array( 10 ) );\n* // returns true\n*\n* @example\n* var bool = isUint8Array( [] );\n* // returns false\n*/\nfunction isUint8Array( value ) {\n\treturn (\n\t\t( hasUint8Array && value instanceof Uint8Array ) || // eslint-disable-line stdlib/require-globals\n\t\tnativeClass( value ) === '[object Uint8Array]'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isUint8Array;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum unsigned 8-bit integer.\n*\n* @module @stdlib/constants-uint8-max\n* @type {integer32}\n*\n* @example\n* import UINT8_MAX from '@stdlib/constants-uint8-max';\n* // returns 255\n*/\n\n\n// MAIN //\n\n/**\n* Maximum unsigned 8-bit integer.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* 2^{8} - 1\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 11111111\n* ```\n*\n* @constant\n* @type {integer32}\n* @default 255\n*/\nvar UINT8_MAX = 255|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default UINT8_MAX;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof Uint8Array === 'function' ) ? Uint8Array : null; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar ctor = ( typeof Uint8Array === 'function' ) ? Uint8Array : void 0; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Typed array constructor which returns a typed array representing an array of 8-bit unsigned integers in the platform byte order.\n*\n* @module @stdlib/array-uint8\n*\n* @example\n* import ctor from '@stdlib/array-uint8';\n*\n* var arr = new ctor( 10 );\n* // returns <Uint8Array>\n*/\n\n// MODULES //\n\nimport hasUint8ArraySupport from '@stdlib/assert-has-uint8array-support';\nimport builtin from './main.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar ctor;\nif ( hasUint8ArraySupport() ) {\n\tctor = builtin;\n} else {\n\tctor = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isUint8Array from '@stdlib/assert-is-uint8array';\nimport UINT8_MAX from '@stdlib/constants-uint8-max';\nimport GlobalUint8Array from './uint8array.js';\n\n\n// MAIN //\n\n/**\n* Tests for native `Uint8Array` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Uint8Array` support\n*\n* @example\n* var bool = hasUint8ArraySupport();\n* // returns <boolean>\n*/\nfunction hasUint8ArraySupport() {\n\tvar bool;\n\tvar arr;\n\n\tif ( typeof GlobalUint8Array !== 'function' ) {\n\t\treturn false;\n\t}\n\t// Test basic support...\n\ttry {\n\t\tarr = [ 1, 3.14, -3.14, UINT8_MAX+1, UINT8_MAX+2 ];\n\t\tarr = new GlobalUint8Array( arr );\n\t\tbool = (\n\t\t\tisUint8Array( arr ) &&\n\t\t\tarr[ 0 ] === 1 &&\n\t\t\tarr[ 1 ] === 3 &&           // truncation\n\t\t\tarr[ 2 ] === UINT8_MAX-2 && // truncation and wrap around\n\t\t\tarr[ 3 ] === 0 &&           // wrap around\n\t\t\tarr[ 4 ] === 1              // wrap around\n\t\t);\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tbool = false;\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\n\nexport default hasUint8ArraySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: write polyfill\n\n// MAIN //\n\n/**\n* Typed array which represents an array of 8-bit unsigned integers in the platform byte order.\n*\n* @throws {Error} not implemented\n*/\nfunction polyfill() {\n\tthrow new Error( 'not implemented' );\n}\n\n\n// EXPORTS //\n\nexport default polyfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nativeClass from '@stdlib/utils-native-class';\n\n\n// VARIABLES //\n\nvar hasUint16Array = ( typeof Uint16Array === 'function' ); // eslint-disable-line stdlib/require-globals\n\n\n// MAIN //\n\n/**\n* Tests if a value is a Uint16Array.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a Uint16Array\n*\n* @example\n* var bool = isUint16Array( new Uint16Array( 10 ) );\n* // returns true\n*\n* @example\n* var bool = isUint16Array( [] );\n* // returns false\n*/\nfunction isUint16Array( value ) {\n\treturn (\n\t\t( hasUint16Array && value instanceof Uint16Array ) || // eslint-disable-line stdlib/require-globals\n\t\tnativeClass( value ) === '[object Uint16Array]'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isUint16Array;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum unsigned 16-bit integer.\n*\n* @module @stdlib/constants-uint16-max\n* @type {integer32}\n*\n* @example\n* import UINT16_MAX from '@stdlib/constants-uint16-max';\n* // returns 65535\n*/\n\n\n// MAIN //\n\n/**\n* Maximum unsigned 16-bit integer.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* 2^{16} - 1\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 1111111111111111\n* ```\n*\n* @constant\n* @type {integer32}\n* @default 65535\n*/\nvar UINT16_MAX = 65535|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default UINT16_MAX;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof Uint16Array === 'function' ) ? Uint16Array : null; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar ctor = ( typeof Uint16Array === 'function' ) ? Uint16Array : void 0; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Typed array constructor which returns a typed array representing an array of 16-bit unsigned integers in the platform byte order.\n*\n* @module @stdlib/array-uint16\n*\n* @example\n* import ctor from '@stdlib/array-uint16';\n*\n* var arr = new ctor( 10 );\n* // returns <Uint16Array>\n*/\n\n// MODULES //\n\nimport hasUint16ArraySupport from '@stdlib/assert-has-uint16array-support';\nimport builtin from './main.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar ctor;\nif ( hasUint16ArraySupport() ) {\n\tctor = builtin;\n} else {\n\tctor = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isUint16Array from '@stdlib/assert-is-uint16array';\nimport UINT16_MAX from '@stdlib/constants-uint16-max';\nimport GlobalUint16Array from './uint16array.js';\n\n\n// MAIN //\n\n/**\n* Tests for native `Uint16Array` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Uint16Array` support\n*\n* @example\n* var bool = hasUint16ArraySupport();\n* // returns <boolean>\n*/\nfunction hasUint16ArraySupport() {\n\tvar bool;\n\tvar arr;\n\n\tif ( typeof GlobalUint16Array !== 'function' ) {\n\t\treturn false;\n\t}\n\t// Test basic support...\n\ttry {\n\t\tarr = [ 1, 3.14, -3.14, UINT16_MAX+1, UINT16_MAX+2 ];\n\t\tarr = new GlobalUint16Array( arr );\n\t\tbool = (\n\t\t\tisUint16Array( arr ) &&\n\t\t\tarr[ 0 ] === 1 &&\n\t\t\tarr[ 1 ] === 3 &&            // truncation\n\t\t\tarr[ 2 ] === UINT16_MAX-2 && // truncation and wrap around\n\t\t\tarr[ 3 ] === 0 &&            // wrap around\n\t\t\tarr[ 4 ] === 1               // wrap around\n\t\t);\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tbool = false;\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\n\nexport default hasUint16ArraySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: write polyfill\n\n// MAIN //\n\n/**\n* Typed array which represents an array of 16-bit unsigned integers in the platform byte order.\n*\n* @throws {Error} not implemented\n*/\nfunction polyfill() {\n\tthrow new Error( 'not implemented' );\n}\n\n\n// EXPORTS //\n\nexport default polyfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ctors from './ctors.js';\n\n\n// VARIABLES //\n\nvar bool;\n\n\n// FUNCTIONS //\n\n/**\n* Returns a boolean indicating if an environment is little endian.\n*\n* @private\n* @returns {boolean} boolean indicating if an environment is little endian\n*\n* @example\n* var bool = isLittleEndian();\n* // returns <boolean>\n*/\nfunction isLittleEndian() {\n\tvar uint16view;\n\tvar uint8view;\n\n\tuint16view = new ctors[ 'uint16' ]( 1 );\n\n\t/*\n\t* Set the uint16 view to a value having distinguishable lower and higher order words.\n\t*\n\t* 4660 => 0x1234 => 0x12 0x34 => '00010010 00110100' => (0x12,0x34) == (18,52)\n\t*/\n\tuint16view[ 0 ] = 0x1234;\n\n\t// Create a uint8 view on top of the uint16 buffer:\n\tuint8view = new ctors[ 'uint8' ]( uint16view.buffer );\n\n\t// If little endian, the least significant byte will be first...\n\treturn ( uint8view[ 0 ] === 0x34 );\n}\n\n\n// MAIN //\n\nbool = isLittleEndian();\n\n\n// EXPORTS //\n\nexport default bool;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Uint8Array from '@stdlib/array-uint8';\nimport Uint16Array from '@stdlib/array-uint16';\n\n\n// MAIN //\n\nvar ctors = {\n\t'uint16': Uint16Array,\n\t'uint8': Uint8Array\n};\n\n\n// EXPORTS //\n\nexport default ctors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isLittleEndian from '@stdlib/assert-is-little-endian';\n\n\n// MAIN //\n\nvar HIGH;\nif ( isLittleEndian === true ) {\n\tHIGH = 1; // second index\n} else {\n\tHIGH = 0; // first index\n}\n\n\n// EXPORTS //\n\nexport default HIGH;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Uint32Array from '@stdlib/array-uint32';\nimport Float64Array from '@stdlib/array-float64';\nimport HIGH from './high.js';\n\n\n// VARIABLES //\n\nvar FLOAT64_VIEW = new Float64Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );\n\n\n// MAIN //\n\n/**\n* Returns an unsigned 32-bit integer corresponding to the more significant 32 bits of a double-precision floating-point number.\n*\n* ## Notes\n*\n* ```text\n* float64 (64 bits)\n* f := fraction (significand/mantissa) (52 bits)\n* e := exponent (11 bits)\n* s := sign bit (1 bit)\n*\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |                                Float64                                |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |              Uint32               |               Uint32              |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* ```\n*\n* If little endian (more significant bits last):\n*\n* ```text\n*                         <-- lower      higher -->\n* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |\n* ```\n*\n* If big endian (more significant bits first):\n*\n* ```text\n*                         <-- higher      lower -->\n* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |\n* ```\n*\n* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.\n*\n* ## References\n*\n* -   [Open Group][1]\n*\n* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm\n*\n* @param {number} x - input value\n* @returns {uinteger32} higher order word\n*\n* @example\n* var w = getHighWord( 3.14e201 ); // => 01101001110001001000001011000011\n* // returns 1774486211\n*/\nfunction getHighWord( x ) {\n\tFLOAT64_VIEW[ 0 ] = x;\n\treturn UINT32_VIEW[ HIGH ];\n}\n\n\n// EXPORTS //\n\nexport default getHighWord;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isLittleEndian from '@stdlib/assert-is-little-endian';\n\n\n// MAIN //\n\nvar HIGH;\nif ( isLittleEndian === true ) {\n\tHIGH = 1; // second index\n} else {\n\tHIGH = 0; // first index\n}\n\n\n// EXPORTS //\n\nexport default HIGH;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Uint32Array from '@stdlib/array-uint32';\nimport Float64Array from '@stdlib/array-float64';\nimport HIGH from './high.js';\n\n\n// VARIABLES //\n\nvar FLOAT64_VIEW = new Float64Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );\n\n\n// MAIN //\n\n/**\n* Sets the more significant 32 bits of a double-precision floating-point number.\n*\n* ## Notes\n*\n* ```text\n* float64 (64 bits)\n* f := fraction (significand/mantissa) (52 bits)\n* e := exponent (11 bits)\n* s := sign bit (1 bit)\n*\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |                                Float64                                |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |              Uint32               |               Uint32              |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* ```\n*\n* If little endian (more significant bits last):\n*\n* ```text\n*                         <-- lower      higher -->\n* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |\n* ```\n*\n* If big endian (more significant bits first):\n*\n* ```text\n*                         <-- higher      lower -->\n* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |\n* ```\n*\n* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.\n*\n* ## References\n*\n* -   [Open Group][1]\n*\n* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm\n*\n* @param {number} x - double\n* @param {uinteger32} high - unsigned 32-bit integer to replace the higher order word of `x`\n* @returns {number} double having the same lower order word as `x`\n*\n* @example\n* var high = 5 >>> 0; // => 0 00000000000 00000000000000000101\n*\n* var y = setHighWord( 3.14e201, high ); //  => 0 00000000000 0000000000000000010110010011110010110101100010000010\n* // returns 1.18350528745e-313\n*\n* @example\n* import PINF from '@stdlib/constants-float64-pinf'; // => 0 11111111111 00000000000000000000 00000000000000000000000000000000\n*\n* var high = 1072693248 >>> 0; // => 0 01111111111 00000000000000000000\n*\n* // Set the higher order bits of `+infinity` to return `1`:\n* var y = setHighWord( PINF, high ); // => 0 01111111111 0000000000000000000000000000000000000000000000000000\n* // returns 1.0\n*/\nfunction setHighWord( x, high ) {\n\tFLOAT64_VIEW[ 0 ] = x;\n\tUINT32_VIEW[ HIGH ] = ( high >>> 0 ); // identity bit shift to ensure integer\n\treturn FLOAT64_VIEW[ 0 ];\n}\n\n\n// EXPORTS //\n\nexport default setHighWord;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_log.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport getHighWord from '@stdlib/number-float64-base-get-high-word';\nimport setHighWord from '@stdlib/number-float64-base-set-high-word';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport BIAS from '@stdlib/constants-float64-exponent-bias';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport polyvalP from './polyval_p.js';\nimport polyvalQ from './polyval_q.js';\n\n\n// VARIABLES //\n\nvar LN2_HI = 6.93147180369123816490e-01; // 3FE62E42 FEE00000\nvar LN2_LO = 1.90821492927058770002e-10; // 3DEA39EF 35793C76\nvar TWO54 = 1.80143985094819840000e+16;  // 0x43500000, 0x00000000\nvar ONE_THIRD = 0.33333333333333333;\n\n// 0x000fffff = 1048575 => 0 00000000000 11111111111111111111\nvar HIGH_SIGNIFICAND_MASK = 0x000fffff|0; // asm type annotation\n\n// 0x7ff00000 = 2146435072 => 0 11111111111 00000000000000000000 => biased exponent: 2047 = 1023+1023 => 2^1023\nvar HIGH_MAX_NORMAL_EXP = 0x7ff00000|0; // asm type annotation\n\n// 0x00100000 = 1048576 => 0 00000000001 00000000000000000000 => biased exponent: 1 = -1022+1023 => 2^-1022\nvar HIGH_MIN_NORMAL_EXP = 0x00100000|0; // asm type annotation\n\n// 0x3ff00000 = 1072693248 => 0 01111111111 00000000000000000000 => biased exponent: 1023 = 0+1023 => 2^0 = 1\nvar HIGH_BIASED_EXP_0 = 0x3ff00000|0; // asm type annotation\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of a double-precision floating-point number.\n*\n* @param {NonNegativeNumber} x - input value\n* @returns {number} function value\n*\n* @example\n* var v = ln( 4.0 );\n* // returns ~1.386\n*\n* @example\n* var v = ln( 0.0 );\n* // returns -Infinity\n*\n* @example\n* var v = ln( Infinity );\n* // returns Infinity\n*\n* @example\n* var v = ln( NaN );\n* // returns NaN\n*\n* @example\n* var v = ln( -4.0 );\n* // returns NaN\n*/\nfunction ln( x ) {\n\tvar hfsq;\n\tvar hx;\n\tvar t2;\n\tvar t1;\n\tvar k;\n\tvar R;\n\tvar f;\n\tvar i;\n\tvar j;\n\tvar s;\n\tvar w;\n\tvar z;\n\n\tif ( x === 0.0 ) {\n\t\treturn NINF;\n\t}\n\tif ( isnan( x ) || x < 0.0 ) {\n\t\treturn NaN;\n\t}\n\thx = getHighWord( x );\n\tk = 0|0; // asm type annotation\n\tif ( hx < HIGH_MIN_NORMAL_EXP ) {\n\t\t// Case: 0 < x < 2**-1022\n\t\tk -= 54|0; // asm type annotation\n\n\t\t// Subnormal number, scale up `x`:\n\t\tx *= TWO54;\n\t\thx = getHighWord( x );\n\t}\n\tif ( hx >= HIGH_MAX_NORMAL_EXP ) {\n\t\treturn x + x;\n\t}\n\tk += ( ( hx>>20 ) - BIAS )|0; // asm type annotation\n\thx &= HIGH_SIGNIFICAND_MASK;\n\ti = ( (hx+0x95f64) & 0x100000 )|0; // asm type annotation\n\n\t// Normalize `x` or `x/2`...\n\tx = setHighWord( x, hx|(i^HIGH_BIASED_EXP_0) );\n\tk += ( i>>20 )|0; // asm type annotation\n\tf = x - 1.0;\n\tif ( (HIGH_SIGNIFICAND_MASK&(2+hx)) < 3 ) {\n\t\t// Case: -2**-20 <= f < 2**-20\n\t\tif ( f === 0.0 ) {\n\t\t\tif ( k === 0 ) {\n\t\t\t\treturn 0.0;\n\t\t\t}\n\t\t\treturn (k * LN2_HI) + (k * LN2_LO);\n\t\t}\n\t\tR = f * f * ( 0.5 - (ONE_THIRD*f) );\n\t\tif ( k === 0 ) {\n\t\t\treturn f - R;\n\t\t}\n\t\treturn (k * LN2_HI) - ( (R-(k*LN2_LO)) - f );\n\t}\n\ts = f / (2.0 + f);\n\tz = s * s;\n\ti = ( hx - 0x6147a )|0; // asm type annotation\n\tw = z * z;\n\tj = ( 0x6b851 - hx )|0; // asm type annotation\n\tt1 = w * polyvalP( w );\n\tt2 = z * polyvalQ( w );\n\ti |= j;\n\tR = t2 + t1;\n\tif ( i > 0 ) {\n\t\thfsq = 0.5 * f * f;\n\t\tif ( k === 0 ) {\n\t\t\treturn f - ( hfsq - (s * (hfsq+R)) );\n\t\t}\n\t\treturn (k * LN2_HI) - ( hfsq - ((s*(hfsq+R))+(k*LN2_LO)) - f );\n\t}\n\tif ( k === 0 ) {\n\t\treturn f - (s*(f-R));\n\t}\n\treturn (k * LN2_HI) - ( ( (s*(f-R)) - (k*LN2_LO) ) - f );\n}\n\n\n// EXPORTS //\n\nexport default ln;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The bias of a double-precision floating-point number's exponent.\n*\n* @module @stdlib/constants-float64-exponent-bias\n* @type {integer32}\n*\n* @example\n* import FLOAT64_EXPONENT_BIAS from '@stdlib/constants-float64-exponent-bias';\n* // returns 1023\n*/\n\n\n// MAIN //\n\n/**\n* Bias of a double-precision floating-point number's exponent.\n*\n* ## Notes\n*\n* The bias can be computed via\n*\n* ```tex\n* \\mathrm{bias} = 2^{k-1} - 1\n* ```\n*\n* where \\\\(k\\\\) is the number of bits in the exponent; here, \\\\(k = 11\\\\).\n*\n* @constant\n* @type {integer32}\n* @default 1023\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_EXPONENT_BIAS = 1023|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default FLOAT64_EXPONENT_BIAS;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.3999999999940942;\n\t}\n\treturn 0.3999999999940942 + (x * (0.22222198432149784 + (x * 0.15313837699209373))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.6666666666666735;\n\t}\n\treturn 0.6666666666666735 + (x * (0.2857142874366239 + (x * (0.1818357216161805 + (x * 0.14798198605116586))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: implementation (?)\n\n/**\n* Rounds a double-precision floating-point number toward positive infinity.\n*\n* @param {number} x - input value\n* @returns {number} rounded value\n*\n* @example\n* var v = ceil( -4.2 );\n* // returns -4.0\n*\n* @example\n* var v = ceil( 9.99999 );\n* // returns 10.0\n*\n* @example\n* var v = ceil( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = ceil( NaN );\n* // returns NaN\n*/\nvar ceil = Math.ceil; // eslint-disable-line stdlib/no-builtin-math\n\n\n// EXPORTS //\n\nexport default ceil;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math-base-special-floor';\nimport ceil from '@stdlib/math-base-special-ceil';\n\n\n// MAIN //\n\n/**\n* Rounds a double-precision floating-point number toward zero.\n*\n* @param {number} x - input value\n* @returns {number} rounded value\n*\n* @example\n* var v = trunc( -4.2 );\n* // returns -4.0\n*\n* @example\n* var v = trunc( 9.99999 );\n* // returns 9.0\n*\n* @example\n* var v = trunc( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = trunc( -0.0 );\n* // returns -0.0\n*\n* @example\n* var v = trunc( NaN );\n* // returns NaN\n*\n* @example\n* var v = trunc( Infinity );\n* // returns Infinity\n*\n* @example\n* var v = trunc( -Infinity );\n* // returns -Infinity\n*/\nfunction trunc( x ) {\n\tif ( x < 0.0 ) {\n\t\treturn ceil( x );\n\t}\n\treturn floor( x );\n}\n\n\n// EXPORTS //\n\nexport default trunc;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/12.2.0/lib/msun/src/k_cos.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport polyval13 from './polyval_c13.js';\nimport polyval46 from './polyval_c46.js';\n\n\n// MAIN //\n\n/**\n* Computes the cosine on \\\\( \\[-\\pi/4, \\pi/4] \\\\), where \\\\( \\pi/4 \\approx 0.785398164 \\\\).\n*\n* ## Method\n*\n* -   Since \\\\( \\cos(-x) = \\cos(x) \\\\), we need only to consider positive \\\\(x\\\\).\n*\n* -   If \\\\( x < 2^{-27} \\\\), return \\\\(1\\\\) which is inexact if \\\\( x \\ne 0 \\\\).\n*\n* -   \\\\( cos(x) \\\\) is approximated by a polynomial of degree \\\\(14\\\\) on \\\\( \\[0,\\pi/4] \\\\).\n*\n*     ```tex\n*     \\cos(x) \\approx 1 - \\frac{x \\cdot x}{2} + C_1 \\cdot x^4 + \\ldots + C_6 \\cdot x^{14}\n*     ```\n*\n*     where the Remez error is\n*\n*     ```tex\n*     \\left| \\cos(x) - \\left( 1 - \\frac{x^2}{2} + C_1x^4 + C_2x^6 + C_3x^8 + C_4x^{10} + C_5x^{12} + C_6x^{15} \\right) \\right| \\le 2^{-58}\n*     ```\n*\n* -   Let \\\\( C_1x^4 + C_2x^6 + C_3x^8 + C_4x^{10} + C_5x^{12} + C_6x^{14} \\\\), then\n*\n*     ```tex\n*     \\cos(x) \\approx 1 - \\frac{x \\cdot x}{2} + r\n*     ```\n*\n*     Since\n*\n*     ```tex\n*     \\cos(x+y) \\approx \\cos(x) - \\sin(x) \\cdot y \\approx \\cos(x) - x \\cdot y\n*     ```\n*\n*     a correction term is necessary in \\\\( \\cos(x) \\\\). Hence,\n*\n*     ```tex\n*     \\cos(x+y) = 1 - \\left( \\frac{x \\cdot x}{2} - (r - x \\cdot y) \\right)\n*     ```\n*\n*     For better accuracy, rearrange to\n*\n*     ```tex\n*     \\cos(x+y) \\approx w + \\left( t + ( r - x \\cdot y ) \\right)\n*     ```\n*\n*     where \\\\( w = 1 - \\frac{x \\cdot x}{2} \\\\) and \\\\( t \\\\) is a tiny correction term (\\\\( 1 - \\frac{x \\cdot x}{2} = w + t \\\\) exactly in infinite precision). The exactness of \\\\(w + t\\\\) in infinite precision depends on \\\\(w\\\\) and \\\\(t\\\\) having the same precision as \\\\(x\\\\).\n*\n* @param {number} x - input value (in radians, assumed to be bounded by ~pi/4 in magnitude)\n* @param {number} y - tail of `x`\n* @returns {number} cosine\n*\n* @example\n* var v = kernelCos( 0.0, 0.0 );\n* // returns ~1.0\n*\n* @example\n* var v = kernelCos( 3.141592653589793/6.0, 0.0 );\n* // returns ~0.866\n*\n* @example\n* var v = kernelCos( 0.785, -1.144e-17 );\n* // returns ~0.707\n*\n* @example\n* var v = kernelCos( NaN, 0.0 );\n* // returns NaN\n*/\nfunction kernelCos( x, y ) {\n\tvar hz;\n\tvar r;\n\tvar w;\n\tvar z;\n\n\tz = x * x;\n\tw = z * z;\n\tr = z * polyval13( z );\n\tr += w * w * polyval46( z );\n\thz = 0.5 * z;\n\tw = 1.0 - hz;\n\treturn w + ( ((1.0-w) - hz) + ((z*r) - (x*y)) );\n}\n\n\n// EXPORTS //\n\nexport default kernelCos;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.0416666666666666;\n\t}\n\treturn 0.0416666666666666 + (x * (-0.001388888888887411 + (x * 0.00002480158728947673))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -2.7557314351390663e-7;\n\t}\n\treturn -2.7557314351390663e-7 + (x * (2.087572321298175e-9 + (x * -1.1359647557788195e-11))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_sin.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar S1 = -1.66666666666666324348e-01; // 0xBFC55555, 0x55555549\nvar S2 = 8.33333333332248946124e-03;  // 0x3F811111, 0x1110F8A6\nvar S3 = -1.98412698298579493134e-04; // 0xBF2A01A0, 0x19C161D5\nvar S4 = 2.75573137070700676789e-06;  // 0x3EC71DE3, 0x57B1FE7D\nvar S5 = -2.50507602534068634195e-08; // 0xBE5AE5E6, 0x8A2B9CEB\nvar S6 = 1.58969099521155010221e-10;  // 0x3DE5D93A, 0x5ACFD57C\n\n\n// MAIN //\n\n/**\n* Computes the sine on \\\\( \\approx \\[-\\pi/4, \\pi/4] \\\\) (except on \\\\(-0\\\\)), where \\\\( \\pi/4 \\approx 0.7854 \\\\).\n*\n* ## Method\n*\n* -   Since \\\\( \\sin(-x) = -\\sin(x) \\\\), we need only to consider positive \\\\(x\\\\).\n*\n* -   Callers must return \\\\( \\sin(-0) = -0 \\\\) without calling here since our odd polynomial is not evaluated in a way that preserves \\\\(-0\\\\). Callers may do the optimization \\\\( \\sin(x) \\approx x \\\\) for tiny \\\\(x\\\\).\n*\n* -   \\\\( \\sin(x) \\\\) is approximated by a polynomial of degree \\\\(13\\\\) on \\\\( \\left\\[0,\\tfrac{pi}{4}\\right] \\\\)\n*\n*     ```tex\n*     \\sin(x) \\approx x + S_1 \\cdot x^3 + \\ldots + S_6 \\cdot x^{13}\n*     ```\n*\n*     where\n*\n*     ```tex\n*     \\left| \\frac{\\sin(x)}{x} \\left( 1 + S_1 \\cdot x + S_2 \\cdot x + S_3 \\cdot x + S_4 \\cdot x + S_5 \\cdot x + S_6 \\cdot x \\right) \\right| \\le 2^{-58}\n*     ```\n*\n* -   We have\n*\n*     ```tex\n*     \\sin(x+y) = \\sin(x) + \\sin'(x') \\cdot y \\approx \\sin(x) + (1-x*x/2) \\cdot y\n*     ```\n*\n*     For better accuracy, let\n*\n*     ```tex\n*     r = x^3 * \\left( S_2 + x^2 \\cdot \\left( S_3 + x^2 * \\left( S_4 + x^2 \\cdot ( S_5+x^2 \\cdot S_6 ) \\right) \\right) \\right)\n*     ```\n*\n*     then\n*\n*     ```tex\n*     \\sin(x) = x + \\left( S_1 \\cdot x + ( x \\cdot (r-y/2) + y ) \\right)\n*     ```\n*\n* @param {number} x - input value (in radians, assumed to be bounded by `~pi/4` in magnitude)\n* @param {number} y - tail of `x`\n* @returns {number} sine\n*\n* @example\n* var v = kernelSin( 0.0, 0.0 );\n* // returns ~0.0\n*\n* @example\n* var v = kernelSin( 3.141592653589793/6.0, 0.0 );\n* // returns ~0.5\n*\n* @example\n* var v = kernelSin( 0.619, 9.279e-18 );\n* // returns ~0.58\n*\n* @example\n* var v = kernelSin( NaN, 0.0 );\n* // returns NaN\n*\n* @example\n* var v = kernelSin( 3.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = kernelSin( NaN, NaN );\n* // returns NaN\n*/\nfunction kernelSin( x, y ) {\n\tvar r;\n\tvar v;\n\tvar w;\n\tvar z;\n\n\tz = x * x;\n\tw = z * z;\n\tr = S2 + (z * (S3 + (z*S4))) + (z * w * (S5 + (z*S6)));\n\tv = z * x;\n\tif ( y === 0.0 ) {\n\t\treturn x + (v * (S1 + (z*r)));\n\t}\n\treturn x - (((z*((0.5*y) - (v*r))) - y) - (v*S1));\n}\n\n\n// EXPORTS //\n\nexport default kernelSin;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* High word mask for excluding the sign bit of a double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-high-word-abs-mask\n* @type {uinteger32}\n*\n* @example\n* import FLOAT64_HIGH_WORD_ABS_MASK from '@stdlib/constants-float64-high-word-abs-mask';\n* // returns 2147483647\n*/\n\n\n// MAIN //\n\n/**\n* High word mask for excluding the sign bit of a double-precision floating-point number.\n*\n* ## Notes\n*\n* The high word mask for excluding the sign bit of a double-precision floating-point number is an unsigned 32-bit integer with the value \\\\( 2147483647 \\\\), which corresponds to the bit sequence\n*\n* ```binarystring\n* 0 11111111111 11111111111111111111\n* ```\n*\n* @constant\n* @type {uinteger32}\n* @default 0x7fffffff\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_HIGH_WORD_ABS_MASK = 0x7fffffff>>>0; // eslint-disable-line id-length\n\n\n// EXPORTS //\n\nexport default FLOAT64_HIGH_WORD_ABS_MASK;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isLittleEndian from '@stdlib/assert-is-little-endian';\n\n\n// MAIN //\n\nvar indices;\nvar HIGH;\nvar LOW;\n\nif ( isLittleEndian === true ) {\n\tHIGH = 1; // second index\n\tLOW = 0; // first index\n} else {\n\tHIGH = 0; // first index\n\tLOW = 1; // second index\n}\nindices = {\n\t'HIGH': HIGH,\n\t'LOW': LOW\n};\n\n\n// EXPORTS //\n\nexport default indices;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isLittleEndian from '@stdlib/assert-is-little-endian';\n\n\n// MAIN //\n\nvar LOW;\nif ( isLittleEndian === true ) {\n\tLOW = 0; // first index\n} else {\n\tLOW = 1; // second index\n}\n\n\n// EXPORTS //\n\nexport default LOW;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Uint32Array from '@stdlib/array-uint32';\nimport Float64Array from '@stdlib/array-float64';\nimport LOW from './low.js';\n\n\n// VARIABLES //\n\nvar FLOAT64_VIEW = new Float64Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );\n\n\n// MAIN //\n\n/**\n* Returns a 32-bit unsigned integer corresponding to the less significant 32 bits of a double-precision floating-point number.\n*\n* ## Notes\n*\n* ```text\n* float64 (64 bits)\n* f := fraction (significand/mantissa) (52 bits)\n* e := exponent (11 bits)\n* s := sign bit (1 bit)\n*\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |                                Float64                                |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |              Uint32               |               Uint32              |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* ```\n*\n* If little endian (more significant bits last):\n*\n* ```text\n*                         <-- lower      higher -->\n* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |\n* ```\n*\n* If big endian (more significant bits first):\n*\n* ```text\n*                         <-- higher      lower -->\n* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |\n* ```\n*\n* In which Uint32 can we find the lower order bits? If little endian, the first; if big endian, the second.\n*\n* ## References\n*\n* -   [Open Group][1]\n*\n* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm\n*\n* @param {number} x - input value\n* @returns {uinteger32} lower order word\n*\n* @example\n* var w = getLowWord( 3.14e201 ); // => 10010011110010110101100010000010\n* // returns 2479577218\n*/\nfunction getLowWord( x ) {\n\tFLOAT64_VIEW[ 0 ] = x;\n\treturn UINT32_VIEW[ LOW ];\n}\n\n\n// EXPORTS //\n\nexport default getLowWord;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Uint32Array from '@stdlib/array-uint32';\nimport Float64Array from '@stdlib/array-float64';\nimport indices from './indices.js';\n\n\n// VARIABLES //\n\nvar FLOAT64_VIEW = new Float64Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );\n\nvar HIGH = indices.HIGH;\nvar LOW = indices.LOW;\n\n\n// MAIN //\n\n/**\n* Creates a double-precision floating-point number from a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).\n*\n* ## Notes\n*\n* ```text\n* float64 (64 bits)\n* f := fraction (significand/mantissa) (52 bits)\n* e := exponent (11 bits)\n* s := sign bit (1 bit)\n*\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |                                Float64                                |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |              Uint32               |               Uint32              |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* ```\n*\n* If little endian (more significant bits last):\n*\n* ```text\n*                         <-- lower      higher -->\n* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |\n* ```\n*\n* If big endian (more significant bits first):\n*\n* ```text\n*                         <-- higher      lower -->\n* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |\n* ```\n*\n* In which Uint32 should we place the higher order bits? If little endian, the second; if big endian, the first.\n*\n* ## References\n*\n* -   [Open Group][1]\n*\n* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm\n*\n* @param {uinteger32} high - higher order word (unsigned 32-bit integer)\n* @param {uinteger32} low - lower order word (unsigned 32-bit integer)\n* @returns {number} floating-point number\n*\n* @example\n* var v = fromWords( 1774486211, 2479577218 );\n* // returns 3.14e201\n*\n* @example\n* var v = fromWords( 3221823995, 1413754136 );\n* // returns -3.141592653589793\n*\n* @example\n* var v = fromWords( 0, 0 );\n* // returns 0.0\n*\n* @example\n* var v = fromWords( 2147483648, 0 );\n* // returns -0.0\n*\n* @example\n* var v = fromWords( 2146959360, 0 );\n* // returns NaN\n*\n* @example\n* var v = fromWords( 2146435072, 0 );\n* // returns Infinity\n*\n* @example\n* var v = fromWords( 4293918720, 0 );\n* // returns -Infinity\n*/\nfunction fromWords( high, low ) {\n\tUINT32_VIEW[ HIGH ] = high;\n\tUINT32_VIEW[ LOW ] = low;\n\treturn FLOAT64_VIEW[ 0 ];\n}\n\n\n// EXPORTS //\n\nexport default fromWords;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The maximum biased base 2 exponent for a double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-max-base2-exponent\n* @type {integer32}\n*\n* @example\n* import FLOAT64_MAX_BASE2_EXPONENT from '@stdlib/constants-float64-max-base2-exponent';\n* // returns 1023\n*/\n\n\n// MAIN //\n\n/**\n* The maximum biased base 2 exponent for a double-precision floating-point number.\n*\n* ```text\n* 11111111110 => 2046 - BIAS = 1023\n* ```\n*\n* where `BIAS = 1023`.\n*\n* @constant\n* @type {integer32}\n* @default 1023\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MAX_BASE2_EXPONENT = 1023|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default FLOAT64_MAX_BASE2_EXPONENT;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isLittleEndian from '@stdlib/assert-is-little-endian';\n\n\n// MAIN //\n\nvar indices;\nvar HIGH;\nvar LOW;\n\nif ( isLittleEndian === true ) {\n\tHIGH = 1; // second index\n\tLOW = 0; // first index\n} else {\n\tHIGH = 0; // first index\n\tLOW = 1; // second index\n}\nindices = {\n\t'HIGH': HIGH,\n\t'LOW': LOW\n};\n\n\n// EXPORTS //\n\nexport default indices;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Uint32Array from '@stdlib/array-uint32';\nimport Float64Array from '@stdlib/array-float64';\nimport indices from './indices.js';\n\n\n// VARIABLES //\n\nvar FLOAT64_VIEW = new Float64Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );\n\nvar HIGH = indices.HIGH;\nvar LOW = indices.LOW;\n\n\n// MAIN //\n\n/**\n* Splits a double-precision floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).\n*\n* ## Notes\n*\n* ```text\n* float64 (64 bits)\n* f := fraction (significand/mantissa) (52 bits)\n* e := exponent (11 bits)\n* s := sign bit (1 bit)\n*\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |                                Float64                                |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |              Uint32               |               Uint32              |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* ```\n*\n* If little endian (more significant bits last):\n*\n* ```text\n*                         <-- lower      higher -->\n* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |\n* ```\n*\n* If big endian (more significant bits first):\n*\n* ```text\n*                         <-- higher      lower -->\n* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |\n* ```\n*\n* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.\n*\n* ## References\n*\n* -   [Open Group][1]\n*\n* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm\n*\n* @private\n* @param {number} x - input value\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {Collection} output array\n*\n* @example\n* import Uint32Array from '@stdlib/array-uint32';\n*\n* var out = new Uint32Array( 2 );\n*\n* var w = toWords( 3.14e201, out, 1, 0 );\n* // returns <Uint32Array>[ 1774486211, 2479577218 ]\n*\n* var bool = ( w === out );\n* // returns true\n*/\nfunction toWords( x, out, stride, offset ) {\n\tFLOAT64_VIEW[ 0 ] = x;\n\tout[ offset ] = UINT32_VIEW[ HIGH ];\n\tout[ offset + stride ] = UINT32_VIEW[ LOW ];\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default toWords;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport fcn from './assign.js';\n\n\n// MAIN //\n\n/**\n* Splits a double-precision floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).\n*\n* @param {number} x - input value\n* @returns {Array<number>} output array\n*\n* @example\n* var w = toWords( 3.14e201 );\n* // returns [ 1774486211, 2479577218 ]\n*/\nfunction toWords( x ) {\n\treturn fcn( x, [ 0>>>0, 0>>>0 ], 1, 0 );\n}\n\n\n// EXPORTS //\n\nexport default toWords;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Split a double-precision floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).\n*\n* @module @stdlib/number-float64-base-to-words\n*\n* @example\n* import toWords from '@stdlib/number-float64-base-to-words';\n*\n* var w = toWords( 3.14e201 );\n* // returns [ 1774486211, 2479577218 ]\n*\n* @example\n* import Uint32Array from '@stdlib/array-uint32';\n* import toWords from '@stdlib/number-float64-base-to-words';\n*\n* var out = new Uint32Array( 2 );\n*\n* var w = toWords.assign( 3.14e201, out, 1, 0 );\n* // returns <Uint32Array>[ 1774486211, 2479577218 ]\n*\n* var bool = ( w === out );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport SIGN_MASK from '@stdlib/constants-float64-high-word-sign-mask';\nimport ABS_MASK from '@stdlib/constants-float64-high-word-abs-mask';\nimport toWords from '@stdlib/number-float64-base-to-words';\nimport getHighWord from '@stdlib/number-float64-base-get-high-word';\nimport fromWords from '@stdlib/number-float64-base-from-words';\n\n\n// VARIABLES //\n\n// High/low words workspace:\nvar WORDS = [ 0, 0 ];\n\n\n// MAIN //\n\n/**\n* Returns a double-precision floating-point number with the magnitude of `x` and the sign of `y`.\n*\n* @param {number} x - number from which to derive a magnitude\n* @param {number} y - number from which to derive a sign\n* @returns {number} a double-precision floating-point number\n*\n* @example\n* var z = copysign( -3.14, 10.0 );\n* // returns 3.14\n*\n* @example\n* var z = copysign( 3.14, -1.0 );\n* // returns -3.14\n*\n* @example\n* var z = copysign( 1.0, -0.0 );\n* // returns -1.0\n*\n* @example\n* var z = copysign( -3.14, -0.0 );\n* // returns -3.14\n*\n* @example\n* var z = copysign( -0.0, 1.0 );\n* // returns 0.0\n*/\nfunction copysign( x, y ) {\n\tvar hx;\n\tvar hy;\n\n\t// Split `x` into higher and lower order words:\n\ttoWords.assign( x, WORDS, 1, 0 );\n\thx = WORDS[ 0 ];\n\n\t// Turn off the sign bit of `x`:\n\thx &= ABS_MASK;\n\n\t// Extract the higher order word from `y`:\n\thy = getHighWord( y );\n\n\t// Leave only the sign bit of `y` turned on:\n\thy &= SIGN_MASK;\n\n\t// Copy the sign bit of `y` to `x`:\n\thx |= hy;\n\n\t// Return a new value having the same magnitude as `x`, but with the sign of `y`:\n\treturn fromWords( hx, WORDS[ 1 ] );\n}\n\n\n// EXPORTS //\n\nexport default copysign;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* High word mask for the sign bit of a double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-high-word-sign-mask\n* @type {uinteger32}\n*\n* @example\n* import FLOAT64_HIGH_WORD_SIGN_MASK from '@stdlib/constants-float64-high-word-sign-mask';\n* // returns 2147483648\n*/\n\n\n// MAIN //\n\n/**\n* High word mask for the sign bit of a double-precision floating-point number.\n*\n* ## Notes\n*\n* The high word mask for the sign bit of a double-precision floating-point number is an unsigned 32-bit integer with the value \\\\( 2147483648 \\\\), which corresponds to the bit sequence\n*\n* ```binarystring\n* 1 00000000000 00000000000000000000\n* ```\n*\n* @constant\n* @type {uinteger32}\n* @default 0x80000000\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_HIGH_WORD_SIGN_MASK = 0x80000000>>>0; // eslint-disable-line id-length\n\n\n// EXPORTS //\n\nexport default FLOAT64_HIGH_WORD_SIGN_MASK;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport FLOAT64_SMALLEST_NORMAL from '@stdlib/constants-float64-smallest-normal';\nimport isInfinite from '@stdlib/math-base-assert-is-infinite';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport abs from '@stdlib/math-base-special-abs';\n\n\n// VARIABLES //\n\n// (1<<52)\nvar SCALAR = 4503599627370496;\n\n\n// MAIN //\n\n/**\n* Returns a normal number `y` and exponent `exp` satisfying \\\\(x = y \\cdot 2^\\mathrm{exp}\\\\) and assigns results to a provided output array.\n*\n* @param {number} x - input value\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {Collection} output array\n*\n* @example\n* import pow from '@stdlib/math-base-special-pow';\n*\n* var out = normalize( 3.14e-319, [ 0.0, 0 ], 1, 0 );\n* // returns [ 1.4141234400356668e-303, -52 ]\n*\n* var y = out[ 0 ];\n* var exp = out[ 1 ];\n*\n* var bool = ( y*pow(2.0,exp) === 3.14e-319 );\n* // returns true\n*\n* @example\n* var out = normalize( 0.0, [ 0.0, 0 ], 1, 0 );\n* // returns [ 0.0, 0 ];\n*\n* @example\n* import PINF from '@stdlib/constants-float64-pinf';\n*\n* var out = normalize( PINF, [ 0.0, 0 ], 1, 0 );\n* // returns [ Infinity, 0 ]\n*\n* @example\n* import NINF from '@stdlib/constants-float64-ninf';\n*\n* var out = normalize( NINF, [ 0.0, 0 ], 1, 0 );\n* // returns [ -Infinity, 0 ]\n*\n* @example\n* var out = normalize( NaN, [ 0.0, 0 ], 1, 0 );\n* // returns [ NaN, 0 ]\n*/\nfunction normalize( x, out, stride, offset ) {\n\tif ( isnan( x ) || isInfinite( x ) ) {\n\t\tout[ offset ] = x;\n\t\tout[ offset + stride ] = 0;\n\t\treturn out;\n\t}\n\tif ( x !== 0.0 && abs( x ) < FLOAT64_SMALLEST_NORMAL ) {\n\t\tout[ offset ] = x * SCALAR;\n\t\tout[ offset + stride ] = -52;\n\t\treturn out;\n\t}\n\tout[ offset ] = x;\n\tout[ offset + stride ] = 0;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default normalize;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Smallest positive double-precision floating-point normal number.\n*\n* @module @stdlib/constants-float64-smallest-normal\n* @type {number}\n*\n* @example\n* import FLOAT64_SMALLEST_NORMAL from '@stdlib/constants-float64-smallest-normal';\n* // returns 2.2250738585072014e-308\n*/\n\n\n// MAIN //\n\n/**\n* The smallest positive double-precision floating-point normal number.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* \\frac{1}{2^{1023-1}}\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 0 00000000001 00000000000000000000 00000000000000000000000000000000\n* ```\n*\n* @constant\n* @type {number}\n* @default 2.2250738585072014e-308\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_SMALLEST_NORMAL = 2.2250738585072014e-308;\n\n\n// EXPORTS //\n\nexport default FLOAT64_SMALLEST_NORMAL;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a normal number `y` and exponent `exp` satisfying \\\\(x = y \\cdot 2^\\mathrm{exp}\\\\).\n*\n* @module @stdlib/number-float64-base-normalize\n*\n* @example\n* import normalize from '@stdlib/number-float64-base-normalize';\n* import pow from '@stdlib/math-base-special-pow';\n*\n* var out = normalize( 3.14e-319 );\n* // returns [ 1.4141234400356668e-303, -52 ]\n*\n* var y = out[ 0 ];\n* var exp = out[ 1 ];\n*\n* var bool = ( y*pow(2.0, exp) === 3.14e-319 );\n* // returns true\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import normalize from '@stdlib/number-float64-base-normalize';\n*\n* var out = new Float64Array( 2 );\n*\n* var v = normalize.assign( 3.14e-319, out, 1, 0 );\n* // returns <Float64Array>[ 1.4141234400356668e-303, -52 ]\n*\n* var bool = ( v === out );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport fcn from './assign.js';\n\n\n// MAIN //\n\n/**\n* Returns a normal number `y` and exponent `exp` satisfying \\\\(x = y \\cdot 2^\\mathrm{exp}\\\\).\n*\n* @param {number} x - input value\n* @returns {NumberArray} output array\n*\n* @example\n* import pow from '@stdlib/math-base-special-pow';\n*\n* var out = normalize( 3.14e-319 );\n* // returns [ 1.4141234400356668e-303, -52 ]\n*\n* var y = out[ 0 ];\n* var exp = out[ 1 ];\n*\n* var bool = ( y*pow(2.0,exp) === 3.14e-319 );\n* // returns true\n*\n* @example\n* var out = normalize( 0.0 );\n* // returns [ 0.0, 0 ]\n*\n* @example\n* import PINF from '@stdlib/constants-float64-pinf';\n*\n* var out = normalize( PINF );\n* // returns [ Infinity, 0 ]\n*\n* @example\n* import NINF from '@stdlib/constants-float64-ninf';\n*\n* var out = normalize( NINF );\n* // returns [ -Infinity, 0 ]\n*\n* @example\n* var out = normalize( NaN );\n* // returns [ NaN, 0 ]\n*/\nfunction normalize( x ) {\n\treturn fcn( x, [ 0.0, 0 ], 1, 0 );\n}\n\n\n// EXPORTS //\n\nexport default normalize;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// NOTES //\n\n/*\n* => ldexp: load exponent (see [The Open Group]{@link http://pubs.opengroup.org/onlinepubs/9699919799/functions/ldexp.html} and [cppreference]{@link http://en.cppreference.com/w/c/numeric/math/ldexp}).\n*/\n\n\n// MODULES //\n\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport BIAS from '@stdlib/constants-float64-exponent-bias';\nimport MAX_EXPONENT from '@stdlib/constants-float64-max-base2-exponent';\nimport MAX_SUBNORMAL_EXPONENT from '@stdlib/constants-float64-max-base2-exponent-subnormal';\nimport MIN_SUBNORMAL_EXPONENT from '@stdlib/constants-float64-min-base2-exponent-subnormal';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInfinite from '@stdlib/math-base-assert-is-infinite';\nimport copysign from '@stdlib/math-base-special-copysign';\nimport { assign as normalize } from '@stdlib/number-float64-base-normalize';\nimport floatExp from '@stdlib/number-float64-base-exponent';\nimport toWords from '@stdlib/number-float64-base-to-words';\nimport fromWords from '@stdlib/number-float64-base-from-words';\n\n\n// VARIABLES //\n\n// 1/(1<<52) = 1/(2**52) = 1/4503599627370496\nvar TWO52_INV = 2.220446049250313e-16;\n\n// Exponent all 0s: 1 00000000000 11111111111111111111 => 2148532223\nvar CLEAR_EXP_MASK = 0x800fffff>>>0; // asm type annotation\n\n// Normalization workspace:\nvar FRAC = [ 0.0, 0.0 ];\n\n// High/low words workspace:\nvar WORDS = [ 0, 0 ];\n\n\n// MAIN //\n\n/**\n* Multiplies a double-precision floating-point number by an integer power of two.\n*\n* @param {number} frac - fraction\n* @param {integer} exp - exponent\n* @returns {number} double-precision floating-point number\n*\n* @example\n* var x = ldexp( 0.5, 3 ); // => 0.5 * 2^3 = 0.5 * 8\n* // returns 4.0\n*\n* @example\n* var x = ldexp( 4.0, -2 ); // => 4 * 2^(-2) = 4 * (1/4)\n* // returns 1.0\n*\n* @example\n* var x = ldexp( 0.0, 20 );\n* // returns 0.0\n*\n* @example\n* var x = ldexp( -0.0, 39 );\n* // returns -0.0\n*\n* @example\n* var x = ldexp( NaN, -101 );\n* // returns NaN\n*\n* @example\n* var x = ldexp( Infinity, 11 );\n* // returns Infinity\n*\n* @example\n* var x = ldexp( -Infinity, -118 );\n* // returns -Infinity\n*/\nfunction ldexp( frac, exp ) {\n\tvar high;\n\tvar m;\n\tif (\n\t\texp === 0 ||\n\t\tfrac === 0.0 || // handles +-0\n\t\tisnan( frac ) ||\n\t\tisInfinite( frac )\n\t) {\n\t\treturn frac;\n\t}\n\t// Normalize the input fraction:\n\tnormalize( frac, FRAC, 1, 0 );\n\tfrac = FRAC[ 0 ];\n\texp += FRAC[ 1 ];\n\n\t// Extract the exponent from `frac` and add it to `exp`:\n\texp += floatExp( frac );\n\n\t// Check for underflow/overflow...\n\tif ( exp < MIN_SUBNORMAL_EXPONENT ) {\n\t\treturn copysign( 0.0, frac );\n\t}\n\tif ( exp > MAX_EXPONENT ) {\n\t\tif ( frac < 0.0 ) {\n\t\t\treturn NINF;\n\t\t}\n\t\treturn PINF;\n\t}\n\t// Check for a subnormal and scale accordingly to retain precision...\n\tif ( exp <= MAX_SUBNORMAL_EXPONENT ) {\n\t\texp += 52;\n\t\tm = TWO52_INV;\n\t} else {\n\t\tm = 1.0;\n\t}\n\t// Split the fraction into higher and lower order words:\n\ttoWords.assign( frac, WORDS, 1, 0 );\n\thigh = WORDS[ 0 ];\n\n\t// Clear the exponent bits within the higher order word:\n\thigh &= CLEAR_EXP_MASK;\n\n\t// Set the exponent bits to the new exponent:\n\thigh |= ((exp+BIAS) << 20);\n\n\t// Create a new floating-point number:\n\treturn m * fromWords( high, WORDS[ 1 ] );\n}\n\n\n// EXPORTS //\n\nexport default ldexp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport getHighWord from '@stdlib/number-float64-base-get-high-word';\nimport EXP_MASK from '@stdlib/constants-float64-high-word-exponent-mask';\nimport BIAS from '@stdlib/constants-float64-exponent-bias';\n\n\n// MAIN //\n\n/**\n* Returns an integer corresponding to the unbiased exponent of a double-precision floating-point number.\n*\n* @param {number} x - input value\n* @returns {integer32} unbiased exponent\n*\n* @example\n* var exp = exponent( 3.14e-307 ); // => 2**-1019 ~ 1e-307\n* // returns -1019\n*\n* @example\n* var exp = exponent( -3.14 );\n* // returns 1\n*\n* @example\n* var exp = exponent( 0.0 );\n* // returns -1023\n*\n* @example\n* var exp = exponent( NaN );\n* // returns 1024\n*/\nfunction exponent( x ) {\n\t// Extract from the input value a higher order word (unsigned 32-bit integer) which contains the exponent:\n\tvar high = getHighWord( x );\n\n\t// Apply a mask to isolate only the exponent bits and then shift off all bits which are part of the fraction:\n\thigh = ( high & EXP_MASK ) >>> 20;\n\n\t// Remove the bias and return:\n\treturn (high - BIAS)|0; // asm type annotation\n}\n\n\n// EXPORTS //\n\nexport default exponent;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* High word mask for the exponent of a double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-high-word-exponent-mask\n* @type {uinteger32}\n*\n* @example\n* import FLOAT64_HIGH_WORD_EXPONENT_MASK from '@stdlib/constants-float64-high-word-exponent-mask';\n* // returns 2146435072\n*/\n\n\n// MAIN //\n\n/**\n* High word mask for the exponent of a double-precision floating-point number.\n*\n* ## Notes\n*\n* The high word mask for the exponent of a double-precision floating-point number is an unsigned 32-bit integer with the value \\\\( 2146435072 \\\\), which corresponds to the bit sequence\n*\n* ```binarystring\n* 0 11111111111 00000000000000000000\n* ```\n*\n* @constant\n* @type {uinteger32}\n* @default 0x7ff00000\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_HIGH_WORD_EXPONENT_MASK = 0x7ff00000;\n\n\n// EXPORTS //\n\nexport default FLOAT64_HIGH_WORD_EXPONENT_MASK;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The minimum biased base 2 exponent for a subnormal double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-min-base2-exponent-subnormal\n* @type {integer32}\n*\n* @example\n* import FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL from '@stdlib/constants-float64-min-base2-exponent-subnormal';\n* // returns -1074\n*/\n\n\n// MAIN //\n\n/**\n* The minimum biased base 2 exponent for a subnormal double-precision floating-point number.\n*\n* ```text\n* -(BIAS+(52-1)) = -(1023+51) = -1074\n* ```\n*\n* where `BIAS = 1023` and `52` is the number of digits in the significand.\n*\n* @constant\n* @type {integer32}\n* @default -1074\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL = -1074|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The maximum biased base 2 exponent for a subnormal double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-max-base2-exponent-subnormal\n* @type {integer32}\n*\n* @example\n* import FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL from '@stdlib/constants-float64-max-base2-exponent-subnormal';\n* // returns -1023\n*/\n\n\n// MAIN //\n\n/**\n* The maximum biased base 2 exponent for a subnormal double-precision floating-point number.\n*\n* ```text\n* 00000000000 => 0 - BIAS = -1023\n* ```\n*\n* where `BIAS = 1023`.\n*\n* @constant\n* @type {integer32}\n* @default -1023\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL = -1023|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport filled from '@stdlib/array-base-filled';\n\n\n// MAIN //\n\n/**\n* Returns a zero-filled \"generic\" array.\n*\n* @param {NonNegativeInteger} len - array length\n* @returns {Array} output array\n*\n* @example\n* var out = zeros( 3 );\n* // returns [ 0.0, 0.0, 0.0 ]\n*/\nfunction zeros( len ) {\n\treturn filled( 0.0, len );\n}\n\n\n// EXPORTS //\n\nexport default zeros;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns a filled \"generic\" array.\n*\n* @param {*} value - fill value\n* @param {NonNegativeInteger} len - array length\n* @returns {Array} filled array\n*\n* @example\n* var out = filled( 0.0, 3 );\n* // returns [ 0.0, 0.0, 0.0 ]\n*\n* @example\n* var out = filled( 'beep', 3 );\n* // returns [ 'beep', 'beep', 'beep' ]\n*/\nfunction filled( value, len ) {\n\tvar arr;\n\tvar i;\n\n\t// Manually push elements in order to ensure \"fast\" elements...\n\tarr = [];\n\tfor ( i = 0; i < len; i++ ) {\n\t\tarr.push( value );\n\t}\n\treturn arr;\n}\n\n\n// EXPORTS //\n\nexport default filled;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_rem_pio2.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n/* eslint-disable array-element-newline */\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math-base-special-floor';\nimport ldexp from '@stdlib/math-base-special-ldexp';\nimport zeros from '@stdlib/array-base-zeros';\n\n\n// VARIABLES //\n\n/*\n* Table of constants for `2/π` (`396` hex digits, `476` decimal).\n*\n* Integer array which contains the (`24*i`)-th to (`24*i+23`)-th bit of `2/π` after binary point. The corresponding floating value is\n*\n* ```tex\n* \\operatorname{ipio2}[i] \\cdot 2^{-24(i+1)}\n* ```\n*\n* This table must have at least `(e0-3)/24 + jk` terms. For quad precision (`e0 <= 16360`, `jk = 6`), this is `686`.\n*/\nvar IPIO2 = [\n\t0xA2F983, 0x6E4E44, 0x1529FC, 0x2757D1, 0xF534DD, 0xC0DB62,\n\t0x95993C, 0x439041, 0xFE5163, 0xABDEBB, 0xC561B7, 0x246E3A,\n\t0x424DD2, 0xE00649, 0x2EEA09, 0xD1921C, 0xFE1DEB, 0x1CB129,\n\t0xA73EE8, 0x8235F5, 0x2EBB44, 0x84E99C, 0x7026B4, 0x5F7E41,\n\t0x3991D6, 0x398353, 0x39F49C, 0x845F8B, 0xBDF928, 0x3B1FF8,\n\t0x97FFDE, 0x05980F, 0xEF2F11, 0x8B5A0A, 0x6D1F6D, 0x367ECF,\n\t0x27CB09, 0xB74F46, 0x3F669E, 0x5FEA2D, 0x7527BA, 0xC7EBE5,\n\t0xF17B3D, 0x0739F7, 0x8A5292, 0xEA6BFB, 0x5FB11F, 0x8D5D08,\n\t0x560330, 0x46FC7B, 0x6BABF0, 0xCFBC20, 0x9AF436, 0x1DA9E3,\n\t0x91615E, 0xE61B08, 0x659985, 0x5F14A0, 0x68408D, 0xFFD880,\n\t0x4D7327, 0x310606, 0x1556CA, 0x73A8C9, 0x60E27B, 0xC08C6B\n];\n\n// Double precision array, obtained by cutting `π/2` into `24` bits chunks...\nvar PIO2 = [\n\t1.57079625129699707031e+00, // 0x3FF921FB, 0x40000000\n\t7.54978941586159635335e-08, // 0x3E74442D, 0x00000000\n\t5.39030252995776476554e-15, // 0x3CF84698, 0x80000000\n\t3.28200341580791294123e-22, // 0x3B78CC51, 0x60000000\n\t1.27065575308067607349e-29, // 0x39F01B83, 0x80000000\n\t1.22933308981111328932e-36, // 0x387A2520, 0x40000000\n\t2.73370053816464559624e-44, // 0x36E38222, 0x80000000\n\t2.16741683877804819444e-51  // 0x3569F31D, 0x00000000\n];\nvar TWO24 = 1.67772160000000000000e+07;  // 0x41700000, 0x00000000\nvar TWON24 = 5.96046447753906250000e-08; // 0x3E700000, 0x00000000\n\n// Arrays for storing temporary values (note that, in C, this is not thread safe):\nvar F = zeros( 20 );\nvar Q = zeros( 20 );\nvar FQ = zeros( 20 );\nvar IQ = zeros( 20 );\n\n\n// FUNCTIONS //\n\n/**\n* Performs the computation for `kernelRempio2()`.\n*\n* @private\n* @param {PositiveNumber} x - input value\n* @param {(Array|TypedArray|Object)} y - output object for storing double precision numbers\n* @param {integer} jz - number of terms of `ipio2[]` used\n* @param {Array<integer>} q - array with integral values, representing the 24-bits chunk of the product of `x` and `2/π`\n* @param {integer} q0 - the corresponding exponent of `q[0]` (the exponent for `q[i]` would be `q0-24*i`)\n* @param {integer} jk - `jk+1` is the initial number of terms of `IPIO2[]` needed in the computation\n* @param {integer} jv - index for pointing to the suitable `ipio2[]` for the computation\n* @param {integer} jx - `nx - 1`\n* @param {Array<number>} f - `IPIO2[]` in floating point\n* @returns {number} last three binary digits of `N`\n*/\nfunction compute( x, y, jz, q, q0, jk, jv, jx, f ) {\n\tvar carry;\n\tvar fw;\n\tvar ih;\n\tvar jp;\n\tvar i;\n\tvar k;\n\tvar n;\n\tvar j;\n\tvar z;\n\n\t// `jp+1` is the number of terms in `PIO2[]` needed:\n\tjp = jk;\n\n\t// Distill `q[]` into `IQ[]` in reverse order...\n\tz = q[ jz ];\n\tj = jz;\n\tfor ( i = 0; j > 0; i++ ) {\n\t\tfw = ( TWON24 * z )|0;\n\t\tIQ[ i ] = ( z - (TWO24*fw) )|0;\n\t\tz = q[ j-1 ] + fw;\n\t\tj -= 1;\n\t}\n\t// Compute `n`...\n\tz = ldexp( z, q0 );\n\tz -= 8.0 * floor( z*0.125 ); // Trim off integer >= 8\n\tn = z|0;\n\tz -= n;\n\tih = 0;\n\tif ( q0 > 0 ) {\n\t\t// Need `IQ[jz-1]` to determine `n`...\n\t\ti = ( IQ[ jz-1 ] >> (24-q0) );\n\t\tn += i;\n\t\tIQ[ jz-1 ] -= ( i << (24-q0) );\n\t\tih = ( IQ[ jz-1 ] >> (23-q0) );\n\t}\n\telse if ( q0 === 0 ) {\n\t\tih = ( IQ[ jz-1 ] >> 23 );\n\t}\n\telse if ( z >= 0.5 ) {\n\t\tih = 2;\n\t}\n\t// Case: q > 0.5\n\tif ( ih > 0 ) {\n\t\tn += 1;\n\t\tcarry = 0;\n\n\t\t// Compute `1-q`:\n\t\tfor ( i = 0; i < jz; i++ ) {\n\t\t\tj = IQ[ i ];\n\t\t\tif ( carry === 0 ) {\n\t\t\t\tif ( j !== 0 ) {\n\t\t\t\t\tcarry = 1;\n\t\t\t\t\tIQ[ i ] = 0x1000000 - j;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tIQ[ i ] = 0xffffff - j;\n\t\t\t}\n\t\t}\n\t\tif ( q0 > 0 ) {\n\t\t\t// Rare case: chance is 1 in 12...\n\t\t\tswitch ( q0 ) { // eslint-disable-line default-case\n\t\t\tcase 1:\n\t\t\t\tIQ[ jz-1 ] &= 0x7fffff;\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tIQ[ jz-1 ] &= 0x3fffff;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ( ih === 2 ) {\n\t\t\tz = 1.0 - z;\n\t\t\tif ( carry !== 0 ) {\n\t\t\t\tz -= ldexp( 1.0, q0 );\n\t\t\t}\n\t\t}\n\t}\n\t// Check if re-computation is needed...\n\tif ( z === 0.0 ) {\n\t\tj = 0;\n\t\tfor ( i = jz-1; i >= jk; i-- ) {\n\t\t\tj |= IQ[ i ];\n\t\t}\n\t\tif ( j === 0 ) {\n\t\t\t// Need re-computation...\n\t\t\tfor ( k = 1; IQ[ jk-k ] === 0; k++ ) {\n\t\t\t\t// `k` is the number of terms needed...\n\t\t\t}\n\t\t\tfor ( i = jz+1; i <= jz+k; i++ ) {\n\t\t\t\t// Add `q[jz+1]` to `q[jz+k]`...\n\t\t\t\tf[ jx+i ] = IPIO2[ jv+i ];\n\t\t\t\tfw = 0.0;\n\t\t\t\tfor ( j = 0; j <= jx; j++ ) {\n\t\t\t\t\tfw += x[ j ] * f[ jx + (i-j) ];\n\t\t\t\t}\n\t\t\t\tq[ i ] = fw;\n\t\t\t}\n\t\t\tjz += k;\n\t\t\treturn compute( x, y, jz, q, q0, jk, jv, jx, f );\n\t\t}\n\t}\n\t// Chop off zero terms...\n\tif ( z === 0.0 ) {\n\t\tjz -= 1;\n\t\tq0 -= 24;\n\t\twhile ( IQ[ jz ] === 0 ) {\n\t\t\tjz -= 1;\n\t\t\tq0 -= 24;\n\t\t}\n\t} else {\n\t\t// Break `z` into 24-bit if necessary...\n\t\tz = ldexp( z, -q0 );\n\t\tif ( z >= TWO24 ) {\n\t\t\tfw = (TWON24*z)|0;\n\t\t\tIQ[ jz ] = ( z - (TWO24*fw) )|0;\n\t\t\tjz += 1;\n\t\t\tq0 += 24;\n\t\t\tIQ[ jz ] = fw;\n\t\t} else {\n\t\t\tIQ[ jz ] = z|0;\n\t\t}\n\t}\n\t// Convert integer \"bit\" chunk to floating-point value...\n\tfw = ldexp( 1.0, q0 );\n\tfor ( i = jz; i >= 0; i-- ) {\n\t\tq[ i ] = fw * IQ[i];\n\t\tfw *= TWON24;\n\t}\n\t// Compute `PIO2[0,...,jp]*q[jz,...,0]`...\n\tfor ( i = jz; i >= 0; i-- ) {\n\t\tfw = 0.0;\n\t\tfor ( k = 0; k <= jp && k <= jz-i; k++ ) {\n\t\t\tfw += PIO2[ k ] * q[ i+k ];\n\t\t}\n\t\tFQ[ jz-i ] = fw;\n\t}\n\t// Compress `FQ[]` into `y[]`...\n\tfw = 0.0;\n\tfor ( i = jz; i >= 0; i-- ) {\n\t\tfw += FQ[ i ];\n\t}\n\tif ( ih === 0 ) {\n\t\ty[ 0 ] = fw;\n\t} else {\n\t\ty[ 0 ] = -fw;\n\t}\n\tfw = FQ[ 0 ] - fw;\n\tfor ( i = 1; i <= jz; i++ ) {\n\t\tfw += FQ[i];\n\t}\n\tif ( ih === 0 ) {\n\t\ty[ 1 ] = fw;\n\t} else {\n\t\ty[ 1 ] = -fw;\n\t}\n\treturn ( n & 7 );\n}\n\n\n// MAIN //\n\n/**\n* Returns the last three binary digits of `N` with `y = x - Nπ/2` so that `|y| < π/2`.\n*\n* ## Method\n*\n* -   The method is to compute the integer (`mod 8`) and fraction parts of `2x/π` without doing the full multiplication. In general, we skip the part of the product that is known to be a huge integer (more accurately, equals `0 mod 8` ). Thus, the number of operations is independent of the exponent of the input.\n*\n* @private\n* @param {PositiveNumber} x - input value\n* @param {(Array|TypedArray|Object)} y - remainder elements\n* @param {PositiveInteger} e0 - the exponent of `x[0]` (must be <= 16360)\n* @param {PositiveInteger} nx - dimension of `x[]`\n* @returns {number} last three binary digits of `N`\n*/\nfunction kernelRempio2( x, y, e0, nx ) {\n\tvar fw;\n\tvar jk;\n\tvar jv;\n\tvar jx;\n\tvar jz;\n\tvar q0;\n\tvar i;\n\tvar j;\n\tvar m;\n\n\t// Initialize `jk` for double-precision floating-point numbers:\n\tjk = 4;\n\n\t// Determine `jx`, `jv`, `q0` (note that `q0 < 3`):\n\tjx = nx - 1;\n\tjv = ( (e0 - 3) / 24 )|0;\n\tif ( jv < 0 ) {\n\t\tjv = 0;\n\t}\n\tq0 = e0 - (24 * (jv + 1));\n\n\t// Set up `F[0]` to `F[jx+jk]` where `F[jx+jk] = IPIO2[jv+jk]`:\n\tj = jv - jx;\n\tm = jx + jk;\n\tfor ( i = 0; i <= m; i++ ) {\n\t\tif ( j < 0 ) {\n\t\t\tF[ i ] = 0.0;\n\t\t} else {\n\t\t\tF[ i ] = IPIO2[ j ];\n\t\t}\n\t\tj += 1;\n\t}\n\t// Compute `Q[0],Q[1],...,Q[jk]`:\n\tfor ( i = 0; i <= jk; i++ ) {\n\t\tfw = 0.0;\n\t\tfor ( j = 0; j <= jx; j++ ) {\n\t\t\tfw += x[ j ] * F[ jx + (i-j) ];\n\t\t}\n\t\tQ[ i ] = fw;\n\t}\n\tjz = jk;\n\treturn compute( x, y, jz, Q, q0, jk, jv, jx, F );\n}\n\n\n// EXPORTS //\n\nexport default kernelRempio2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: implementation\n\n/**\n* Rounds a numeric value to the nearest integer.\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var v = round( -4.2 );\n* // returns -4.0\n*\n* @example\n* var v = round( -4.5 );\n* // returns -4.0\n*\n* @example\n* var v = round( -4.6 );\n* // returns -5.0\n*\n* @example\n* var v = round( 9.99999 );\n* // returns 10.0\n*\n* @example\n* var v = round( 9.5 );\n* // returns 10.0\n*\n* @example\n* var v = round( 9.2 );\n* // returns 9.0\n*\n* @example\n* var v = round( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = round( -0.0 );\n* // returns -0.0\n*\n* @example\n* var v = round( Infinity );\n* // returns Infinity\n*\n* @example\n* var v = round( -Infinity );\n* // returns -Infinity\n*\n* @example\n* var v = round( NaN );\n* // returns NaN\n*/\nvar round = Math.round; // eslint-disable-line stdlib/no-builtin-math\n\n\n// EXPORTS //\n\nexport default round;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_rem_pio2.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport round from '@stdlib/math-base-special-round';\nimport getHighWord from '@stdlib/number-float64-base-get-high-word';\n\n\n// VARIABLES //\n\n// 53 bits of 2/π:\nvar INVPIO2 = 6.36619772367581382433e-01; // 0x3FE45F30, 0x6DC9C883\n\n// First 33 bits of π/2:\nvar PIO2_1 = 1.57079632673412561417e+00;  // 0x3FF921FB, 0x54400000\n\n// PIO2_1T = π/2 - PIO2_1:\nvar PIO2_1T = 6.07710050650619224932e-11; // 0x3DD0B461, 0x1A626331\n\n// Another 33 bits of π/2:\nvar PIO2_2 = 6.07710050630396597660e-11;  // 0x3DD0B461, 0x1A600000\n\n// PIO2_2T = π/2 - ( PIO2_1 + PIO2_2 ):\nvar PIO2_2T = 2.02226624879595063154e-21; // 0x3BA3198A, 0x2E037073\n\n// Another 33 bits of π/2:\nvar PIO2_3 = 2.02226624871116645580e-21;  // 0x3BA3198A, 0x2E000000\n\n// PIO2_3T = π/2 - ( PIO2_1 + PIO2_2 + PIO2_3 ):\nvar PIO2_3T = 8.47842766036889956997e-32; // 0x397B839A, 0x252049C1\n\n// Exponent mask (2047 => 0x7ff):\nvar EXPONENT_MASK = 0x7ff|0; // asm type annotation\n\n\n// MAIN //\n\n/**\n* Computes `x - nπ/2 = r` for medium-sized inputs.\n*\n* @private\n* @param {number} x - input value\n* @param {uint32} ix - high word of `x`\n* @param {(Array|TypedArray|Object)} y - remainder elements\n* @returns {integer} factor of `π/2`\n*/\nfunction rempio2Medium( x, ix, y ) {\n\tvar high;\n\tvar n;\n\tvar t;\n\tvar r;\n\tvar w;\n\tvar i;\n\tvar j;\n\n\tn = round( x * INVPIO2 );\n\tr = x - ( n * PIO2_1 );\n\tw = n * PIO2_1T;\n\n\t// First rounding (good to 85 bits)...\n\tj = (ix >> 20)|0; // asm type annotation\n\ty[ 0 ] = r - w;\n\thigh = getHighWord( y[0] );\n\ti = j - ( (high >> 20) & EXPONENT_MASK );\n\n\t// Check if a second iteration is needed (good to 118 bits)...\n\tif ( i > 16 ) {\n\t\tt = r;\n\t\tw = n * PIO2_2;\n\t\tr = t - w;\n\t\tw = (n * PIO2_2T) - ((t-r) - w);\n\t\ty[ 0 ] = r - w;\n\t\thigh = getHighWord( y[0] );\n\t\ti = j - ( (high >> 20) & EXPONENT_MASK );\n\n\t\t// Check if a third iteration is needed (151 bits accumulated)...\n\t\tif ( i > 49 ) {\n\t\t\tt = r;\n\t\t\tw = n * PIO2_3;\n\t\t\tr = t - w;\n\t\t\tw = (n * PIO2_3T) - ((t-r) - w);\n\t\t\ty[ 0 ] = r - w;\n\t\t}\n\t}\n\ty[ 1 ] = (r - y[0]) - w;\n\treturn n;\n}\n\n\n// EXPORTS //\n\nexport default rempio2Medium;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_rem_pio2.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n*\n* Optimized by Bruce D. Evans.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ABS_MASK from '@stdlib/constants-float64-high-word-abs-mask';\nimport EXPONENT_MASK from '@stdlib/constants-float64-high-word-exponent-mask';\nimport SIGNIFICAND_MASK from '@stdlib/constants-float64-high-word-significand-mask';\nimport getHighWord from '@stdlib/number-float64-base-get-high-word';\nimport getLowWord from '@stdlib/number-float64-base-get-low-word';\nimport fromWords from '@stdlib/number-float64-base-from-words';\nimport rempio2Kernel from './kernel_rempio2.js';\nimport rempio2Medium from './rempio2_medium.js';\n\n\n// VARIABLES //\n\nvar ZERO = 0.00000000000000000000e+00;    // 0x00000000, 0x00000000\nvar TWO24 = 1.67772160000000000000e+07;   // 0x41700000, 0x00000000\n\n// 33 bits of π/2:\nvar PIO2_1 = 1.57079632673412561417e+00;  // 0x3FF921FB, 0x54400000\n\n// PIO2_1T = π/2 - PIO2_1:\nvar PIO2_1T = 6.07710050650619224932e-11; // 0x3DD0B461, 0x1A626331\nvar TWO_PIO2_1T = 2.0 * PIO2_1T;\nvar THREE_PIO2_1T = 3.0 * PIO2_1T;\nvar FOUR_PIO2_1T = 4.0 * PIO2_1T;\n\n// High word significand for π and π/2: 0x921fb = 598523 => 00000000000010010010000111111011\nvar PI_HIGH_WORD_SIGNIFICAND = 0x921fb|0; // asm type annotation\n\n// High word for π/4: 0x3fe921fb = 1072243195 => 00111111111010010010000111111011\nvar PIO4_HIGH_WORD = 0x3fe921fb|0; // asm type annotation\n\n// High word for 3π/4: 0x4002d97c = 1073928572 => 01000000000000101101100101111100\nvar THREE_PIO4_HIGH_WORD = 0x4002d97c|0; // asm type annotation\n\n// High word for 5π/4: 0x400f6a7a = 1074752122 => 01000000000011110110101001111010\nvar FIVE_PIO4_HIGH_WORD = 0x400f6a7a|0; // asm type annotation\n\n// High word for 6π/4: 0x4012d97c = 1074977148 => 01000000000100101101100101111100\nvar THREE_PIO2_HIGH_WORD = 0x4012d97c|0; // asm type annotation\n\n// High word for 7π/4: 0x4015fdbc = 1075183036 => 01000000000101011111110110111100\nvar SEVEN_PIO4_HIGH_WORD = 0x4015fdbc|0; // asm type annotation\n\n// High word for 8π/4: 0x401921fb = 1075388923 => 01000000000110010010000111111011\nvar TWO_PI_HIGH_WORD = 0x401921fb|0; // asm type annotation\n\n// High word for 9π/4: 0x401c463b = 1075594811 => 01000000000111000100011000111011\nvar NINE_PIO4_HIGH_WORD = 0x401c463b|0; // asm type annotation\n\n// 2^20*π/2 = 1647099.3291652855 => 0100000100111001001000011111101101010100010001000010110100011000 => high word => 0x413921fb = 1094263291 => 01000001001110010010000111111011\nvar MEDIUM = 0x413921fb|0; // asm type annotation\n\n// Arrays for storing temporary values:\nvar TX = [ 0.0, 0.0, 0.0 ];\nvar TY = [ 0.0, 0.0 ];\n\n\n// MAIN //\n\n/**\n* Computes `x - nπ/2 = r`.\n*\n* ## Notes\n*\n* -   Returns `n` and stores the remainder `r` as two numbers `y[0]` and `y[1]`, such that `y[0]+y[1] = r`.\n*\n* @param {number} x - input value\n* @param {(Array|TypedArray|Object)} y - remainder elements\n* @returns {integer} factor of `π/2`\n*\n* @example\n* var y = [ 0.0, 0.0 ];\n* var n = rempio2( 128.0, y );\n* // returns 81\n*\n* var y1 = y[ 0 ];\n* // returns ~0.765\n*\n* var y2 = y[ 1 ];\n* // returns ~3.618e-17\n*\n* @example\n* var y = [ 0.0, 0.0 ];\n* var n = rempio2( NaN, y );\n* // returns 0\n*\n* var y1 = y[ 0 ];\n* // returns NaN\n*\n* var y2 = y[ 1 ];\n* // returns NaN\n*/\nfunction rempio2( x, y ) {\n\tvar low;\n\tvar e0;\n\tvar hx;\n\tvar ix;\n\tvar nx;\n\tvar i;\n\tvar n;\n\tvar z;\n\n\thx = getHighWord( x );\n\tix = (hx & ABS_MASK)|0; // asm type annotation\n\n\t// Case: |x| ~<= π/4 (no need for reduction)\n\tif ( ix <= PIO4_HIGH_WORD ) {\n\t\ty[ 0 ] = x;\n\t\ty[ 1 ] = 0.0;\n\t\treturn 0;\n\t}\n\t// Case: |x| ~<= 5π/4\n\tif ( ix <= FIVE_PIO4_HIGH_WORD ) {\n\t\t// Case: |x| ~= π/2 or π\n\t\tif ( (ix & SIGNIFICAND_MASK) === PI_HIGH_WORD_SIGNIFICAND ) {\n\t\t\t// Cancellation => use medium case\n\t\t\treturn rempio2Medium( x, ix, y );\n\t\t}\n\t\t// Case: |x| ~<= 3π/4\n\t\tif ( ix <= THREE_PIO4_HIGH_WORD ) {\n\t\t\tif ( x > 0.0 ) {\n\t\t\t\tz = x - PIO2_1;\n\t\t\t\ty[ 0 ] = z - PIO2_1T;\n\t\t\t\ty[ 1 ] = (z - y[0]) - PIO2_1T;\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\tz = x + PIO2_1;\n\t\t\ty[ 0 ] = z + PIO2_1T;\n\t\t\ty[ 1 ] = (z - y[0]) + PIO2_1T;\n\t\t\treturn -1;\n\t\t}\n\t\tif ( x > 0.0 ) {\n\t\t\tz = x - ( 2.0*PIO2_1 );\n\t\t\ty[ 0 ] = z - TWO_PIO2_1T;\n\t\t\ty[ 1 ] = (z - y[0]) - TWO_PIO2_1T;\n\t\t\treturn 2;\n\t\t}\n\t\tz = x + ( 2.0*PIO2_1 );\n\t\ty[ 0 ] = z + TWO_PIO2_1T;\n\t\ty[ 1 ] = (z - y[0]) + TWO_PIO2_1T;\n\t\treturn -2;\n\t}\n\t// Case: |x| ~<= 9π/4\n\tif ( ix <= NINE_PIO4_HIGH_WORD ) {\n\t\t// Case: |x| ~<= 7π/4\n\t\tif ( ix <= SEVEN_PIO4_HIGH_WORD ) {\n\t\t\t// Case: |x| ~= 3π/2\n\t\t\tif ( ix === THREE_PIO2_HIGH_WORD ) {\n\t\t\t\treturn rempio2Medium( x, ix, y );\n\t\t\t}\n\t\t\tif ( x > 0.0 ) {\n\t\t\t\tz = x - ( 3.0*PIO2_1 );\n\t\t\t\ty[ 0 ] = z - THREE_PIO2_1T;\n\t\t\t\ty[ 1 ] = (z - y[0]) - THREE_PIO2_1T;\n\t\t\t\treturn 3;\n\t\t\t}\n\t\t\tz = x + ( 3.0*PIO2_1 );\n\t\t\ty[ 0 ] = z + THREE_PIO2_1T;\n\t\t\ty[ 1 ] = (z - y[0]) + THREE_PIO2_1T;\n\t\t\treturn -3;\n\t\t}\n\t\t// Case: |x| ~= 4π/2\n\t\tif ( ix === TWO_PI_HIGH_WORD ) {\n\t\t\treturn rempio2Medium( x, ix, y );\n\t\t}\n\t\tif ( x > 0.0 ) {\n\t\t\tz = x - ( 4.0*PIO2_1 );\n\t\t\ty[ 0 ] = z - FOUR_PIO2_1T;\n\t\t\ty[ 1 ] = (z - y[0]) - FOUR_PIO2_1T;\n\t\t\treturn 4;\n\t\t}\n\t\tz = x + ( 4.0*PIO2_1 );\n\t\ty[ 0 ] = z + FOUR_PIO2_1T;\n\t\ty[ 1 ] = (z - y[0]) + FOUR_PIO2_1T;\n\t\treturn -4;\n\t}\n\t// Case: |x| ~< 2^20*π/2 (medium size)\n\tif ( ix < MEDIUM ) {\n\t\treturn rempio2Medium( x, ix, y );\n\t}\n\t// Case: x is NaN or infinity\n\tif ( ix >= EXPONENT_MASK ) {\n\t\ty[ 0 ] = NaN;\n\t\ty[ 1 ] = NaN;\n\t\treturn 0.0;\n\t}\n\t// Set z = scalbn(|x|, ilogb(x)-23)...\n\tlow = getLowWord( x );\n\te0 = (ix >> 20) - 1046; // `e0 = ilogb(z) - 23` => unbiased exponent minus 23\n\tz = fromWords( ix - ((e0 << 20)|0), low );\n\tfor ( i = 0; i < 2; i++ ) {\n\t\tTX[ i ] = z|0;\n\t\tz = (z - TX[i]) * TWO24;\n\t}\n\tTX[ 2 ] = z;\n\tnx = 3;\n\twhile ( TX[ nx-1 ] === ZERO ) {\n\t\t// Skip zero term...\n\t\tnx -= 1;\n\t}\n\tn = rempio2Kernel( TX, TY, e0, nx, 1 );\n\tif ( x < 0.0 ) {\n\t\ty[ 0 ] = -TY[ 0 ];\n\t\ty[ 1 ] = -TY[ 1 ];\n\t\treturn -n;\n\t}\n\ty[ 0 ] = TY[ 0 ];\n\ty[ 1 ] = TY[ 1 ];\n\treturn n;\n}\n\n\n// EXPORTS //\n\nexport default rempio2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* High word mask for the significand of a double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-high-word-significand-mask\n* @type {uinteger32}\n*\n* @example\n* import FLOAT64_HIGH_WORD_SIGNIFICAND_MASK from '@stdlib/constants-float64-high-word-significand-mask';\n* // returns 1048575\n*/\n\n\n// MAIN //\n\n/**\n* High word mask for the significand of a double-precision floating-point number.\n*\n* ## Notes\n*\n* The high word mask for the significand of a double-precision floating-point number is an unsigned 32-bit integer with the value \\\\( 1048575 \\\\), which corresponds to the bit sequence\n*\n* ```binarystring\n* 0 00000000000 11111111111111111111\n* ```\n*\n* @constant\n* @type {uinteger32}\n* @default 0x000fffff\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_HIGH_WORD_SIGNIFICAND_MASK = 0x000fffff;\n\n\n// EXPORTS //\n\nexport default FLOAT64_HIGH_WORD_SIGNIFICAND_MASK;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_cos.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport getHighWord from '@stdlib/number-float64-base-get-high-word';\nimport kernelCos from '@stdlib/math-base-special-kernel-cos';\nimport kernelSin from '@stdlib/math-base-special-kernel-sin';\nimport rempio2 from '@stdlib/math-base-special-rempio2';\n\n\n// VARIABLES //\n\n// Scratch array for storing temporary values:\nvar buffer = [ 0.0, 0.0 ]; // WARNING: not thread safe\n\n// High word absolute value mask: 0x7fffffff => 01111111111111111111111111111111\nvar HIGH_WORD_ABS_MASK = 0x7fffffff|0; // asm type annotation\n\n// High word of π/4: 0x3fe921fb => 00111111111010010010000111111011\nvar HIGH_WORD_PIO4 = 0x3fe921fb|0; // asm type annotation\n\n// High word of 2^-27: 0x3e400000 => 00111110010000000000000000000000\nvar HIGH_WORD_TWO_NEG_27 = 0x3e400000|0; // asm type annotation\n\n// High word exponent mask: 0x7ff00000 => 01111111111100000000000000000000\nvar HIGH_WORD_EXPONENT_MASK = 0x7ff00000|0; // asm type annotation\n\n\n// MAIN //\n\n/**\n* Computes the cosine of a number.\n*\n* @param {number} x - input value (in radians)\n* @returns {number} cosine\n*\n* @example\n* var v = cos( 0.0 );\n* // returns 1.0\n*\n* @example\n* var v = cos( 3.141592653589793/4.0 );\n* // returns ~0.707\n*\n* @example\n* var v = cos( -3.141592653589793/6.0 );\n* // returns ~0.866\n*\n* @example\n* var v = cos( NaN );\n* // returns NaN\n*/\nfunction cos( x ) {\n\tvar ix;\n\tvar n;\n\n\tix = getHighWord( x );\n\tix &= HIGH_WORD_ABS_MASK;\n\n\t// Case: |x| ~< pi/4\n\tif ( ix <= HIGH_WORD_PIO4 ) {\n\t\t// Case: x < 2**-27\n\t\tif ( ix < HIGH_WORD_TWO_NEG_27 ) {\n\t\t\treturn 1.0;\n\t\t}\n\t\treturn kernelCos( x, 0.0 );\n\t}\n\t// Case: cos(Inf or NaN) is NaN */\n\tif ( ix >= HIGH_WORD_EXPONENT_MASK ) {\n\t\treturn NaN;\n\t}\n\t// Case: Argument reduction needed...\n\tn = rempio2( x, buffer );\n\tswitch ( n & 3 ) {\n\tcase 0:\n\t\treturn kernelCos( buffer[ 0 ], buffer[ 1 ] );\n\tcase 1:\n\t\treturn -kernelSin( buffer[ 0 ], buffer[ 1 ] );\n\tcase 2:\n\t\treturn -kernelCos( buffer[ 0 ], buffer[ 1 ] );\n\tdefault:\n\t\treturn kernelSin( buffer[ 0 ], buffer[ 1 ] );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default cos;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_sin.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ABS_MASK from '@stdlib/constants-float64-high-word-abs-mask';\nimport EXPONENT_MASK from '@stdlib/constants-float64-high-word-exponent-mask';\nimport getHighWord from '@stdlib/number-float64-base-get-high-word';\nimport kernelCos from '@stdlib/math-base-special-kernel-cos';\nimport kernelSin from '@stdlib/math-base-special-kernel-sin';\nimport rempio2 from '@stdlib/math-base-special-rempio2';\n\n\n// VARIABLES //\n\n// High word for PI/4: 0x3fe921fb = 1072243195 => 00111111111010010010000111111011\nvar PIO4_HIGH_WORD = 0x3fe921fb|0; // asm type annotation\n\n// 2^-26 = 1.4901161193847656e-8 => 0011111001010000000000000000000000000000000000000000000000000000 => high word => 00111110010100000000000000000000 => 0x3e500000 = 1045430272\nvar SMALL_HIGH_WORD = 0x3e500000|0; // asm type annotation\n\n// Array for storing remainder elements:\nvar Y = [ 0.0, 0.0 ];\n\n\n// MAIN //\n\n/**\n* Computes the sine of a number.\n*\n* ## Method\n*\n* -   Let \\\\(S\\\\), \\\\(C\\\\), and \\\\(T\\\\) denote the \\\\(\\sin\\\\), \\\\(\\cos\\\\), and \\\\(\\tan\\\\), respectively, on \\\\(\\[-\\pi/4, +\\pi/4\\]\\\\).\n*\n* -   Reduce the argument \\\\(x\\\\) to \\\\(y1+y2 = x-k\\pi/2\\\\) in \\\\(\\[-\\pi/4, +\\pi/4\\]\\\\), and let \\\\(n = k \\mod 4\\\\).\n*\n* -   We have\n*\n*     | n | sin(x) | cos(x) | tan(x) |\n*     | - | ------ | ------ | ------ |\n*     | 0 |   S    |   C    |    T   |\n*     | 1 |   C    |  -S    |  -1/T  |\n*     | 2 |  -S    |  -C    |    T   |\n*     | 3 |  -C    |   S    |  -1/T  |\n*\n* @param {number} x - input value (in radians)\n* @returns {number} sine\n*\n* @example\n* var v = sin( 0.0 );\n* // returns ~0.0\n*\n* @example\n* var v = sin( 3.141592653589793/2.0 );\n* // returns ~1.0\n*\n* @example\n* var v = sin( -3.141592653589793/6.0 );\n* // returns ~-0.5\n*\n* @example\n* var v = sin( NaN );\n* // returns NaN\n*/\nfunction sin( x ) {\n\tvar ix;\n\tvar n;\n\n\tix = getHighWord( x );\n\tix &= ABS_MASK;\n\n\t// Case: |x| ~< π/4\n\tif ( ix <= PIO4_HIGH_WORD ) {\n\t\t// Case: |x| ~< 2^-26\n\t\tif ( ix < SMALL_HIGH_WORD ) {\n\t\t\treturn x;\n\t\t}\n\t\treturn kernelSin( x, 0.0 );\n\t}\n\t// Case: x is NaN or infinity\n\tif ( ix >= EXPONENT_MASK ) {\n\t\treturn NaN;\n\t}\n\t// Argument reduction...\n\tn = rempio2( x, Y );\n\tswitch ( n & 3 ) {\n\tcase 0:\n\t\treturn kernelSin( Y[ 0 ], Y[ 1 ] );\n\tcase 1:\n\t\treturn kernelCos( Y[ 0 ], Y[ 1 ] );\n\tcase 2:\n\t\treturn -kernelSin( Y[ 0 ], Y[ 1 ] );\n\tdefault:\n\t\treturn -kernelCos( Y[ 0 ], Y[ 1 ] );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default sin;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The mathematical constant `π`.\n*\n* @module @stdlib/constants-float64-pi\n* @type {number}\n*\n* @example\n* import PI from '@stdlib/constants-float64-pi';\n* // returns 3.141592653589793\n*/\n\n\n// MAIN //\n\n/**\n* The mathematical constant `π`.\n*\n* @constant\n* @type {number}\n* @default 3.141592653589793\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}\n*/\nvar PI = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679; // eslint-disable-line max-len\n\n\n// EXPORTS //\n\nexport default PI;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* Notes:\n*\t=> sin(-x) = -sin(x)\n*\t=> sin(+n) = +0, where `n` is a positive integer\n*\t=> sin(-n) = -sin(+n) = -0, where `n` is a positive integer\n*\t=> cos(-x) = cos(x)\n*/\n\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInfinite from '@stdlib/math-base-assert-is-infinite';\nimport cos from '@stdlib/math-base-special-cos';\nimport sin from '@stdlib/math-base-special-sin';\nimport abs from '@stdlib/math-base-special-abs';\nimport copysign from '@stdlib/math-base-special-copysign';\nimport PI from '@stdlib/constants-float64-pi';\n\n\n// MAIN //\n\n/**\n* Computes the value of `sin(πx)`.\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var y = sinpi( 0.0 );\n* // returns 0.0\n*\n* @example\n* var y = sinpi( 0.5 );\n* // returns 1.0\n*\n* @example\n* var y = sinpi( 0.9 );\n* // returns ~0.309\n*\n* @example\n* var y = sinpi( NaN );\n* // returns NaN\n*/\nfunction sinpi( x ) {\n\tvar ar;\n\tvar r;\n\tif ( isnan( x ) ) {\n\t\treturn NaN;\n\t}\n\tif ( isInfinite( x ) ) {\n\t\treturn NaN;\n\t}\n\t// Argument reduction (reduce to [0,2))...\n\tr = x % 2.0; // sign preserving\n\tar = abs( r );\n\n\t// If `x` is an integer, the mod is an integer...\n\tif ( ar === 0.0 || ar === 1.0 ) {\n\t\treturn copysign( 0.0, r );\n\t}\n\tif ( ar < 0.25 ) {\n\t\treturn sin( PI*r );\n\t}\n\t// In each of the following, we further reduce to [-π/4,π/4)...\n\tif ( ar < 0.75 ) {\n\t\tar = 0.5 - ar;\n\t\treturn copysign( cos( PI*ar ), r );\n\t}\n\tif ( ar < 1.25 ) {\n\t\tr = copysign( 1.0, r ) - r;\n\t\treturn sin( PI*r );\n\t}\n\tif ( ar < 1.75 ) {\n\t\tar -= 1.5;\n\t\treturn -copysign( cos( PI*ar ), r );\n\t}\n\tr -= copysign( 2.0, r );\n\treturn sin( PI*r );\n}\n\n\n// EXPORTS //\n\nexport default sinpi;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_lgamma_r.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInfinite from '@stdlib/math-base-assert-is-infinite';\nimport abs from '@stdlib/math-base-special-abs';\nimport ln from '@stdlib/math-base-special-ln';\nimport trunc from '@stdlib/math-base-special-trunc';\nimport sinpi from '@stdlib/math-base-special-sinpi';\nimport PI from '@stdlib/constants-float64-pi';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport polyvalA1 from './polyval_a1.js';\nimport polyvalA2 from './polyval_a2.js';\nimport polyvalR from './polyval_r.js';\nimport polyvalS from './polyval_s.js';\nimport polyvalT1 from './polyval_t1.js';\nimport polyvalT2 from './polyval_t2.js';\nimport polyvalT3 from './polyval_t3.js';\nimport polyvalU from './polyval_u.js';\nimport polyvalV from './polyval_v.js';\nimport polyvalW from './polyval_w.js';\n\n\n// VARIABLES //\n\nvar A1C = 7.72156649015328655494e-02; // 0x3FB3C467E37DB0C8\nvar A2C = 3.22467033424113591611e-01; // 0x3FD4A34CC4A60FAD\nvar RC = 1.0;\nvar SC = -7.72156649015328655494e-02; // 0xBFB3C467E37DB0C8\nvar T1C = 4.83836122723810047042e-01; // 0x3FDEF72BC8EE38A2\nvar T2C = -1.47587722994593911752e-01; // 0xBFC2E4278DC6C509\nvar T3C = 6.46249402391333854778e-02; // 0x3FB08B4294D5419B\nvar UC = -7.72156649015328655494e-02; // 0xBFB3C467E37DB0C8\nvar VC = 1.0;\nvar WC = 4.18938533204672725052e-01; // 0x3FDACFE390C97D69\nvar YMIN = 1.461632144968362245;\nvar TWO52 = 4503599627370496; // 2**52\nvar TWO58 = 288230376151711744; // 2**58\nvar TINY = 8.470329472543003e-22;\nvar TC = 1.46163214496836224576e+00; // 0x3FF762D86356BE3F\nvar TF = -1.21486290535849611461e-01; // 0xBFBF19B9BCC38A42\nvar TT = -3.63867699703950536541e-18; // 0xBC50C7CAA48A971F => TT = -(tail of TF)\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of the gamma function.\n*\n* ## Method\n*\n* 1.  Argument reduction for \\\\(0 < x \\leq 8\\\\). Since \\\\(\\Gamma(1+s) = s \\Gamma(s)\\\\), for \\\\(x \\in \\[0,8]\\\\), we may reduce \\\\(x\\\\) to a number in \\\\(\\[1.5,2.5]\\\\) by\n*\n*     ```tex\n*     \\operatorname{lgamma}(1+s) = \\ln(s) + \\operatorname{lgamma}(s)\n*     ```\n*\n*     For example,\n*\n*     ```tex\n*     \\begin{align*}\n*     \\operatorname{lgamma}(7.3) &= \\ln(6.3) + \\operatorname{lgamma}(6.3) \\\\\n*     &= \\ln(6.3 \\cdot 5.3) + \\operatorname{lgamma}(5.3) \\\\\n*     &= \\ln(6.3 \\cdot 5.3 \\cdot 4.3 \\cdot 3.3 \\cdot2.3) + \\operatorname{lgamma}(2.3)\n*     \\end{align*}\n*     ```\n*\n* 2.  Compute a polynomial approximation of \\\\(\\mathrm{lgamma}\\\\) around its minimum (\\\\(\\mathrm{ymin} = 1.461632144968362245\\\\)) to maintain monotonicity. On the interval \\\\(\\[\\mathrm{ymin} - 0.23, \\mathrm{ymin} + 0.27]\\\\) (i.e., \\\\(\\[1.23164,1.73163]\\\\)), we let \\\\(z = x - \\mathrm{ymin}\\\\) and use\n*\n*     ```tex\n*     \\operatorname{lgamma}(x) = -1.214862905358496078218 + z^2 \\cdot \\operatorname{poly}(z)\n*     ```\n*\n*     where \\\\(\\operatorname{poly}(z)\\\\) is a \\\\(14\\\\) degree polynomial.\n*\n* 3.  Compute a rational approximation in the primary interval \\\\(\\[2,3]\\\\). Let \\\\( s = x - 2.0 \\\\). We can thus use the approximation\n*\n*     ```tex\n*     \\operatorname{lgamma}(x) = \\frac{s}{2} + s\\frac{\\operatorname{P}(s)}{\\operatorname{Q}(s)}\n*     ```\n*\n*     with accuracy\n*\n*     ```tex\n*     \\biggl|\\frac{\\mathrm{P}}{\\mathrm{Q}} - \\biggr(\\operatorname{lgamma}(x)-\\frac{s}{2}\\biggl)\\biggl| < 2^{-61.71}\n*     ```\n*\n*     The algorithms are based on the observation\n*\n*     ```tex\n*     \\operatorname{lgamma}(2+s) = s(1 - \\gamma) + \\frac{\\zeta(2) - 1}{2} s^2 - \\frac{\\zeta(3) - 1}{3} s^3 + \\ldots\n*     ```\n*\n*     where \\\\(\\zeta\\\\) is the zeta function and \\\\(\\gamma = 0.5772156649...\\\\) is the Euler-Mascheroni constant, which is very close to \\\\(0.5\\\\).\n*\n* 4.  For \\\\(x \\geq 8\\\\),\n*\n*     ```tex\n*     \\operatorname{lgamma}(x) \\approx \\biggl(x-\\frac{1}{2}\\biggr) \\ln(x) - x + \\frac{\\ln(2\\pi)}{2} + \\frac{1}{12x} - \\frac{1}{360x^3} + \\ldots\n*     ```\n*\n*     which can be expressed\n*\n*     ```tex\n*     \\operatorname{lgamma}(x) \\approx \\biggl(x-\\frac{1}{2}\\biggr)(\\ln(x)-1)-\\frac{\\ln(2\\pi)-1}{2} + \\ldots\n*     ```\n*\n*     Let \\\\(z = \\frac{1}{x}\\\\). We can then use the approximation\n*\n*     ```tex\n*     f(z) = \\operatorname{lgamma}(x) - \\biggl(x-\\frac{1}{2}\\biggr)(\\ln(x)-1)\n*     ```\n*\n*     by\n*\n*     ```tex\n*     w = w_0 + w_1 z + w_2 z^3 + w_3 z^5 + \\ldots + w_6 z^{11}\n*     ```\n*\n*     where\n*\n*     ```tex\n*     |w - f(z)| < 2^{-58.74}\n*     ```\n*\n* 5.  For negative \\\\(x\\\\), since\n*\n*     ```tex\n*     -x \\Gamma(-x) \\Gamma(x) = \\frac{\\pi}{\\sin(\\pi x)}\n*     ```\n*\n*     where \\\\(\\Gamma\\\\) is the gamma function, we have\n*\n*     ```tex\n*     \\Gamma(x) = \\frac{\\pi}{\\sin(\\pi x)(-x)\\Gamma(-x)}\n*     ```\n*\n*     Since \\\\(\\Gamma(-x)\\\\) is positive,\n*\n*     ```tex\n*     \\operatorname{sign}(\\Gamma(x)) = \\operatorname{sign}(\\sin(\\pi x))\n*     ```\n*\n*     for \\\\(x < 0\\\\). Hence, for \\\\(x < 0\\\\),\n*\n*     ```tex\n*     \\mathrm{signgam} = \\operatorname{sign}(\\sin(\\pi x))\n*     ```\n*\n*     and\n*\n*     ```tex\n*     \\begin{align*}\n*     \\operatorname{lgamma}(x) &= \\ln(|\\Gamma(x)|) \\\\\n*     &= \\ln\\biggl(\\frac{\\pi}{|x \\sin(\\pi x)|}\\biggr) - \\operatorname{lgamma}(-x)\n*     \\end{align*}\n*     ```\n*\n*     <!-- <note> -->\n*\n*     Note that one should avoid computing \\\\(\\pi (-x)\\\\) directly in the computation of \\\\(\\sin(\\pi (-x))\\\\).\n*\n*     <!-- </note> -->\n*\n* ## Special Cases\n*\n* ```tex\n* \\begin{align*}\n* \\operatorname{lgamma}(2+s) &\\approx s (1-\\gamma) & \\mathrm{for\\ tiny\\ s} \\\\\n* \\operatorname{lgamma}(x) &\\approx -\\ln(x) & \\mathrm{for\\ tiny\\ x} \\\\\n* \\operatorname{lgamma}(1) &= 0 & \\\\\n* \\operatorname{lgamma}(2) &= 0 & \\\\\n* \\operatorname{lgamma}(0) &= \\infty & \\\\\n* \\operatorname{lgamma}(\\infty) &= \\infty & \\\\\n* \\operatorname{lgamma}(-\\mathrm{integer}) &= \\pm \\infty\n* \\end{align*}\n* ```\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var v = gammaln( 1.0 );\n* // returns 0.0\n*\n* @example\n* var v = gammaln( 2.0 );\n* // returns 0.0\n*\n* @example\n* var v = gammaln( 4.0 );\n* // returns ~1.792\n*\n* @example\n* var v = gammaln( -0.5 );\n* // returns ~1.266\n*\n* @example\n* var v = gammaln( 0.5 );\n* // returns ~0.572\n*\n* @example\n* var v = gammaln( 0.0 );\n* // returns Infinity\n*\n* @example\n* var v = gammaln( NaN );\n* // returns NaN\n*/\nfunction gammaln( x ) {\n\tvar isNegative;\n\tvar nadj;\n\tvar flg;\n\tvar p3;\n\tvar p2;\n\tvar p1;\n\tvar p;\n\tvar q;\n\tvar t;\n\tvar w;\n\tvar y;\n\tvar z;\n\tvar r;\n\n\t// Special cases: NaN, +-infinity\n\tif ( isnan( x ) || isInfinite( x ) ) {\n\t\treturn x;\n\t}\n\t// Special case: 0\n\tif ( x === 0.0 ) {\n\t\treturn PINF;\n\t}\n\tif ( x < 0.0 ) {\n\t\tisNegative = true;\n\t\tx = -x;\n\t} else {\n\t\tisNegative = false;\n\t}\n\t// If |x| < 2**-70, return -ln(|x|)\n\tif ( x < TINY ) {\n\t\treturn -ln( x );\n\t}\n\tif ( isNegative ) {\n\t\t// If |x| >= 2**52, must be -integer\n\t\tif ( x >= TWO52 ) {\n\t\t\treturn PINF;\n\t\t}\n\t\tt = sinpi( x );\n\t\tif ( t === 0.0 ) {\n\t\t\treturn PINF;\n\t\t}\n\t\tnadj = ln( PI / abs( t*x ) );\n\t}\n\t// If x equals 1 or 2, return 0\n\tif ( x === 1.0 || x === 2.0 ) {\n\t\treturn 0.0;\n\t}\n\t// If x < 2, use lgamma(x) = lgamma(x+1) - log(x)\n\tif ( x < 2.0 ) {\n\t\tif ( x <= 0.9 ) {\n\t\t\tr = -ln( x );\n\n\t\t\t// 0.7316 <= x <=  0.9\n\t\t\tif ( x >= ( YMIN - 1.0 + 0.27 ) ) {\n\t\t\t\ty = 1.0 - x;\n\t\t\t\tflg = 0;\n\t\t\t}\n\t\t\t// 0.2316 <= x < 0.7316\n\t\t\telse if ( x >= (YMIN - 1.0 - 0.27) ) {\n\t\t\t\ty = x - (TC - 1.0);\n\t\t\t\tflg = 1;\n\t\t\t}\n\t\t\t// 0 < x < 0.2316\n\t\t\telse {\n\t\t\t\ty = x;\n\t\t\t\tflg = 2;\n\t\t\t}\n\t\t} else {\n\t\t\tr = 0.0;\n\n\t\t\t// 1.7316 <= x < 2\n\t\t\tif ( x >= (YMIN + 0.27) ) {\n\t\t\t\ty = 2.0 - x;\n\t\t\t\tflg = 0;\n\t\t\t}\n\t\t\t// 1.2316 <= x < 1.7316\n\t\t\telse if ( x >= (YMIN - 0.27) ) {\n\t\t\t\ty = x - TC;\n\t\t\t\tflg = 1;\n\t\t\t}\n\t\t\t// 0.9 < x < 1.2316\n\t\t\telse {\n\t\t\t\ty = x - 1.0;\n\t\t\t\tflg = 2;\n\t\t\t}\n\t\t}\n\t\tswitch ( flg ) { // eslint-disable-line default-case\n\t\tcase 0:\n\t\t\tz = y * y;\n\t\t\tp1 = A1C + (z*polyvalA1( z ));\n\t\t\tp2 = z * (A2C + (z*polyvalA2( z )));\n\t\t\tp = (y*p1) + p2;\n\t\t\tr += ( p - (0.5*y) );\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tz = y * y;\n\t\t\tw = z * y;\n\t\t\tp1 = T1C + (w*polyvalT1( w ));\n\t\t\tp2 = T2C + (w*polyvalT2( w ));\n\t\t\tp3 = T3C + (w*polyvalT3( w ));\n\t\t\tp = (z*p1) - (TT - (w*(p2+(y*p3))));\n\t\t\tr += ( TF + p );\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tp1 = y * (UC + (y*polyvalU( y )));\n\t\t\tp2 = VC + (y*polyvalV( y ));\n\t\t\tr += (-0.5*y) + (p1/p2);\n\t\t\tbreak;\n\t\t}\n\t}\n\t// 2 <= x < 8\n\telse if ( x < 8.0 ) {\n\t\tflg = trunc( x );\n\t\ty = x - flg;\n\t\tp = y * (SC + (y*polyvalS( y )));\n\t\tq = RC + (y*polyvalR( y ));\n\t\tr = (0.5*y) + (p/q);\n\t\tz = 1.0; // gammaln(1+s) = ln(s) + gammaln(s)\n\t\tswitch ( flg ) { // eslint-disable-line default-case\n\t\tcase 7:\n\t\t\tz *= y + 6.0;\n\n\t\t\t/* Falls through */\n\t\tcase 6:\n\t\t\tz *= y + 5.0;\n\n\t\t\t/* Falls through */\n\t\tcase 5:\n\t\t\tz *= y + 4.0;\n\n\t\t\t/* Falls through */\n\t\tcase 4:\n\t\t\tz *= y + 3.0;\n\n\t\t\t/* Falls through */\n\t\tcase 3:\n\t\t\tz *= y + 2.0;\n\t\t\tr += ln( z );\n\t\t}\n\t}\n\t// 8 <= x < 2**58\n\telse if ( x < TWO58 ) {\n\t\tt = ln( x );\n\t\tz = 1.0 / x;\n\t\ty = z * z;\n\t\tw = WC + (z*polyvalW( y ));\n\t\tr = ((x-0.5)*(t-1.0)) + w;\n\t}\n\t// 2**58 <= x <= Inf\n\telse {\n\t\tr = x * ( ln(x)-1.0 );\n\t}\n\tif ( isNegative ) {\n\t\tr = nadj - r;\n\t}\n\treturn r;\n}\n\n\n// EXPORTS //\n\nexport default gammaln;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.06735230105312927;\n\t}\n\treturn 0.06735230105312927 + (x * (0.007385550860814029 + (x * (0.0011927076318336207 + (x * (0.00022086279071390839 + (x * 0.000025214456545125733))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.020580808432516733;\n\t}\n\treturn 0.020580808432516733 + (x * (0.0028905138367341563 + (x * (0.0005100697921535113 + (x * (0.00010801156724758394 + (x * 0.000044864094961891516))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -0.032788541075985965;\n\t}\n\treturn -0.032788541075985965 + (x * (0.006100538702462913 + (x * (-0.0014034646998923284 + (x * 0.00031563207090362595))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.01797067508118204;\n\t}\n\treturn 0.01797067508118204 + (x * (-0.0036845201678113826 + (x * (0.000881081882437654 + (x * -0.00031275416837512086))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -0.010314224129834144;\n\t}\n\treturn -0.010314224129834144 + (x * (0.0022596478090061247 + (x * (-0.0005385953053567405 + (x * 0.0003355291926355191))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.6328270640250934;\n\t}\n\treturn 0.6328270640250934 + (x * (1.4549225013723477 + (x * (0.9777175279633727 + (x * (0.22896372806469245 + (x * 0.013381091853678766))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 2.4559779371304113;\n\t}\n\treturn 2.4559779371304113 + (x * (2.128489763798934 + (x * (0.7692851504566728 + (x * (0.10422264559336913 + (x * 0.003217092422824239))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.21498241596060885;\n\t}\n\treturn 0.21498241596060885 + (x * (0.325778796408931 + (x * (0.14635047265246445 + (x * (0.02664227030336386 + (x * (0.0018402845140733772 + (x * 0.00003194753265841009))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 1.3920053346762105;\n\t}\n\treturn 1.3920053346762105 + (x * (0.7219355475671381 + (x * (0.17193386563280308 + (x * (0.01864591917156529 + (x * (0.0007779424963818936 + (x * 0.000007326684307446256))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.08333333333333297;\n\t}\n\treturn 0.08333333333333297 + (x * (-0.0027777777772877554 + (x * (0.0007936505586430196 + (x * (-0.00059518755745034 + (x * (0.0008363399189962821 + (x * -0.0016309293409657527))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright, license, and long comment were part of the original implementation available as part of [FDLIBM]{@link http://www.netlib.org/fdlibm/s_log1p.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport getHighWord from '@stdlib/number-float64-base-get-high-word';\nimport setHighWord from '@stdlib/number-float64-base-set-high-word';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport FLOAT64_EXPONENT_BIAS from '@stdlib/constants-float64-exponent-bias';\nimport polyval from './polyval_lp.js';\n\n\n// VARIABLES //\n\n// High and low words of ln(2):\nvar LN2_HI = 6.93147180369123816490e-01; // 0x3fe62e42 0xfee00000\nvar LN2_LO = 1.90821492927058770002e-10; // 0x3dea39ef 0x35793c76\n\n// sqrt(2)-1:\nvar SQRT2M1 = 4.142135623730950488017e-01; // 0x3fda8279 0x99fcef34\n\n// sqrt(2)/2-1:\nvar SQRT2HALFM1 = -2.928932188134524755992e-01; // 0xbfd2bec3 0x33018866\n\n// 2**-29:\nvar SMALL = 1.862645149230957e-09; // 0x3e200000 0x00000000\n\n// 2**-54:\nvar TINY = 5.551115123125783e-17;\n\n// Max integer (unsafe) => 2**53:\nvar TWO53 = 9007199254740992;\n\n// 2/3:\nvar TWO_THIRDS = 6.666666666666666666e-01;\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of \\\\(1+x\\\\).\n*\n* ## Method\n*\n* 1.  Argument Reduction: find \\\\(k\\\\) and \\\\(f\\\\) such that\n*\n*     ```tex\n*     1+x = 2^k (1+f)\n*     ```\n*\n*     where\n*\n*     ```tex\n*     \\frac{\\sqrt{2}}{2} < 1+f < \\sqrt{2}\n*     ```\n*\n*     <!-- <note> -->\n*\n*     If \\\\(k=0\\\\), then \\\\(f=x\\\\) is exact. However, if \\\\(k \\neq 0\\\\), then \\\\(f\\\\) may not be representable exactly. In that case, a correction term is needed. Let\n*\n*     ```tex\n*     u = \\operatorname{round}(1+x)\n*     ```\n*\n*     and\n*\n*     ```tex\n*     c = (1+x) - u\n*     ```\n*\n*     then\n*\n*     ```tex\n*     \\ln (1+x) - \\ln u \\approx \\frac{c}{u}\n*     ```\n*\n*     We can thus proceed to compute \\\\(\\ln(u)\\\\), and add back the correction term \\\\(c/u\\\\).\n*\n*     <!-- </note> -->\n*\n*     <!-- <note> -->\n*\n*     When \\\\(x > 2^{53}\\\\), one can simply return \\\\(\\ln(x)\\\\).\n*\n*     <!-- </note> -->\n*\n* 2.  Approximation of \\\\(\\operatorname{log1p}(f)\\\\). Let\n*\n*     ```tex\n*     s = \\frac{f}{2+f}\n*     ```\n*\n*     based on\n*\n*     ```tex\n*     \\begin{align*}\n*     \\ln 1+f &= \\ln (1+s) - \\ln (1-s) \\\\\n*             &= 2s + \\frac{2}{3} s^3 + \\frac{2}{5} s^5 + ... \\\\\n*             &= 2s + sR \\\\\n*     \\end{align*}\n*     ```\n*\n*     We use a special Reme algorithm on \\\\(\\[0,0.1716\\]\\\\) to generate a polynomial of degree \\\\(14\\\\) to approximate \\\\(R\\\\). The maximum error of this polynomial approximation is bounded by \\\\(2^{-58.45}\\\\). In other words,\n*\n*     ```tex\n*     R(z) \\approx \\mathrm{Lp}_1 s^2 + \\mathrm{Lp}_2 s^4 + \\mathrm{Lp}_3 s^6 + \\mathrm{Lp}_4 s^8 + \\mathrm{Lp}_5 s^{10} + \\mathrm{Lp}_6 s^{12} + \\mathrm{Lp}_7 s^{14}\n*     ```\n*\n*     and\n*\n*     ```tex\n*     | \\mathrm{Lp}_1 s^2 + \\ldots + \\mathrm{Lp}_7 s^14 - R(z) | \\leq 2^{-58.45}\n*     ```\n*\n*     <!-- <note> -->\n*\n*     The values of \\\\(Lp1\\\\) to \\\\(Lp7\\\\) may be found in the source.\n*\n*     <!-- </note> -->\n*\n*     Note that\n*\n*     ```tex\n*     \\begin{align*}\n*     2s &= f - sf \\\\\n*        &= f - \\frac{f^2}{2} + s \\frac{f^2}{2} \\\\\n*     \\end{align*}\n*     ```\n*\n*     In order to guarantee error in \\\\(\\ln\\\\) below \\\\(1\\ \\mathrm{ulp}\\\\), we compute the log by\n*\n*     ```tex\n*     \\operatorname{log1p}(f) = f - \\biggl(\\frac{f^2}{2} - s\\biggl(\\frac{f^2}{2}+R\\biggr)\\biggr)\n*     ```\n*\n* 3.  Finally,\n*\n*     ```tex\n*     \\begin{align*}\n*     \\operatorname{log1p}(x) &= k \\cdot \\mathrm{ln2} + \\operatorname{log1p}(f) \\\\\n*     &= k \\cdot \\mathrm{ln2}_{hi}+\\biggl(f-\\biggl(\\frac{f^2}{2}-\\biggl(s\\biggl(\\frac{f^2}{2}+R\\biggr)+k \\cdot \\mathrm{ln2}_{lo}\\biggr)\\biggr)\\biggr) \\\\\n*     \\end{align*}\n*     ```\n*\n*     Here \\\\(\\mathrm{ln2}\\\\) is split into two floating point numbers:\n*\n*     ```tex\n*     \\mathrm{ln2}_{hi} + \\mathrm{ln2}_{lo}\n*     ```\n*\n*     where \\\\(n \\cdot \\mathrm{ln2}_{hi}\\\\) is always exact for \\\\(|n| < 2000\\\\).\n*\n* ## Special Cases\n*\n* -   \\\\(\\operatorname{log1p}(x) = \\mathrm{NaN}\\\\) with signal if \\\\(x < -1\\\\) (including \\\\(-\\infty\\\\))\n* -   \\\\(\\operatorname{log1p}(+\\infty) = +\\infty\\\\)\n* -   \\\\(\\operatorname{log1p}(-1) = -\\infty\\\\) with signal\n* -   \\\\(\\operatorname{log1p}(\\mathrm{NaN})= \\mathrm{NaN}\\\\) with no signal\n*\n* ## Notes\n*\n* -   According to an error analysis, the error is always less than \\\\(1\\\\) ulp (unit in the last place).\n*\n* -   The hexadecimal values are the intended ones for the used constants. The decimal values may be used, provided that the compiler will convert from decimal to binary accurately enough to produce the hexadecimal values shown.\n*\n* -   Assuming \\\\(\\ln(x)\\\\) is accurate, the following algorithm can be used to evaluate \\\\(\\operatorname{log1p}(x)\\\\) to within a few ULP:\n*\n*     ```javascript\n*     var u = 1.0 + x;\n*     if ( u === 1.0 ) {\n*         return x;\n*     } else {\n*         return ln(u) * (x/(u-1.0));\n*     }\n*     ```\n*\n*     See HP-15C Advanced Functions Handbook, p.193.\n*\n* @param {number} x - input value\n* @returns {number} the natural logarithm of `1+x`\n*\n* @example\n* var v = log1p( 4.0 );\n* // returns ~1.609\n*\n* @example\n* var v = log1p( -1.0 );\n* // returns -Infinity\n*\n* @example\n* var v = log1p( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = log1p( -0.0 );\n* // returns -0.0\n*\n* @example\n* var v = log1p( -2.0 );\n* // returns NaN\n*\n* @example\n* var v = log1p( NaN );\n* // returns NaN\n*/\nfunction log1p( x ) {\n\tvar hfsq;\n\tvar hu;\n\tvar y;\n\tvar f;\n\tvar c;\n\tvar s;\n\tvar z;\n\tvar R;\n\tvar u;\n\tvar k;\n\n\tif ( x < -1.0 || isnan( x ) ) {\n\t\treturn NaN;\n\t}\n\tif ( x === -1.0 ) {\n\t\treturn NINF;\n\t}\n\tif ( x === PINF ) {\n\t\treturn x;\n\t}\n\tif ( x === 0.0 ) {\n\t\treturn x; // handle +-0 (IEEE 754-2008 spec)\n\t}\n\t// Set y = |x|:\n\tif ( x < 0.0 ) {\n\t\ty = -x;\n\t} else {\n\t\ty = x;\n\t}\n\t// Argument reduction...\n\tk = 1;\n\n\t// Check if argument reduction is needed and if we can just return a small value approximation requiring less computation but with equivalent accuracy...\n\tif ( y < SQRT2M1 ) { // if |x| < sqrt(2)-1 => ~0.41422\n\t\tif ( y < SMALL ) { // if |x| < 2**-29\n\t\t\tif ( y < TINY ) { // if |x| < 2**-54\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Use a simple two-term Taylor series...\n\t\t\treturn x - ( x*x*0.5 );\n\t\t}\n\t\t// Check if `f=x` can be represented exactly (no need for correction terms), allowing us to bypass argument reduction...\n\t\tif ( x > SQRT2HALFM1 ) { // if x > sqrt(2)/2-1 => ~-0.2929\n\t\t\t// -0.2929 < x < 0.41422\n\t\t\tk = 0;\n\t\t\tf = x; // exact\n\t\t\thu = 1;\n\t\t}\n\t}\n\t// Address case where `f` cannot be represented exactly...\n\tif ( k !== 0 ) {\n\t\tif ( y < TWO53 ) {\n\t\t\tu = 1.0 + x;\n\t\t\thu = getHighWord( u );\n\n\t\t\t// Bit shift to isolate the exponent and then subtract the bias:\n\t\t\tk = (hu>>20) - FLOAT64_EXPONENT_BIAS;\n\n\t\t\t// Correction term...\n\t\t\tif ( k > 0 ) { // positive unbiased exponent\n\t\t\t\tc = 1.0 - (u-x);\n\t\t\t} else { // nonpositive unbiased exponent\n\t\t\t\tc = x - (u-1.0);\n\t\t\t}\n\t\t\tc /= u;\n\t\t} else {\n\t\t\tu = x;\n\t\t\thu = getHighWord( u );\n\n\t\t\t// Bit shift to isolate the exponent and then subtract the bias:\n\t\t\tk = (hu>>20) - FLOAT64_EXPONENT_BIAS;\n\n\t\t\t// Correction term is zero:\n\t\t\tc = 0;\n\t\t}\n\t\t// Apply a bit mask (0 00000000000 11111111111111111111) to remove the exponent:\n\t\thu &= 0x000fffff; // max value => 1048575\n\n\t\t// Check if u significand is less than sqrt(2) significand => 0x6a09e => 01101010000010011110\n\t\tif ( hu < 434334 ) {\n\t\t\t// Normalize u by setting the exponent to 1023 (bias) => 0x3ff00000 => 0 01111111111 00000000000000000000\n\t\t\tu = setHighWord( u, hu|0x3ff00000 );\n\t\t} else {\n\t\t\tk += 1;\n\n\t\t\t// Normalize u/2 by setting the exponent to 1022 (bias-1 => 2**-1 = 1/2) => 0x3fe00000 => 0 01111111110 00000000000000000000\n\t\t\tu = setHighWord( u, hu|0x3fe00000 );\n\n\t\t\t// Subtract hu significand from next largest hu => 0 00000000001 00000000000000000000 => 0x00100000 => 1048576\n\t\t\thu = (1048576-hu)>>2;\n\t\t}\n\t\tf = u - 1.0;\n\t}\n\t// Approximation of log1p(f)...\n\thfsq = 0.5 * f * f;\n\tif ( hu === 0 ) { // if |f| < 2**-20\n\t\tif ( f === 0.0 ) {\n\t\t\tc += k * LN2_LO;\n\t\t\treturn ( k * LN2_HI ) + c;\n\t\t}\n\t\tR = hfsq * (1.0 - ( TWO_THIRDS*f ) ); // avoid division\n\t\treturn ( k*LN2_HI ) - ( (R - ( (k*LN2_LO) + c)) - f );\n\t}\n\ts = f / (2.0 + f);\n\tz = s * s;\n\n\tR = z * polyval( z );\n\n\tif ( k === 0 ) {\n\t\treturn f - ( hfsq - ( s*(hfsq+R) ) );\n\t}\n\treturn ( k*LN2_HI ) - ( (hfsq - ( (s*(hfsq+R)) + ((k*LN2_LO) + c))) - f );\n}\n\n\n// EXPORTS //\n\nexport default log1p;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.6666666666666735;\n\t}\n\treturn 0.6666666666666735 + (x * (0.3999999999940942 + (x * (0.2857142874366239 + (x * (0.22222198432149784 + (x * (0.1818357216161805 + (x * (0.15313837699209373 + (x * 0.14798198605116586))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Tests if a double-precision floating-point numeric value is negative zero.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is negative zero\n*\n* @example\n* var bool = isNegativeZero( -0.0 );\n* // returns true\n*\n* @example\n* var bool = isNegativeZero( 0.0 );\n* // returns false\n*/\nfunction isNegativeZero( x ) {\n\treturn (x === 0.0 && 1.0/x === NINF);\n}\n\n\n// EXPORTS //\n\nexport default isNegativeZero;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isInteger from '@stdlib/math-base-assert-is-integer';\n\n\n// MAIN //\n\n/**\n* Tests if a finite numeric value is an even number.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is an even number\n*\n* @example\n* var bool = isEven( 5.0 );\n* // returns false\n*\n* @example\n* var bool = isEven( -2.0 );\n* // returns true\n*\n* @example\n* var bool = isEven( 0.0 );\n* // returns true\n*\n* @example\n* var bool = isEven( NaN );\n* // returns false\n*/\nfunction isEven( x ) {\n\treturn isInteger( x/2.0 );\n}\n\n\n// EXPORTS //\n\nexport default isEven;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isEven from '@stdlib/math-base-assert-is-even';\n\n\n// MAIN //\n\n/**\n* Tests if a finite numeric value is an odd number.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is an odd number\n*\n* @example\n* var bool = isOdd( 5.0 );\n* // returns true\n*\n* @example\n* var bool = isOdd( -2.0 );\n* // returns false\n*\n* @example\n* var bool = isOdd( 0.0 );\n* // returns false\n*\n* @example\n* var bool = isOdd( NaN );\n* // returns false\n*/\nfunction isOdd( x ) {\n\t// Check sign to prevent overflow...\n\tif ( x > 0.0 ) {\n\t\treturn isEven( x-1.0 );\n\t}\n\treturn isEven( x+1.0 );\n}\n\n\n// EXPORTS //\n\nexport default isOdd;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Compute the principal square root of a double-precision floating-point number.\n*\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} principal square root\n*\n* @example\n* var v = sqrt( 4.0 );\n* // returns 2.0\n*\n* v = sqrt( 9.0 );\n* // returns 3.0\n*\n* v = sqrt( 0.0 );\n* // returns 0.0\n*\n* v = sqrt( -4.0 );\n* // returns NaN\n*\n* v = sqrt( NaN );\n* // returns NaN\n*/\nvar sqrt = Math.sqrt; // eslint-disable-line stdlib/no-builtin-math\n\n\n// EXPORTS //\n\nexport default sqrt;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isLittleEndian from '@stdlib/assert-is-little-endian';\n\n\n// MAIN //\n\nvar LOW;\nif ( isLittleEndian === true ) {\n\tLOW = 0; // first index\n} else {\n\tLOW = 1; // second index\n}\n\n\n// EXPORTS //\n\nexport default LOW;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Uint32Array from '@stdlib/array-uint32';\nimport Float64Array from '@stdlib/array-float64';\nimport LOW from './low.js';\n\n\n// VARIABLES //\n\nvar FLOAT64_VIEW = new Float64Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );\n\n\n// MAIN //\n\n/**\n* Sets the less significant 32 bits of a double-precision floating-point number.\n*\n* ## Notes\n*\n* ```text\n* float64 (64 bits)\n* f := fraction (significand/mantissa) (52 bits)\n* e := exponent (11 bits)\n* s := sign bit (1 bit)\n*\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |                                Float64                                |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |              Uint32               |               Uint32              |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* ```\n*\n* If little endian (more significant bits last):\n*\n* ```text\n*                         <-- lower      higher -->\n* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |\n* ```\n*\n* If big endian (more significant bits first):\n*\n* ```text\n*                         <-- higher      lower -->\n* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |\n* ```\n*\n* In which Uint32 can we find the lower order bits? If little endian, the first; if big endian, the second.\n*\n* ## References\n*\n* -   [Open Group][1]\n*\n* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm\n*\n* @param {number} x - double\n* @param {uinteger32} low - unsigned 32-bit integer to replace the lower order word of `x`\n* @returns {number} double having the same higher order word as `x`\n*\n* @example\n* var low = 5 >>> 0; // => 00000000000000000000000000000101\n*\n* var x = 3.14e201; // => 0 11010011100 01001000001011000011 10010011110010110101100010000010\n*\n* var y = setLowWord( x, low ); // => 0 11010011100 01001000001011000011 00000000000000000000000000000101\n* // returns 3.139998651394392e+201\n*\n* @example\n* import PINF from '@stdlib/constants-float64-pinf';\n* import NINF from '@stdlib/constants-float64-ninf';\n*\n* var low = 12345678;\n*\n* var y = setLowWord( PINF, low );\n* // returns NaN\n*\n* y = setLowWord( NINF, low );\n* // returns NaN\n*\n* y = setLowWord( NaN, low );\n* // returns NaN\n*/\nfunction setLowWord( x, low ) {\n\tFLOAT64_VIEW[ 0 ] = x;\n\tUINT32_VIEW[ LOW ] = ( low >>> 0 ); // identity bit shift to ensure integer\n\treturn FLOAT64_VIEW[ 0 ];\n}\n\n\n// EXPORTS //\n\nexport default setLowWord;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Converts an unsigned 32-bit integer to a signed 32-bit integer.\n*\n* @param {uinteger32} x - unsigned 32-bit integer\n* @returns {integer32} signed 32-bit integer\n*\n* @example\n* import float64ToUint32 from '@stdlib/number-float64-base-to-uint32';\n* var y = uint32ToInt32( float64ToUint32( 4294967295 ) );\n* // returns -1\n*\n* @example\n* import float64ToUint32 from '@stdlib/number-float64-base-to-uint32';\n* var y = uint32ToInt32( float64ToUint32( 3 ) );\n* // returns 3\n*/\nfunction uint32ToInt32( x ) {\n\t// NOTE: we could also use typed-arrays to achieve the same end.\n\treturn x|0; // asm type annotation\n}\n\n\n// EXPORTS //\n\nexport default uint32ToInt32;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_pow.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport getHighWord from '@stdlib/number-float64-base-get-high-word';\nimport setLowWord from '@stdlib/number-float64-base-set-low-word';\nimport setHighWord from '@stdlib/number-float64-base-set-high-word';\nimport BIAS from '@stdlib/constants-float64-exponent-bias';\nimport polyvalL from './polyval_l.js';\n\n\n// VARIABLES //\n\n// 0x000fffff = 1048575 => 0 00000000000 11111111111111111111\nvar HIGH_SIGNIFICAND_MASK = 0x000fffff|0; // asm type annotation\n\n// 0x00100000 = 1048576 => 0 00000000001 00000000000000000000 => biased exponent: 1 = -1022+1023 => 2^-1022\nvar HIGH_MIN_NORMAL_EXP = 0x00100000|0; // asm type annotation\n\n// 0x3ff00000 = 1072693248 => 0 01111111111 00000000000000000000 => biased exponent: 1023 = 0+1023 => 2^0 = 1\nvar HIGH_BIASED_EXP_0 = 0x3ff00000|0; // asm type annotation\n\n// 0x20000000 = 536870912 => 0 01000000000 00000000000000000000 => biased exponent: 512 = -511+1023\nvar HIGH_BIASED_EXP_NEG_512 = 0x20000000|0; // asm type annotation\n\n// 0x00080000 = 524288 => 0 00000000000 10000000000000000000\nvar HIGH_SIGNIFICAND_HALF = 0x00080000|0; // asm type annotation\n\n// TODO: consider making an external constant\nvar HIGH_NUM_SIGNIFICAND_BITS = 20|0; // asm type annotation\n\nvar TWO53 = 9007199254740992.0;\t// 0x43400000, 0x00000000\n\n// 2/(3*LN2)\nvar CP = 9.61796693925975554329e-01; // 0x3FEEC709, 0xDC3A03FD\n\n// (float)CP\nvar CP_HI = 9.61796700954437255859e-01; // 0x3FEEC709, 0xE0000000\n\n// Low: CP_HI\nvar CP_LO = -7.02846165095275826516e-09; // 0xBE3E2FE0, 0x145B01F5\n\nvar BP = [\n\t1.0,\n\t1.5\n];\nvar DP_HI = [\n\t0.0,\n\t5.84962487220764160156e-01 // 0x3FE2B803, 0x40000000\n];\nvar DP_LO = [\n\t0.0,\n\t1.35003920212974897128e-08 // 0x3E4CFDEB, 0x43CFD006\n];\n\n\n// MAIN //\n\n/**\n* Computes \\\\(\\operatorname{log2}(ax)\\\\).\n*\n* @private\n* @param {Array} out - output array\n* @param {number} ax - absolute value of `x`\n* @param {number} ahx - high word of `ax`\n* @returns {Array} output array containing a tuple comprised of high and low parts\n*\n* @example\n* var t = log2ax( [ 0.0, 0.0 ], 9.0, 1075970048 ); // => [ t1, t2 ]\n* // returns [ 3.169923782348633, 0.0000012190936795504075 ]\n*/\nfunction log2ax( out, ax, ahx ) {\n\tvar tmp;\n\tvar ss; // `hs + ls`\n\tvar s2; // `ss` squared\n\tvar hs;\n\tvar ls;\n\tvar ht;\n\tvar lt;\n\tvar bp; // `BP` constant\n\tvar dp; // `DP` constant\n\tvar hp;\n\tvar lp;\n\tvar hz;\n\tvar lz;\n\tvar t1;\n\tvar t2;\n\tvar t;\n\tvar r;\n\tvar u;\n\tvar v;\n\tvar n;\n\tvar j;\n\tvar k;\n\n\tn = 0|0; // asm type annotation\n\n\t// Check if `x` is subnormal...\n\tif ( ahx < HIGH_MIN_NORMAL_EXP ) {\n\t\tax *= TWO53;\n\t\tn -= 53|0; // asm type annotation\n\t\tahx = getHighWord( ax );\n\t}\n\t// Extract the unbiased exponent of `x`:\n\tn += ((ahx >> HIGH_NUM_SIGNIFICAND_BITS) - BIAS)|0; // asm type annotation\n\n\t// Isolate the significand bits of `x`:\n\tj = (ahx & HIGH_SIGNIFICAND_MASK)|0; // asm type annotation\n\n\t// Normalize `ahx` by setting the (biased) exponent to `1023`:\n\tahx = (j | HIGH_BIASED_EXP_0)|0; // asm type annotation\n\n\t// Determine the interval of `|x|` by comparing significand bits...\n\n\t// |x| < sqrt(3/2)\n\tif ( j <= 0x3988E ) { // 0 00000000000 00111001100010001110\n\t\tk = 0;\n\t}\n\t// |x| < sqrt(3)\n\telse if ( j < 0xBB67A ) { // 0 00000000000 10111011011001111010\n\t\tk = 1;\n\t}\n\t// |x| >= sqrt(3)\n\telse {\n\t\tk = 0;\n\t\tn += 1|0; // asm type annotation\n\t\tahx -= HIGH_MIN_NORMAL_EXP;\n\t}\n\t// Load the normalized high word into `|x|`:\n\tax = setHighWord( ax, ahx );\n\n\t// Compute `ss = hs + ls = (x-1)/(x+1)` or `(x-1.5)/(x+1.5)`:\n\tbp = BP[ k ]; // BP[0] = 1.0, BP[1] = 1.5\n\tu = ax - bp; // (x-1) || (x-1.5)\n\tv = 1.0 / (ax + bp); // 1/(x+1) || 1/(x+1.5)\n\tss = u * v;\n\ths = setLowWord( ss, 0 ); // set all low word (less significant significand) bits to 0s\n\n\t// Compute `ht = ax + bp` (via manipulation, i.e., bit flipping, of the high word):\n\ttmp = ((ahx>>1) | HIGH_BIASED_EXP_NEG_512) + HIGH_SIGNIFICAND_HALF;\n\ttmp += (k << 18); // `(k<<18)` can be considered the word equivalent of `1.0` or `1.5`\n\tht = setHighWord( 0.0, tmp );\n\tlt = ax - (ht - bp);\n\tls = v * ( ( u - (hs*ht) ) - ( hs*lt ) );\n\n\t// Compute `log(ax)`...\n\n\ts2 = ss * ss;\n\tr = s2 * s2 * polyvalL( s2 );\n\tr += ls * (hs + ss);\n\ts2 = hs * hs;\n\tht = 3.0 + s2 + r;\n\tht = setLowWord( ht, 0 );\n\tlt = r - ((ht-3.0) - s2);\n\n\t// u+v = ss*(1+...):\n\tu = hs * ht;\n\tv = ( ls*ht ) + ( lt*ss );\n\n\t// 2/(3LN2) * (ss+...):\n\thp = u + v;\n\thp = setLowWord( hp, 0 );\n\tlp = v - (hp - u);\n\thz = CP_HI * hp; // CP_HI+CP_LO = 2/(3*LN2)\n\tlz = ( CP_LO*hp ) + ( lp*CP ) + DP_LO[ k ];\n\n\t// log2(ax) = (ss+...)*2/(3*LN2) = n + dp + hz + lz\n\tdp = DP_HI[ k ];\n\tt = n;\n\tt1 = ((hz+lz) + dp) + t; // log2(ax)\n\tt1 = setLowWord( t1, 0 );\n\tt2 = lz - (((t1-t) - dp) - hz);\n\n\tout[ 0 ] = t1;\n\tout[ 1 ] = t2;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default log2ax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_pow.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isOdd from '@stdlib/math-base-assert-is-odd';\nimport isInfinite from '@stdlib/math-base-assert-is-infinite';\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport abs from '@stdlib/math-base-special-abs';\nimport toWords from '@stdlib/number-float64-base-to-words';\nimport setLowWord from '@stdlib/number-float64-base-set-low-word';\nimport uint32ToInt32 from '@stdlib/number-uint32-base-to-int32';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport ABS_MASK from '@stdlib/constants-float64-high-word-abs-mask';\nimport xIsZero from './x_is_zero.js';\nimport yIsHuge from './y_is_huge.js';\nimport yIsInfinite from './y_is_infinite.js';\nimport log2ax from './log2ax.js';\nimport logx from './logx.js';\nimport pow2 from './pow2.js';\n\n\n// VARIABLES //\n\n// 0x3fefffff = 1072693247 => 0 01111111110 11111111111111111111 => biased exponent: 1022 = -1+1023 => 2^-1\nvar HIGH_MAX_NEAR_UNITY = 0x3fefffff|0; // asm type annotation\n\n// 0x41e00000 = 1105199104 => 0 10000011110 00000000000000000000 => biased exponent: 1054 = 31+1023 => 2^31\nvar HIGH_BIASED_EXP_31 = 0x41e00000|0; // asm type annotation\n\n// 0x43f00000 = 1139802112 => 0 10000111111 00000000000000000000 => biased exponent: 1087 = 64+1023 => 2^64\nvar HIGH_BIASED_EXP_64 = 0x43f00000|0; // asm type annotation\n\n// 0x40900000 = 1083179008 => 0 10000001001 00000000000000000000 => biased exponent: 1033 = 10+1023 => 2^10 = 1024\nvar HIGH_BIASED_EXP_10 = 0x40900000|0; // asm type annotation\n\n// 0x3ff00000 = 1072693248 => 0 01111111111 00000000000000000000 => biased exponent: 1023 = 0+1023 => 2^0 = 1\nvar HIGH_BIASED_EXP_0 = 0x3ff00000|0; // asm type annotation\n\n// 0x4090cc00 = 1083231232 => 0 10000001001 00001100110000000000\nvar HIGH_1075 = 0x4090cc00|0; // asm type annotation\n\n// 0xc090cc00 = 3230714880 => 1 10000001001 00001100110000000000\nvar HIGH_NEG_1075 = 0xc090cc00>>>0; // asm type annotation\n\nvar HIGH_NUM_NONSIGN_BITS = 31|0; // asm type annotation\n\nvar HUGE = 1.0e300;\nvar TINY = 1.0e-300;\n\n// -(1024-log2(ovfl+.5ulp))\nvar OVT = 8.0085662595372944372e-17;\n\n// High/low words workspace:\nvar WORDS = [ 0|0, 0|0 ];\n\n// Log workspace:\nvar LOG_WORKSPACE = [ 0.0, 0.0 ];\n\n\n// MAIN //\n\n/**\n* Evaluates the exponential function.\n*\n* ## Method\n*\n* 1.  Let \\\\(x = 2^n (1+f)\\\\).\n*\n* 2.  Compute \\\\(\\operatorname{log2}(x)\\\\) as\n*\n*     ```tex\n*     \\operatorname{log2}(x) = w_1 + w_2\n*     ```\n*\n*     where \\\\(w_1\\\\) has \\\\(53 - 24 = 29\\\\) bit trailing zeros.\n*\n* 3.  Compute\n*\n*     ```tex\n*     y \\cdot \\operatorname{log2}(x) = n + y^\\prime\n*     ```\n*\n*     by simulating multi-precision arithmetic, where \\\\(|y^\\prime| \\leq 0.5\\\\).\n*\n* 4.  Return\n*\n*     ```tex\n*     x^y = 2^n e^{y^\\prime \\cdot \\mathrm{log2}}\n*     ```\n*\n* ## Special Cases\n*\n* ```tex\n* \\begin{align*}\n* x^{\\mathrm{NaN}} &= \\mathrm{NaN} & \\\\\n* (\\mathrm{NaN})^y &= \\mathrm{NaN} & \\\\\n* 1^y &= 1 & \\\\\n* x^0 &= 1 & \\\\\n* x^1 &= x & \\\\\n* (\\pm 0)^\\infty &= +0 & \\\\\n* (\\pm 0)^{-\\infty} &= +\\infty & \\\\\n* (+0)^y &= +0 & \\mathrm{if}\\ y > 0 \\\\\n* (+0)^y &= +\\infty & \\mathrm{if}\\ y < 0 \\\\\n* (-0)^y &= -\\infty & \\mathrm{if}\\ y\\ \\mathrm{is\\ an\\ odd\\ integer\\ and}\\ y < 0 \\\\\n* (-0)^y &= +\\infty & \\mathrm{if}\\ y\\ \\mathrm{is\\ not\\ an\\ odd\\ integer\\ and}\\ y < 0 \\\\\n* (-0)^y &= -0 & \\mathrm{if}\\ y\\ \\mathrm{is\\ an\\ odd\\ integer\\ and}\\ y > 0 \\\\\n* (-0)^y &= +0 & \\mathrm{if}\\ y\\ \\mathrm{is\\ not\\ an\\ odd\\ integer\\ and}\\ y > 0 \\\\\n* (-1)^{\\pm\\infty} &= \\mathrm{NaN} & \\\\\n* x^{\\infty} &= +\\infty & |x| > 1 \\\\\n* x^{\\infty} &= +0 & |x| < 1 \\\\\n* x^{-\\infty} &= +0 & |x| > 1 \\\\\n* x^{-\\infty} &= +\\infty & |x| < 1 \\\\\n* (-\\infty)^y &= (-0)^y & \\\\\n* \\infty^y &= +0 & y < 0 \\\\\n* \\infty^y &= +\\infty & y > 0 \\\\\n* x^y &= \\mathrm{NaN} & \\mathrm{if}\\ y\\ \\mathrm{is\\ not\\ a\\ finite\\ integer\\ and}\\ x < 0\n* \\end{align*}\n* ```\n*\n* ## Notes\n*\n* -   \\\\(\\operatorname{pow}(x,y)\\\\) returns \\\\(x^y\\\\) nearly rounded. In particular, \\\\(\\operatorname{pow}(<\\mathrm{integer}>,<\\mathrm{integer}>)\\\\) **always** returns the correct integer, provided the value is representable.\n* -   The hexadecimal values shown in the source code are the intended values for used constants. Decimal values may be used, provided the compiler will accurately convert decimal to binary in order to produce the hexadecimal values.\n*\n* @param {number} x - base\n* @param {number} y - exponent\n* @returns {number} function value\n*\n* @example\n* var v = pow( 2.0, 3.0 );\n* // returns 8.0\n*\n* @example\n* var v = pow( 4.0, 0.5 );\n* // returns 2.0\n*\n* @example\n* var v = pow( 100.0, 0.0 );\n* // returns 1.0\n*\n* @example\n* var v = pow( 3.141592653589793, 5.0 );\n* // returns ~306.0197\n*\n* @example\n* var v = pow( 3.141592653589793, -0.2 );\n* // returns ~0.7954\n*\n* @example\n* var v = pow( NaN, 3.0 );\n* // returns NaN\n*\n* @example\n* var v = pow( 5.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = pow( NaN, NaN );\n* // returns NaN\n*/\nfunction pow( x, y ) {\n\tvar ahx; // absolute value high word `x`\n\tvar ahy; // absolute value high word `y`\n\tvar ax;  // absolute value `x`\n\tvar hx;  // high word `x`\n\tvar lx;  // low word `x`\n\tvar hy;  // high word `y`\n\tvar ly;  // low word `y`\n\tvar sx;  // sign `x`\n\tvar sy;  // sign `y`\n\tvar y1;\n\tvar hp;\n\tvar lp;\n\tvar t;\n\tvar z;   // y prime\n\tvar j;\n\tvar i;\n\tif ( isnan( x ) || isnan( y ) ) {\n\t\treturn NaN;\n\t}\n\t// Split `y` into high and low words:\n\ttoWords.assign( y, WORDS, 1, 0 );\n\thy = WORDS[ 0 ];\n\tly = WORDS[ 1 ];\n\n\t// Special cases `y`...\n\tif ( ly === 0 ) {\n\t\tif ( y === 0.0 ) {\n\t\t\treturn 1.0;\n\t\t}\n\t\tif ( y === 1.0 ) {\n\t\t\treturn x;\n\t\t}\n\t\tif ( y === -1.0 ) {\n\t\t\treturn 1.0 / x;\n\t\t}\n\t\tif ( y === 0.5 ) {\n\t\t\treturn sqrt( x );\n\t\t}\n\t\tif ( y === -0.5 ) {\n\t\t\treturn 1.0 / sqrt( x );\n\t\t}\n\t\tif ( y === 2.0 ) {\n\t\t\treturn x * x;\n\t\t}\n\t\tif ( y === 3.0 ) {\n\t\t\treturn x * x * x;\n\t\t}\n\t\tif ( y === 4.0 ) {\n\t\t\tx *= x;\n\t\t\treturn x * x;\n\t\t}\n\t\tif ( isInfinite( y ) ) {\n\t\t\treturn yIsInfinite( x, y );\n\t\t}\n\t}\n\t// Split `x` into high and low words:\n\ttoWords.assign( x, WORDS, 1, 0 );\n\thx = WORDS[ 0 ];\n\tlx = WORDS[ 1 ];\n\n\t// Special cases `x`...\n\tif ( lx === 0 ) {\n\t\tif ( hx === 0 ) {\n\t\t\treturn xIsZero( x, y );\n\t\t}\n\t\tif ( x === 1.0 ) {\n\t\t\treturn 1.0;\n\t\t}\n\t\tif (\n\t\t\tx === -1.0 &&\n\t\t\tisOdd( y )\n\t\t) {\n\t\t\treturn -1.0;\n\t\t}\n\t\tif ( isInfinite( x ) ) {\n\t\t\tif ( x === NINF ) {\n\t\t\t\t// `pow( 1/x, -y )`\n\t\t\t\treturn pow( -0.0, -y );\n\t\t\t}\n\t\t\tif ( y < 0.0 ) {\n\t\t\t\treturn 0.0;\n\t\t\t}\n\t\t\treturn PINF;\n\t\t}\n\t}\n\tif (\n\t\tx < 0.0 &&\n\t\tisInteger( y ) === false\n\t) {\n\t\t// Signal NaN...\n\t\treturn (x-x)/(x-x);\n\t}\n\tax = abs( x );\n\n\t// Remove the sign bits (i.e., get absolute values):\n\tahx = (hx & ABS_MASK)|0; // asm type annotation\n\tahy = (hy & ABS_MASK)|0; // asm type annotation\n\n\t// Extract the sign bits:\n\tsx = (hx >>> HIGH_NUM_NONSIGN_BITS)|0; // asm type annotation\n\tsy = (hy >>> HIGH_NUM_NONSIGN_BITS)|0; // asm type annotation\n\n\t// Determine the sign of the result...\n\tif ( sx && isOdd( y ) ) {\n\t\tsx = -1.0;\n\t} else {\n\t\tsx = 1.0;\n\t}\n\t// Case 1: `|y|` is huge...\n\n\t// |y| > 2^31\n\tif ( ahy > HIGH_BIASED_EXP_31 ) {\n\t\t// `|y| > 2^64`, then must over- or underflow...\n\t\tif ( ahy > HIGH_BIASED_EXP_64 ) {\n\t\t\treturn yIsHuge( x, y );\n\t\t}\n\t\t// Over- or underflow if `x` is not close to unity...\n\n\t\tif ( ahx < HIGH_MAX_NEAR_UNITY ) {\n\t\t\t// y < 0\n\t\t\tif ( sy === 1 ) {\n\t\t\t\t// Signal overflow...\n\t\t\t\treturn sx * HUGE * HUGE;\n\t\t\t}\n\t\t\t// Signal underflow...\n\t\t\treturn sx * TINY * TINY;\n\t\t}\n\t\tif ( ahx > HIGH_BIASED_EXP_0 ) {\n\t\t\t// y > 0\n\t\t\tif ( sy === 0 ) {\n\t\t\t\t// Signal overflow...\n\t\t\t\treturn sx * HUGE * HUGE;\n\t\t\t}\n\t\t\t// Signal underflow...\n\t\t\treturn sx * TINY * TINY;\n\t\t}\n\t\t// At this point, `|1-x|` is tiny (`<= 2^-20`). Suffice to compute `log(x)` by `x - x^2/2 + x^3/3 - x^4/4`.\n\t\tt = logx( LOG_WORKSPACE, ax );\n\t}\n\t// Case 2: `|y|` is not huge...\n\telse {\n\t\tt = log2ax( LOG_WORKSPACE, ax, ahx );\n\t}\n\t// Split `y` into `y1 + y2` and compute `(y1+y2) * (t1+t2)`...\n\ty1 = setLowWord( y, 0 );\n\tlp = ( (y-y1)*t[0] ) + ( y*t[1] );\n\thp = y1 * t[0];\n\tz = lp + hp;\n\n\t// Note: *can* be more performant to use `getHighWord` and `getLowWord` directly, but using `toWords` looks cleaner.\n\ttoWords.assign( z, WORDS, 1, 0 );\n\tj = uint32ToInt32( WORDS[0] );\n\ti = uint32ToInt32( WORDS[1] );\n\n\t// z >= 1024\n\tif ( j >= HIGH_BIASED_EXP_10 ) {\n\t\t// z > 1024\n\t\tif ( ((j-HIGH_BIASED_EXP_10)|i) !== 0 ) {\n\t\t\t// Signal overflow...\n\t\t\treturn sx * HUGE * HUGE;\n\t\t}\n\t\tif ( (lp+OVT) > (z-hp) ) {\n\t\t\t// Signal overflow...\n\t\t\treturn sx * HUGE * HUGE;\n\t\t}\n\t}\n\t// z <= -1075\n\telse if ( (j&ABS_MASK) >= HIGH_1075 ) {\n\t\t// z < -1075\n\t\tif ( ((j-HIGH_NEG_1075)|i) !== 0 ) {\n\t\t\t// Signal underflow...\n\t\t\treturn sx * TINY * TINY;\n\t\t}\n\t\tif ( lp <= (z-hp) ) {\n\t\t\t// Signal underflow...\n\t\t\treturn sx * TINY * TINY;\n\t\t}\n\t}\n\t// Compute `2^(hp+lp)`...\n\tz = pow2( j, hp, lp );\n\n\treturn sx * z;\n}\n\n\n// EXPORTS //\n\nexport default pow;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Evaluates the exponential function when \\\\( y = \\pm \\infty\\\\).\n*\n* @private\n* @param {number} x - base\n* @param {number} y - exponent\n* @returns {number} function value\n*\n* @example\n* var v = pow( -1.0, Infinity );\n* // returns NaN\n*\n* @example\n* var v = pow( -1.0, -Infinity  );\n* // returns NaN\n*\n* @example\n* var v = pow( 1.0, Infinity );\n* // returns 1.0\n*\n* @example\n* var v = pow( 1.0, -Infinity  );\n* // returns 1.0\n*\n* @example\n* var v = pow( 0.5, Infinity );\n* // returns 0.0\n*\n* @example\n* var v = pow( 0.5, -Infinity  );\n* // returns Infinity\n*\n* @example\n* var v = pow( 1.5, -Infinity  );\n* // returns 0.0\n*\n* @example\n* var v = pow( 1.5, Infinity );\n* // returns Infinity\n*/\nfunction pow( x, y ) {\n\tif ( x === -1.0 ) {\n\t\t// Julia (0.4.2) and Python (2.7.9) return `1.0` (WTF???). JavaScript (`Math.pow`), R, and libm return `NaN`. We choose `NaN`, as the value is indeterminate; i.e., we cannot determine whether `y` is odd, even, or somewhere in between.\n\t\treturn (x-x)/(x-x); // signal NaN\n\t}\n\tif ( x === 1.0 ) {\n\t\treturn 1.0;\n\t}\n\t// (|x| > 1 && y === NINF) || (|x| < 1 && y === PINF)\n\tif ( (abs(x) < 1.0) === (y === PINF) ) {\n\t\treturn 0.0;\n\t}\n\t// (|x| > 1 && y === PINF) || (|x| < 1 && y === NINF)\n\treturn PINF;\n}\n\n\n// EXPORTS //\n\nexport default pow;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_pow.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isOdd from '@stdlib/math-base-assert-is-odd';\nimport copysign from '@stdlib/math-base-special-copysign';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Evaluates the exponential function when \\\\(|x| = 0\\\\).\n*\n* @private\n* @param {number} x - base\n* @param {number} y - exponent\n* @returns {number} function value\n*\n* @example\n* var v = pow( 0.0, 2 );\n* // returns 0.0\n*\n* @example\n* var v = pow( -0.0, -9 );\n* // returns -Infinity\n*\n* @example\n* var v = pow( 0.0, -9 );\n* // returns Infinity\n*\n* @example\n* var v = pow( -0.0, 9 );\n* // returns 0.0\n*\n* @example\n* var v = pow( 0.0, -Infinity  );\n* // returns Infinity\n*\n* @example\n* var v = pow( 0.0, Infinity );\n* // returns 0.0\n*/\nfunction pow( x, y ) {\n\tif ( y === NINF ) {\n\t\treturn PINF;\n\t}\n\tif ( y === PINF ) {\n\t\treturn 0.0;\n\t}\n\tif ( y > 0.0 ) {\n\t\tif ( isOdd( y ) ) {\n\t\t\treturn x; // handles +-0\n\t\t}\n\t\treturn 0.0;\n\t}\n\t// y < 0.0\n\tif ( isOdd( y ) ) {\n\t\treturn copysign( PINF, x ); // handles +-0\n\t}\n\treturn PINF;\n}\n\n\n// EXPORTS //\n\nexport default pow;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_pow.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ABS_MASK from '@stdlib/constants-float64-high-word-abs-mask';\nimport getHighWord from '@stdlib/number-float64-base-get-high-word';\n\n\n// VARIABLES //\n\n// 0x3fefffff = 1072693247 => 0 01111111110 11111111111111111111 => biased exponent: 1022 = -1+1023 => 2^-1\nvar HIGH_MAX_NEAR_UNITY = 0x3fefffff|0; // asm type annotation\n\nvar HUGE = 1.0e300;\nvar TINY = 1.0e-300;\n\n\n// MAIN //\n\n/**\n* Evaluates the exponential function when \\\\(|y| > 2^64\\\\).\n*\n* @private\n* @param {number} x - base\n* @param {number} y - exponent\n* @returns {number} overflow or underflow result\n*\n* @example\n* var v = pow( 9.0, 3.6893488147419103e19 );\n* // returns Infinity\n*\n* @example\n* var v = pow( -3.14, -3.6893488147419103e19 );\n* // returns 0.0\n*/\nfunction pow( x, y ) {\n\tvar ahx;\n\tvar hx;\n\n\thx = getHighWord( x );\n\tahx = (hx & ABS_MASK);\n\n\tif ( ahx <= HIGH_MAX_NEAR_UNITY ) {\n\t\tif ( y < 0 ) {\n\t\t\t// Signal overflow...\n\t\t\treturn HUGE * HUGE;\n\t\t}\n\t\t// Signal underflow...\n\t\treturn TINY * TINY;\n\t}\n\t// `x` has a biased exponent greater than or equal to `0`...\n\n\tif ( y > 0 ) {\n\t\t// Signal overflow...\n\t\treturn HUGE * HUGE;\n\t}\n\t// Signal underflow...\n\treturn TINY * TINY;\n}\n\n\n// EXPORTS //\n\nexport default pow;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_pow.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setLowWord from '@stdlib/number-float64-base-set-low-word';\nimport polyvalW from './polyval_w.js';\n\n\n// VARIABLES //\n\n// 1/LN2\nvar INV_LN2 = 1.44269504088896338700e+00; // 0x3FF71547, 0x652B82FE\n\n// High (24 bits): 1/LN2\nvar INV_LN2_HI = 1.44269502162933349609e+00; // 0x3FF71547, 0x60000000\n\n// Low: 1/LN2\nvar INV_LN2_LO = 1.92596299112661746887e-08; // 0x3E54AE0B, 0xF85DDF44\n\n\n// MAIN //\n\n/**\n* Computes \\\\(\\operatorname{log}(x)\\\\) assuming \\\\(|1-x|\\\\) is small and using the approximation \\\\(x - x^2/2 + x^3/3 - x^4/4\\\\).\n*\n* @private\n* @param {Array} out - output array\n* @param {number} ax - absolute value of `x`\n* @returns {Array} output array containing a tuple comprised of high and low parts\n*\n* @example\n* var t = logx( [ 0.0, 0.0 ], 9.0 ); // => [ t1, t2 ]\n* // returns [ -1265.7236328125, -0.0008163940840404393 ]\n*/\nfunction logx( out, ax ) {\n\tvar t2;\n\tvar t1;\n\tvar t;\n\tvar w;\n\tvar u;\n\tvar v;\n\n\tt = ax - 1.0; // `t` has `20` trailing zeros\n\tw = t * t * polyvalW( t );\n\tu = INV_LN2_HI * t; // `INV_LN2_HI` has `21` significant bits\n\tv = ( t*INV_LN2_LO ) - ( w*INV_LN2 );\n\tt1 = u + v;\n\tt1 = setLowWord( t1, 0 );\n\tt2 = v - (t1 - u);\n\n\tout[ 0 ] = t1;\n\tout[ 1 ] = t2;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default logx;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.5;\n\t}\n\treturn 0.5 + (x * (-0.3333333333333333 + (x * 0.25)));\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.5999999999999946;\n\t}\n\treturn 0.5999999999999946 + (x * (0.4285714285785502 + (x * (0.33333332981837743 + (x * (0.272728123808534 + (x * (0.23066074577556175 + (x * 0.20697501780033842))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_pow.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport getHighWord from '@stdlib/number-float64-base-get-high-word';\nimport setHighWord from '@stdlib/number-float64-base-set-high-word';\nimport setLowWord from '@stdlib/number-float64-base-set-low-word';\nimport uint32ToInt32 from '@stdlib/number-uint32-base-to-int32';\nimport ldexp from '@stdlib/math-base-special-ldexp';\nimport LN2 from '@stdlib/constants-float64-ln-two';\nimport BIAS from '@stdlib/constants-float64-exponent-bias';\nimport ABS_MASK from '@stdlib/constants-float64-high-word-abs-mask';\nimport HIGH_SIGNIFICAND_MASK from '@stdlib/constants-float64-high-word-significand-mask';\nimport polyvalP from './polyval_p.js';\n\n\n// VARIABLES //\n\n// 0x00100000 = 1048576 => 0 00000000001 00000000000000000000 => biased exponent: 1 = -1022+1023 => 2^-1022\nvar HIGH_MIN_NORMAL_EXP = 0x00100000|0; // asm type annotation\n\n// 0x3fe00000 = 1071644672 => 0 01111111110 00000000000000000000 => biased exponent: 1022 = -1+1023 => 2^-1\nvar HIGH_BIASED_EXP_NEG_1 = 0x3fe00000|0; // asm type annotation\n\n// TODO: consider making into an external constant\nvar HIGH_NUM_SIGNIFICAND_BITS = 20|0; // asm type annotation\n\n// High: LN2\nvar LN2_HI = 6.93147182464599609375e-01; // 0x3FE62E43, 0x00000000\n\n// Low: LN2\nvar LN2_LO = -1.90465429995776804525e-09; // 0xBE205C61, 0x0CA86C39\n\n\n// MAIN //\n\n/**\n* Computes \\\\(2^{\\mathrm{hp} + \\mathrm{lp}\\\\).\n*\n* @private\n* @param {number} j - high word of `hp + lp`\n* @param {number} hp - first power summand\n* @param {number} lp - second power summand\n* @returns {number} function value\n*\n* @example\n* var z = pow2( 1065961648, -0.3398475646972656, -0.000002438187359100815 );\n* // returns ~0.79\n*/\nfunction pow2( j, hp, lp ) {\n\tvar tmp;\n\tvar t1;\n\tvar t;\n\tvar r;\n\tvar u;\n\tvar v;\n\tvar w;\n\tvar z;\n\tvar n;\n\tvar i;\n\tvar k;\n\n\ti = (j & ABS_MASK)|0; // asm type annotation\n\tk = ((i>>HIGH_NUM_SIGNIFICAND_BITS) - BIAS)|0; // asm type annotation\n\tn = 0;\n\n\t// `|z| > 0.5`, set `n = z+0.5`\n\tif ( i > HIGH_BIASED_EXP_NEG_1 ) {\n\t\tn = (j + (HIGH_MIN_NORMAL_EXP>>(k+1)))>>>0; // asm type annotation\n\t\tk = (((n & ABS_MASK)>>HIGH_NUM_SIGNIFICAND_BITS) - BIAS)|0; // new k for n\n\t\ttmp = ((n & ~(HIGH_SIGNIFICAND_MASK >> k)))>>>0; // asm type annotation\n\t\tt = setHighWord( 0.0, tmp );\n\t\tn = (((n & HIGH_SIGNIFICAND_MASK)|HIGH_MIN_NORMAL_EXP) >> (HIGH_NUM_SIGNIFICAND_BITS-k))>>>0; // eslint-disable-line max-len\n\t\tif ( j < 0 ) {\n\t\t\tn = -n;\n\t\t}\n\t\thp -= t;\n\t}\n\tt = lp + hp;\n\tt = setLowWord( t, 0 );\n\tu = t * LN2_HI;\n\tv = ( (lp - (t-hp))*LN2 ) + ( t*LN2_LO );\n\tz = u + v;\n\tw = v - (z - u);\n\tt = z * z;\n\tt1 = z - ( t*polyvalP( t ) );\n\tr = ( (z*t1) / (t1-2.0) ) - ( w + (z*w) );\n\tz = 1.0 - (r - z);\n\tj = getHighWord( z );\n\tj = uint32ToInt32( j );\n\tj += (n << HIGH_NUM_SIGNIFICAND_BITS)>>>0; // asm type annotation\n\n\t// Check for subnormal output...\n\tif ( (j>>HIGH_NUM_SIGNIFICAND_BITS) <= 0 ) {\n\t\tz = ldexp( z, n );\n\t} else {\n\t\tz = setHighWord( z, j );\n\t}\n\treturn z;\n}\n\n\n// EXPORTS //\n\nexport default pow2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.16666666666666602;\n\t}\n\treturn 0.16666666666666602 + (x * (-0.0027777777777015593 + (x * (0.00006613756321437934 + (x * (-0.0000016533902205465252 + (x * 4.1381367970572385e-8))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of `2`.\n*\n* @module @stdlib/constants-float64-ln-two\n* @type {number}\n*\n* @example\n* import LN2 from '@stdlib/constants-float64-ln-two';\n* // returns 0.6931471805599453\n*/\n\n\n// MAIN //\n\n/**\n* Natural logarithm of `2`.\n*\n* ```tex\n* \\ln 2\n* ```\n*\n* @constant\n* @type {number}\n* @default 0.6931471805599453\n*/\nvar LN2 = 6.93147180559945309417232121458176568075500134360255254120680009493393621969694715605863326996418687542001481021e-01; // eslint-disable-line max-len\n\n\n// EXPORTS //\n\nexport default LN2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyrights, licenses, and long comment were part of the original implementation available as part of [Go]{@link https://github.com/golang/go/blob/cb07765045aed5104a3df31507564ac99e6ddce8/src/math/exp.go}, which in turn was based on an implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_exp.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (c) 2009 The Go Authors. All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without\n* modification, are permitted provided that the following conditions are\n* met:\n*\n*    * Redistributions of source code must retain the above copyright\n* notice, this list of conditions and the following disclaimer.\n*    * Redistributions in binary form must reproduce the above\n* copyright notice, this list of conditions and the following disclaimer\n* in the documentation and/or other materials provided with the\n* distribution.\n*    * Neither the name of Google Inc. nor the names of its\n* contributors may be used to endorse or promote products derived from\n* this software without specific prior written permission.\n*\n* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n* \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n* A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n* OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n* ```\n*\n* ```text\n* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport trunc from '@stdlib/math-base-special-trunc';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport expmulti from './expmulti.js';\n\n\n// VARIABLES //\n\nvar LN2_HI = 6.93147180369123816490e-01;\nvar LN2_LO = 1.90821492927058770002e-10;\nvar LOG2_E = 1.44269504088896338700e+00;\nvar OVERFLOW = 7.09782712893383973096e+02;\nvar UNDERFLOW = -7.45133219101941108420e+02;\nvar NEARZERO = 1.0 / (1 << 28); // 2^-28\nvar NEG_NEARZERO = -NEARZERO;\n\n\n// MAIN //\n\n/**\n* Evaluates the natural exponential function.\n*\n* ## Method\n*\n* 1.  We reduce \\\\( x \\\\) to an \\\\( r \\\\) so that \\\\( |r| \\leq 0.5 \\cdot \\ln(2) \\approx 0.34658 \\\\). Given \\\\( x \\\\), we find an \\\\( r \\\\) and integer \\\\( k \\\\) such that\n*\n*     ```tex\n*     \\begin{align*}\n*     x &= k \\cdot \\ln(2) + r \\\\\n*     |r| &\\leq 0.5 \\cdot \\ln(2)\n*     \\end{align*}\n*     ```\n*\n*     <!-- <note> -->\n*\n*     \\\\( r \\\\) can be represented as \\\\( r = \\mathrm{hi} - \\mathrm{lo} \\\\) for better accuracy.\n*\n*     <!-- </note> -->\n*\n* 2.  We approximate of \\\\( e^{r} \\\\) by a special rational function on the interval \\\\(\\[0,0.34658]\\\\):\n*\n*     ```tex\n*     \\begin{align*}\n*     R\\left(r^2\\right) &= r \\cdot \\frac{ e^{r}+1 }{ e^{r}-1 } \\\\\n*     &= 2 + \\frac{r^2}{6} - \\frac{r^4}{360} + \\ldots\n*     \\end{align*}\n*     ```\n*\n*     We use a special Remes algorithm on \\\\(\\[0,0.34658]\\\\) to generate a polynomial of degree \\\\(5\\\\) to approximate \\\\(R\\\\). The maximum error of this polynomial approximation is bounded by \\\\(2^{-59}\\\\). In other words,\n*\n*     ```tex\n*     R(z) \\sim 2 + P_1 z + P_2 z^2 + P_3 z^3 + P_4 z^4 + P_5 z^5\n*     ```\n*\n*     where \\\\( z = r^2 \\\\) and\n*\n*     ```tex\n*     \\left|  2 + P_1 z + \\ldots + P_5 z^5  - R(z) \\right| \\leq 2^{-59}\n*     ```\n*\n*     <!-- <note> -->\n*\n*     The values of \\\\( P_1 \\\\) to \\\\( P_5 \\\\) are listed in the source code.\n*\n*     <!-- </note> -->\n*\n*     The computation of \\\\( e^{r} \\\\) thus becomes\n*\n*     ```tex\n*     \\begin{align*}\n*     e^{r} &= 1 + \\frac{2r}{R-r} \\\\\n*           &= 1 + r + \\frac{r \\cdot R_1(r)}{2 - R_1(r)}\\ \\text{for better accuracy}\n*     \\end{align*}\n*     ```\n*\n*     where\n*\n*     ```tex\n*     R_1(r) = r - P_1\\ r^2 + P_2\\ r^4 + \\ldots + P_5\\ r^{10}\n*     ```\n*\n* 3.  We scale back to obtain \\\\( e^{x} \\\\). From step 1, we have\n*\n*     ```tex\n*     e^{x} = 2^k e^{r}\n*     ```\n*\n* ## Special Cases\n*\n* ```tex\n* \\begin{align*}\n* e^\\infty &= \\infty \\\\\n* e^{-\\infty} &= 0 \\\\\n* e^{\\mathrm{NaN}} &= \\mathrm{NaN} \\\\\n* e^0 &= 1\\ \\mathrm{is\\ exact\\ for\\ finite\\ argument\\ only}\n* \\end{align*}\n* ```\n*\n* ## Notes\n*\n* -   According to an error analysis, the error is always less than \\\\(1\\\\) ulp (unit in the last place).\n*\n* -   For an IEEE double,\n*\n*     -   if \\\\(x > 7.09782712893383973096\\mbox{e+}02\\\\), then \\\\(e^{x}\\\\) overflows\n*     -   if \\\\(x < -7.45133219101941108420\\mbox{e+}02\\\\), then \\\\(e^{x}\\\\) underflows\n*\n* -   The hexadecimal values included in the source code are the intended ones for the used constants. Decimal values may be used, provided that the compiler will convert from decimal to binary accurately enough to produce the intended hexadecimal values.\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var v = exp( 4.0 );\n* // returns ~54.5982\n*\n* @example\n* var v = exp( -9.0 );\n* // returns ~1.234e-4\n*\n* @example\n* var v = exp( 0.0 );\n* // returns 1.0\n*\n* @example\n* var v = exp( NaN );\n* // returns NaN\n*/\nfunction exp( x ) {\n\tvar hi;\n\tvar lo;\n\tvar k;\n\n\tif ( isnan( x ) || x === PINF ) {\n\t\treturn x;\n\t}\n\tif ( x === NINF ) {\n\t\treturn 0.0;\n\t}\n\tif ( x > OVERFLOW ) {\n\t\treturn PINF;\n\t}\n\tif ( x < UNDERFLOW ) {\n\t\treturn 0.0;\n\t}\n\tif (\n\t\tx > NEG_NEARZERO &&\n\t\tx < NEARZERO\n\t) {\n\t\treturn 1.0 + x;\n\t}\n\t// Reduce and compute `r = hi - lo` for extra precision...\n\tif ( x < 0.0 ) {\n\t\tk = trunc( (LOG2_E*x) - 0.5 );\n\t} else {\n\t\tk = trunc( (LOG2_E*x) + 0.5 );\n\t}\n\thi = x - (k*LN2_HI);\n\tlo = k * LN2_LO;\n\n\treturn expmulti( hi, lo, k );\n}\n\n\n// EXPORTS //\n\nexport default exp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyrights, licenses, and long comment were part of the original implementation available as part of [Go]{@link https://github.com/golang/go/blob/cb07765045aed5104a3df31507564ac99e6ddce8/src/math/exp.go}, which in turn was based on an implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_exp.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (c) 2009 The Go Authors. All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without\n* modification, are permitted provided that the following conditions are\n* met:\n*\n*    * Redistributions of source code must retain the above copyright\n* notice, this list of conditions and the following disclaimer.\n*    * Redistributions in binary form must reproduce the above\n* copyright notice, this list of conditions and the following disclaimer\n* in the documentation and/or other materials provided with the\n* distribution.\n*    * Neither the name of Google Inc. nor the names of its\n* contributors may be used to endorse or promote products derived from\n* this software without specific prior written permission.\n*\n* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n* \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n* A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n* OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n* ```\n*\n* ```text\n* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ldexp from '@stdlib/math-base-special-ldexp';\nimport polyvalP from './polyval_p.js';\n\n\n// MAIN //\n\n/**\n* Computes \\\\(e^{r} 2^k\\\\) where \\\\(r = \\mathrm{hi} - \\mathrm{lo}\\\\) and \\\\(|r| \\leq \\ln(2)/2\\\\).\n*\n* @private\n* @param {number} hi - upper bound\n* @param {number} lo - lower bound\n* @param {integer} k - power of 2\n* @returns {number} function value\n*/\nfunction expmulti( hi, lo, k ) {\n\tvar r;\n\tvar t;\n\tvar c;\n\tvar y;\n\n\tr = hi - lo;\n\tt = r * r;\n\tc = r - ( t*polyvalP( t ) );\n\ty = 1.0 - ( lo - ( (r*c)/(2.0-c) ) - hi);\n\n\treturn ldexp( y, k );\n}\n\n\n// EXPORTS //\n\nexport default expmulti;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.16666666666666602;\n\t}\n\treturn 0.16666666666666602 + (x * (-0.0027777777777015593 + (x * (0.00006613756321437934 + (x * (-0.0000016533902205465252 + (x * 4.1381367970572385e-8))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C code, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright 1984, 1987, 1989, 1992, 2000 by Stephen L. Moshier\n*\n* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.\n*\n* Stephen L. Moshier\n* moshier@na-net.ornl.gov\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport SQRT_TWO_PI from '@stdlib/constants-float64-sqrt-two-pi';\nimport pow from '@stdlib/math-base-special-pow';\nimport exp from '@stdlib/math-base-special-exp';\nimport polyval from './polyval_s.js';\n\n\n// VARIABLES //\n\nvar MAX_STIRLING = 143.01608;\n\n\n// MAIN //\n\n/**\n* Evaluates the gamma function using Stirling's formula. The polynomial is valid for \\\\(33 \\leq x \\leq 172\\\\).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} function value\n*/\nfunction gamma( x ) {\n\tvar w;\n\tvar y;\n\tvar v;\n\n\tw = 1.0 / x;\n\tw = 1.0 + ( w * polyval( w ) );\n\ty = exp( x );\n\n\t// Check `x` to avoid `pow()` overflow...\n\tif ( x > MAX_STIRLING ) {\n\t\tv = pow( x, ( 0.5*x ) - 0.25 );\n\t\ty = v * (v/y);\n\t} else {\n\t\ty = pow( x, x-0.5 ) / y;\n\t}\n\treturn SQRT_TWO_PI * y * w;\n}\n\n\n// EXPORTS //\n\nexport default gamma;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.08333333333334822;\n\t}\n\treturn 0.08333333333334822 + (x * (0.0034722222160545866 + (x * (-0.0026813261780578124 + (x * (-0.00022954996161337813 + (x * 0.0007873113957930937))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Square root of the mathematical constant `π` times `2`.\n*\n* @module @stdlib/constants-float64-sqrt-two-pi\n* @type {number}\n*\n* @example\n* import SQRT_TWO_PI from '@stdlib/constants-float64-sqrt-two-pi';\n* // returns 2.5066282746310007\n*/\n\n\n// MAIN //\n\n/**\n* Square root of the mathematical constant `π` times `2`.\n*\n* @constant\n* @type {number}\n* @default 2.5066282746310007\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}\n*/\nvar SQRT_TWO_PI = 2.506628274631000502415765284811045253e+00;\n\n\n// EXPORTS //\n\nexport default SQRT_TWO_PI;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C code, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright 1984, 1987, 1989, 1992, 2000 by Stephen L. Moshier\n*\n* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.\n*\n* Stephen L. Moshier\n* moshier@na-net.ornl.gov\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport EULER from '@stdlib/constants-float64-eulergamma';\n\n\n// MAIN //\n\n/**\n* Evaluates the gamma function using a small-value approximation.\n*\n* @private\n* @param {number} x - input value\n* @param {number} z - scale factor\n* @returns {number} function value\n*/\nfunction gamma( x, z ) {\n\treturn z / ( (1.0+( EULER*x )) * x );\n}\n\n\n// EXPORTS //\n\nexport default gamma;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The Euler-Mascheroni constant.\n*\n* @module @stdlib/constants-float64-eulergamma\n* @type {number}\n*\n* @example\n* import GAMMA from '@stdlib/constants-float64-eulergamma';\n* // returns 0.5772156649015329\n*/\n\n\n// MAIN //\n\n/**\n* The Euler-Mascheroni constant.\n*\n* @constant\n* @type {number}\n* @default 0.5772156649015329\n* @see [OEIS]{@link http://oeis.org/A001620}\n* @see [Mathworld]{@link http://mathworld.wolfram.com/Euler-MascheroniConstant.html}\n*/\nvar GAMMA = 0.577215664901532860606512090082402431042;\n\n\n// EXPORTS //\n\nexport default GAMMA;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright 1984, 1987, 1989, 1992, 2000 by Stephen L. Moshier\n*\n* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.\n*\n* Stephen L. Moshier\n* moshier@na-net.ornl.gov\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nimport isNegativeZero from '@stdlib/math-base-assert-is-negative-zero';\nimport abs from '@stdlib/math-base-special-abs';\nimport floor from '@stdlib/math-base-special-floor';\nimport sin from '@stdlib/math-base-special-sin';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport PI from '@stdlib/constants-float64-pi';\nimport stirlingApprox from './stirling_approximation.js';\nimport smallApprox from './small_approximation.js';\nimport rateval from './rational_pq.js';\n\n\n// MAIN //\n\n/**\n* Evaluates the gamma function.\n*\n* ## Method\n*\n* 1.  Arguments \\\\(|x| \\leq 34\\\\) are reduced by recurrence and the function approximated by a rational function of degree \\\\(6/7\\\\) in the interval \\\\((2,3)\\\\).\n* 2.  Large negative arguments are made positive using a reflection formula.\n* 3.  Large arguments are handled by Stirling's formula.\n*\n* ## Notes\n*\n* -   Relative error:\n*\n*     | arithmetic | domain    | # trials | peak    | rms     |\n*     |:----------:|:---------:|:--------:|:-------:|:-------:|\n*     | DEC        | -34,34    | 10000    | 1.3e-16 | 2.5e-17 |\n*     | IEEE       | -170,-33  | 20000    | 2.3e-15 | 3.3e-16 |\n*     | IEEE       | -33, 33   | 20000    | 9.4e-16 | 2.2e-16 |\n*     | IEEE       | 33, 171.6 | 20000    | 2.3e-15 | 3.2e-16 |\n*\n* -   Error for arguments outside the test range will be larger owing to error amplification by the exponential function.\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var v = gamma( 4.0 );\n* // returns 6.0\n*\n* @example\n* var v = gamma( -1.5 );\n* // returns ~2.363\n*\n* @example\n* var v = gamma( -0.5 );\n* // returns ~-3.545\n*\n* @example\n* var v = gamma( 0.5 );\n* // returns ~1.772\n*\n* @example\n* var v = gamma( 0.0 );\n* // returns Infinity\n*\n* @example\n* var v = gamma( -0.0 );\n* // returns -Infinity\n*\n* @example\n* var v = gamma( NaN );\n* // returns NaN\n*/\nfunction gamma( x ) {\n\tvar sign;\n\tvar q;\n\tvar p;\n\tvar z;\n\tif (\n\t\t(isInteger( x ) && x < 0) ||\n\t\tx === NINF ||\n\t\tisnan( x )\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x === 0.0 ) {\n\t\tif ( isNegativeZero( x ) ) {\n\t\t\treturn NINF;\n\t\t}\n\t\treturn PINF;\n\t}\n\tif ( x > 171.61447887182298 ) {\n\t\treturn PINF;\n\t}\n\tif ( x < -170.5674972726612 ) {\n\t\treturn 0.0;\n\t}\n\tq = abs( x );\n\tif ( q > 33.0 ) {\n\t\tif ( x >= 0.0 ) {\n\t\t\treturn stirlingApprox( x );\n\t\t}\n\t\tp = floor( q );\n\n\t\t// Check whether `x` is even...\n\t\tif ( (p&1) === 0 ) {\n\t\t\tsign = -1.0;\n\t\t} else {\n\t\t\tsign = 1.0;\n\t\t}\n\t\tz = q - p;\n\t\tif ( z > 0.5 ) {\n\t\t\tp += 1.0;\n\t\t\tz = q - p;\n\t\t}\n\t\tz = q * sin( PI * z );\n\t\treturn sign * PI / ( abs(z)*stirlingApprox(q) );\n\t}\n\t// Reduce `x`...\n\tz = 1.0;\n\twhile ( x >= 3.0 ) {\n\t\tx -= 1.0;\n\t\tz *= x;\n\t}\n\twhile ( x < 0.0 ) {\n\t\tif ( x > -1.0e-9 ) {\n\t\t\treturn smallApprox( x, z );\n\t\t}\n\t\tz /= x;\n\t\tx += 1.0;\n\t}\n\twhile ( x < 2.0 ) {\n\t\tif ( x < 1.0e-9 ) {\n\t\t\treturn smallApprox( x, z );\n\t\t}\n\t\tz /= x;\n\t\tx += 1.0;\n\t}\n\tif ( x === 2.0 ) {\n\t\treturn z;\n\t}\n\tx -= 2.0;\n\treturn z * rateval( x );\n}\n\n\n// EXPORTS //\n\nexport default gamma;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 1.0;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 1.0 + (x * (0.4942148268014971 + (x * (0.20744822764843598 + (x * (0.04763678004571372 + (x * (0.010421379756176158 + (x * (0.0011913514700658638 + (x * (0.00016011952247675185 + (x * 0.0))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (0.0714304917030273 + (x * (-0.23459179571824335 + (x * (0.035823639860549865 + (x * (0.011813978522206043 + (x * (-0.004456419138517973 + (x * (0.0005396055804933034 + (x * -0.000023158187332412014))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.0 + (x * (0.00016011952247675185 + (x * (0.0011913514700658638 + (x * (0.010421379756176158 + (x * (0.04763678004571372 + (x * (0.20744822764843598 + (x * (0.4942148268014971 + (x * 1.0))))))))))))); // eslint-disable-line max-len\n\t\ts2 = -0.000023158187332412014 + (x * (0.0005396055804933034 + (x * (-0.004456419138517973 + (x * (0.011813978522206043 + (x * (0.035823639860549865 + (x * (-0.23459179571824335 + (x * (0.0714304917030273 + (x * 1.0))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveZero from '@stdlib/math-base-assert-is-positive-zero';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns the maximum value.\n*\n* @param {number} x - first number\n* @param {number} y - second number\n* @returns {number} maximum value\n*\n* @example\n* var v = max( 3.14, 4.2 );\n* // returns 4.2\n*\n* @example\n* var v = max( 3.14, NaN );\n* // returns NaN\n*\n* @example\n* var v = max( +0.0, -0.0 );\n* // returns +0.0\n*/\nfunction max( x, y ) {\n\tif ( isnan( x ) || isnan( y ) ) {\n\t\treturn NaN;\n\t}\n\tif ( x === PINF || y === PINF ) {\n\t\treturn PINF;\n\t}\n\tif ( x === y && x === 0.0 ) {\n\t\tif ( isPositiveZero( x ) ) {\n\t\t\treturn x;\n\t\t}\n\t\treturn y;\n\t}\n\tif ( x > y ) {\n\t\treturn x;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default max;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math-base-assert-is-negative-zero';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Returns the minimum value.\n*\n* @param {number} x - first number\n* @param {number} y - second number\n* @returns {number} minimum value\n*\n* @example\n* var v = min( 3.14, 4.2 );\n* // returns 3.14\n*\n* @example\n* var v = min( 3.14, NaN );\n* // returns NaN\n*\n* @example\n* var v = min( +0.0, -0.0 );\n* // returns -0.0\n*/\nfunction min( x, y ) {\n\tif ( isnan( x ) || isnan( y ) ) {\n\t\treturn NaN;\n\t}\n\tif ( x === NINF || y === NINF ) {\n\t\treturn NINF;\n\t}\n\tif ( x === y && x === 0.0 ) {\n\t\tif ( isNegativeZero( x ) ) {\n\t\t\treturn x;\n\t\t}\n\t\treturn y;\n\t}\n\tif ( x < y ) {\n\t\treturn x;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default min;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of the square root of `2π`.\n*\n* @module @stdlib/constants-float64-ln-sqrt-two-pi\n* @type {number}\n*\n* @example\n* import LN_SQRT_TWO_PI from '@stdlib/constants-float64-ln-sqrt-two-pi';\n* // returns 0.9189385332046728\n*/\n\n\n// MAIN //\n\n/**\n* Natural logarithm of the square root of `2π`.\n*\n* ```tex\n* \\ln \\sqrt{2\\pi}\n* ```\n*\n* @constant\n* @type {number}\n* @default 0.9189385332046728\n*/\nvar LN_SQRT_TWO_PI = 9.18938533204672741780329736405617639861397473637783412817151540482765695927260397694743298635954197622005646625e-01; // eslint-disable-line max-len\n\n\n// EXPORTS //\n\nexport default LN_SQRT_TWO_PI;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The code is adapted from the Fortran routine from the FNLIB library of the [SLATEC Common Mathematical Library]{@link http://www.netlib.no/netlib/slatec/fnlib/}.\n*\n* The original code was developed by W. Fullerton of Los Alamos Scientific Laboratory, a governmental institution, and is therefore public domain.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar ALGMCS = [\n\t+0.1276642195630062933333333333333e-30,\n\t-0.3401102254316748799999999999999e-29,\n\t+0.1025680058010470912000000000000e-27,\n\t-0.3547598158101070547199999999999e-26,\n\t+0.1429227355942498147573333333333e-24,\n\t-0.6831888753985766870111999999999e-23,\n\t+0.3962837061046434803679306666666e-21,\n\t-0.2868042435334643284144622399999e-19,\n\t+0.2683181998482698748957538846666e-17,\n\t-0.3399615005417721944303330599666e-15,\n\t+0.6221098041892605227126015543416e-13,\n\t-0.1809129475572494194263306266719e-10,\n\t+0.9810825646924729426157171547487e-8,\n\t-0.1384948176067563840732986059135e-4,\n\t+0.1666389480451863247205729650822e+0\n];\nvar LEN = ALGMCS.length;\n\n\n// MAIN //\n\n/**\n* Evaluate the n-term Chebyshev series at `x`.\n*\n* ## References\n*\n* -   Broucke, Roger. 1973. \"Algorithm: Ten Subroutines for the Manipulation of Chebyshev Series.\" _Communications of the ACM_ 16 (4). New York, NY, USA: ACM: 254–56. doi:[10.1145/362003.362037](https://doi.org/10.1145/362003.362037).\n* -   Fox, Leslie, and Ian Bax Parker. 1968. _Chebyshev polynomials in numerical analysis_. Oxford Mathematical Handbooks. London, United Kingdom: Oxford University Press. <https://books.google.com/books?id=F8NzsEtJCD0C>.\n*\n* @private\n* @param {number} x - value at which the series is to be evaluated\n* @returns {number} series value\n*/\nfunction dcseval( x ) {\n\tvar twox;\n\tvar b2;\n\tvar b1;\n\tvar b0;\n\tvar i;\n\n\tif ( x < -1.1 || x > 1.1 ) {\n\t\treturn NaN;\n\t}\n\tb1 = 0.0;\n\tb0 = 0.0;\n\ttwox = 2.0 * x;\n\tfor ( i = 0; i < LEN; i++ ) {\n\t\tb2 = b1;\n\t\tb1 = b0;\n\t\tb0 = (twox*b1) - b2 + ALGMCS[ i ];\n\t}\n\treturn ( b0-b2 ) * 0.5;\n}\n\n\n// EXPORTS //\n\nexport default dcseval;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The code is adapted from the Fortran routine from the FNLIB library of the [SLATEC Common Mathematical Library]{@link http://www.netlib.no/netlib/fn/d9lgmc.f}.\n*\n* The original code was developed by W. Fullerton of Los Alamos Scientific Laboratory, a governmental institution, and is therefore public domain.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport pow from '@stdlib/math-base-special-pow';\nimport dceval from './dceval.js';\n\n\n// VARIABLES //\n\nvar XBIG = 94906265.62425156;\nvar XMAX = 3.745194030963158e306;\n\n\n// MAIN //\n\n/**\n* Compute the log gamma correction factor for `x >= 10`.\n*\n* ```tex\n* \\log(\\gamma(x)) = \\log(\\sqrt{2*\\Pi}) + (x-0.5) \\cdot \\log(x) - x \\operatorname{R9LGMC}(x).\n* ```\n*\n* @private\n* @param {number} x - input value\n* @returns {number} correction value\n*/\nfunction gammaCorrection( x ) {\n\tif ( x < 10.0 ) {\n\t\treturn NaN;\n\t}\n\t// Check for underflow...\n\tif ( x >= XMAX ) {\n\t\treturn 0.0;\n\t}\n\tif ( x < XBIG ) {\n\t\treturn dceval( (2.0*pow( 10.0/x, 2.0 )) - 1.0 ) / x;\n\t}\n\treturn 1.0 / (x * 12.0);\n}\n\n\n// EXPORTS //\n\nexport default gammaCorrection;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport betaln from '@stdlib/math-base-special-betaln';\nimport abs from '@stdlib/math-base-special-abs';\nimport ln from '@stdlib/math-base-special-ln';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Computes the natural logarithm of the binomial coefficient of two integers.\n*\n* @param {integer} n - input value\n* @param {integer} k - second input value\n* @returns {number} function value\n*\n* @example\n* var v = binomcoefln( 8, 2 );\n* // returns ~3.332\n*\n* @example\n* var v = binomcoefln( 0, 0 );\n* // returns 0.0\n*\n* @example\n* var v = binomcoefln( -4, 2 );\n* // returns ~2.303\n*\n* @example\n* var v = binomcoefln( 88, 3 );\n* // returns ~11.606\n*\n* @example\n* var v = binomcoefln( NaN, 3 );\n* // returns NaN\n*\n* @example\n* var v = binomcoefln( 5, NaN );\n* // returns NaN\n*\n* @example\n* var v = binomcoefln( NaN, NaN );\n* // returns NaN\n*/\nfunction binomcoefln( n, k ) {\n\tif ( isnan( n ) || isnan( k ) ) {\n\t\treturn NaN;\n\t}\n\tif ( !isInteger( n ) || !isInteger( k ) ) {\n\t\treturn NaN;\n\t}\n\tif ( n < 0.0 ) {\n\t\treturn binomcoefln( -n + k - 1.0, k );\n\t}\n\tif ( k < 0 ) {\n\t\treturn NINF;\n\t}\n\tif ( k === 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( k === 1 ) {\n\t\treturn ln( abs( n ) );\n\t}\n\tif ( n < k ) {\n\t\treturn NINF;\n\t}\n\tif ( n - k < 2 ) {\n\t\treturn binomcoefln( n, n - k );\n\t}\n\t// Case: n - k >= 2\n\treturn -ln( n + 1 ) - betaln( n - k + 1, k + 1 );\n}\n\n\n// EXPORTS //\n\nexport default binomcoefln;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The code is adapted from the Fortran routine from the FNLIB library of the [SLATEC Common Mathematical Library]{@link http://www.netlib.no/netlib/slatec/fnlib/albeta.f}.\n*\n* The original code was developed by W. Fullerton of Los Alamos Scientific Laboratory, a governmental institution, and is therefore public domain.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport gammaln from '@stdlib/math-base-special-gammaln';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport gamma from '@stdlib/math-base-special-gamma';\nimport max from '@stdlib/math-base-special-max';\nimport min from '@stdlib/math-base-special-min';\nimport ln from '@stdlib/math-base-special-ln';\nimport LN_SQRT_TWO_PI from '@stdlib/constants-float64-ln-sqrt-two-pi';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport correction from './gamma_correction.js';\n\n\n// MAIN //\n\n/**\n* Evaluate the natural logarithm of the beta function.\n*\n* @param {NonNegativeNumber} a - first input value\n* @param {NonNegativeNumber} b - second input value\n* @returns {number} natural logarithm of beta function\n*\n* @example\n* var v = betaln( 0.0, 0.0 );\n* // returns Infinity\n*\n* @example\n* var v = betaln( 1.0, 1.0 );\n* // returns 0.0\n*\n* @example\n* var v = betaln( -1.0, 2.0 );\n* // returns NaN\n*\n* @example\n* var v = betaln( 5.0, 0.2 );\n* // returns ~1.218\n*\n* @example\n* var v = betaln( 4.0, 1.0 );\n* // returns ~-1.386\n*\n* @example\n* var v = betaln( NaN, 2.0 );\n* // returns NaN\n*/\nfunction betaln( a, b ) {\n\tvar corr;\n\tvar p;\n\tvar q;\n\n\tp = min( a, b );\n\tq = max( a, b );\n\n\tif ( p < 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( p === 0.0 ) {\n\t\treturn PINF;\n\t}\n\tif ( q === PINF ) {\n\t\treturn NINF;\n\t}\n\t// Case: p and q are big\n\tif ( p >= 10.0 ) {\n\t\tcorr = correction( p ) + correction( q ) - correction( p+q );\n\t\treturn ( -0.5*ln( q ) ) + LN_SQRT_TWO_PI + corr + ( (p-0.5) * ln( p/(p+q) ) ) + ( q*log1p( -p/(p+q) ) ); // eslint-disable-line max-len\n\t}\n\t// Case: p is small, but q is big\n\tif ( q >= 10.0 ) {\n\t\tcorr = correction( q ) - correction( p+q );\n\t\treturn gammaln( p ) + corr + p - (p*ln( p+q )) + ( (q-0.5)*log1p( -p/(p+q) ) ); // eslint-disable-line max-len\n\t}\n\t// Case: p and q are small\n\treturn ln( gamma( p ) * ( gamma( q ) / gamma( p+q ) ) );\n}\n\n\n// EXPORTS //\n\nexport default betaln;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport binomcoefln from '@stdlib/math-base-special-binomcoefln';\nimport floor from '@stdlib/math-base-special-floor';\nimport exp from '@stdlib/math-base-special-exp';\nimport ln from '@stdlib/math-base-special-ln';\n\n\n// MAIN //\n\n/**\n* Evaluates the CDF for the one-sided test statistics, i.e., the maximum by which the empirical CDF exceeds / is less than the hypothesized CDF.\n*\n* @private\n* @param {number} d - the argument of the CDF of D_n^+ / D_n^-\n* @param {PositiveInteger} n - number of variates\n* @returns {number} evaluated CDF, i.e., P( D_n^+ < d )\n*/\nfunction pKolmogorov1( d, n ) {\n\tvar len;\n\tvar out;\n\tvar tmp;\n\tvar i;\n\n\tif ( d <= 0.0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( d >= 1.0 ) {\n\t\treturn 1.0;\n\t}\n\tlen = floor( n * (1.0-d) ) + 1;\n\tout = 0.0;\n\tfor ( i = 0; i < len; i++ ) {\n\t\ttmp = binomcoefln( n, i );\n\t\ttmp += ( n - i ) * ln( 1.0 - d - (i/n) );\n\t\ttmp += ( i - 1.0 ) * ln( d + (i/n) );\n\t\tout += exp( tmp );\n\t}\n\treturn 1.0 - (d * out);\n}\n\n\n// EXPORTS //\n\nexport default pKolmogorov1;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math-base-special-floor';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport pow from '@stdlib/math-base-special-pow';\nimport exp from '@stdlib/math-base-special-exp';\nimport Float64Array from '@stdlib/array-float64';\n\n\n// MAIN //\n\n/**\n* Evaluates the Kolmogorov distribution. This function is a JavaScript implementation of a procedure developed by Marsaglia & Tsang.\n*\n* ## References\n*\n* -   Marsaglia, George, Wai Wan Tsang, and Jingbo Wang. 2003. \"Evaluating Kolmogorov's Distribution.\" _Journal of Statistical Software_ 8 (18): 1–4. doi:[10.18637/jss.v008.i18](https://doi.org/10.18637/jss.v008.i18).\n*\n* @private\n* @param {number} d - the argument of the CDF of D_n\n* @param {number} n - number of variates\n* @returns {number} evaluated CDF, i.e. P( D_n < d )\n*/\nfunction pKolmogorov( d, n ) {\n\tvar eH;\n\tvar eQ;\n\tvar h;\n\tvar H;\n\tvar Q;\n\tvar g;\n\tvar i;\n\tvar j;\n\tvar k;\n\tvar m;\n\tvar s;\n\n\ts = d * d * n;\n\tif ( s > 7.24 || ( s > 3.76 && n > 99 ) ) {\n\t\treturn 1 - (2 * exp( -( 2.000071 + (0.331/sqrt(n)) + (1.409/n) ) * s ));\n\t}\n\tk = floor( n * d ) + 1;\n\tm = (2*k) - 1;\n\th = k - (n*d);\n\tH = new Float64Array( m * m );\n\tQ = new Float64Array( m * m );\n\tfor ( i = 0; i < m; i++ ) {\n\t\tfor ( j = 0; j < m; j++ ) {\n\t\t\tif ( i - j + 1 < 0 ) {\n\t\t\t\tH[ (i*m) + j ] = 0;\n\t\t\t} else {\n\t\t\t\tH[ (i*m) + j ] = 1;\n\t\t\t}\n\t\t}\n\t}\n\tfor ( i = 0; i < m; i++ ) {\n\t\tH[ i * m ] -= pow( h, i+1 );\n\t\tH[ ((m-1) * m) + i ] -= pow( h, (m-i) );\n\t}\n\tH[ (m-1) * m ] += ( ( (2*h)-1 > 0 ) ? pow( (2*h)-1, m ) : 0 );\n\tfor ( i = 0; i < m; i++ ) {\n\t\tfor ( j = 0; j < m; j++ ) {\n\t\t\tif ( i - j + 1 > 0 ) {\n\t\t\t\tfor ( g = 1; g <= i - j + 1; g++ ) {\n\t\t\t\t\tH[ (i*m) + j ] /= g;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\teH = 0;\n\tmpow( H, eH, n );\n\ts = Q[ ((k-1) * m) + k - 1 ];\n\tfor ( i = 1; i <= n; i++ ) {\n\t\ts = s * i / n;\n\t\tif ( s < 1e-140 ) {\n\t\t\ts *= 1e140;\n\t\t\teQ -= 140;\n\t\t}\n\t}\n\ts *= pow( 10, eQ );\n\treturn s;\n\n\t/**\n\t* Matrix exponentiation. Mutates Q matrix.\n\t*\n\t* @private\n\t* @param {Float64Array} A - input matrix\n\t* @param {number} eA - matrix power\n\t* @param {number} n - number of variates\n\t*/\n\tfunction mpow( A, eA, n ) {\n\t\tvar eB;\n\t\tvar B;\n\t\tvar i;\n\n\t\tif ( n === 1 ) {\n\t\t\tfor ( i = 0; i < m*m; i++ ) {\n\t\t\t\tQ[ i ] = A[ i ];\n\t\t\t\teQ = eA;\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tmpow( A, eA, floor( n/2 ) );\n\t\tB = mmult( Q, Q );\n\t\teB = 2 * eQ;\n\t\tif ( n % 2 === 0 ) {\n\t\t\tfor ( i = 0; i < m*m; i++ ) {\n\t\t\t\tQ[ i ] = B[ i ];\n\t\t\t}\n\t\t\teQ = eB;\n\t\t} else {\n\t\t\tQ = mmult( A, B );\n\t\t\teQ = eA + eB;\n\t\t}\n\t\tif ( Q[ (floor(m/2) * m) + floor(m/2) ] > 1e140 ) {\n\t\t\tfor ( i = 0; i < m*m; i++ ) {\n\t\t\t\tQ[ i ] *= 1e-140;\n\t\t\t}\n\t\t\teQ += 140;\n\t\t}\n\t}\n\n\t/**\n\t* Multiply matrices x and y.\n\t*\n\t* @private\n\t* @param {Float64Array} x - first input matrix\n\t* @param {Float64Array} y - second input matrix\n\t* @returns {Float64Array} matrix product\n\t*/\n\tfunction mmult( x, y ) {\n\t\tvar i;\n\t\tvar j;\n\t\tvar k;\n\t\tvar s;\n\t\tvar z;\n\n\t\tz = new Float64Array( m * m );\n\t\tfor ( i = 0; i < m; i++) {\n\t\t\tfor ( j = 0; j < m; j++ ) {\n\t\t\t\ts = 0;\n\t\t\t\tfor ( k = 0; k < m; k++ ) {\n\t\t\t\t\ts += x[ (i*m) + k ] * y[ (k*m) + j ];\n\t\t\t\t\tz[ (i*m) + j ] = s;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn z;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default pKolmogorov;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Comparator function used to sort values in ascending order.\n*\n* @private\n* @param {number} a - first value\n* @param {number} b - second value\n* @returns {number} difference between `a` and `b`\n*/\nfunction ascending( a, b ) {\n\treturn a - b;\n}\n\n\n// EXPORTS //\n\nexport default ascending;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes an element-wise subtraction.\n*\n* @private\n* @param {number} x - scalar minuend (implicitly broadcasted to full length array)\n* @param {NumericArray} arr - array of subtrahends\n* @returns {NumericArray} output array\n*\n* @example\n* var x = 3;\n* var arr = [ 1, 2, 2, 3 ];\n*\n* var y = subtract( x, arr );\n* // returns [ 2, 1, 1, 0 ]\n*/\nfunction subtract( x, arr ) {\n\tvar len;\n\tvar res;\n\tvar i;\n\n\tlen = arr.length;\n\tres = new Array( len );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tres[ i ] = x - arr[ i ];\n\t}\n\n\treturn res;\n}\n\n\n// EXPORTS //\n\nexport default subtract;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an object.\n*\n* @name Object\n* @constructor\n* @type {Function}\n* @param {*} value - input value\n* @returns {Object} object\n*\n* @example\n* var o = new Object( null );\n* // returns {}\n*\n* @example\n* var o = new Object( 5.0 );\n* // returns <Number>\n*\n* @example\n* var o = new Object( 'beep' );\n* // returns <String>\n*\n* @example\n* var o1 = {};\n*\n* var o2 = new Object( o1 );\n* // returns {}\n*\n* var bool = ( o1 === o2 );\n* // returns true\n*/\nvar Obj = Object; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default Obj;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isFunction from '@stdlib/assert-is-function';\nimport builtin from './native.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar getProto;\nif ( isFunction( Object.getPrototypeOf ) ) {\n\tgetProto = builtin;\n} else {\n\tgetProto = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default getProto;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar getProto = Object.getPrototypeOf;\n\n\n// EXPORTS //\n\nexport default getProto;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nativeClass from '@stdlib/utils-native-class';\nimport getProto from './proto.js';\n\n\n// MAIN //\n\n/**\n* Returns the prototype of a provided object.\n*\n* @private\n* @param {Object} obj - input object\n* @returns {(Object|null)} prototype\n*/\nfunction getPrototypeOf( obj ) {\n\tvar proto = getProto( obj );\n\tif ( proto || proto === null ) {\n\t\treturn proto;\n\t}\n\tif ( nativeClass( obj.constructor ) === '[object Function]' ) {\n\t\t// May break if the constructor has been tampered with...\n\t\treturn obj.constructor.prototype;\n\t}\n\tif ( obj instanceof Object ) {\n\t\treturn Object.prototype;\n\t}\n\t// Return `null` for objects created via `Object.create( null )`. Also return `null` for cross-realm objects on browsers that lack `__proto__` support, such as IE < 11.\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default getPrototypeOf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Returns the value of the `__proto__` property.\n*\n* @private\n* @param {Object} obj - input object\n* @returns {*} value of `__proto__` property\n*/\nfunction getProto( obj ) {\n\t// eslint-disable-next-line no-proto\n\treturn obj.__proto__;\n}\n\n\n// EXPORTS //\n\nexport default getProto;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObject from '@stdlib/assert-is-object';\nimport isFunction from '@stdlib/assert-is-function';\nimport getPrototypeOf from '@stdlib/utils-get-prototype-of';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport nativeClass from '@stdlib/utils-native-class';\n\n\n// VARIABLES //\n\nvar objectPrototype = Object.prototype;\n\n\n// FUNCTIONS //\n\n/**\n* Tests that an object only has own properties.\n*\n* @private\n* @param {Object} obj - value to test\n* @returns {boolean} boolean indicating if an object only has own properties\n*/\nfunction ownProps( obj ) {\n\tvar key;\n\n\t// NOTE: possibility of perf boost if key enumeration order is known (see http://stackoverflow.com/questions/18531624/isplainobject-thing).\n\tfor ( key in obj ) {\n\t\tif ( !hasOwnProp( obj, key ) ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n\n// MAIN //\n\n/**\n* Tests if a value is a plain object.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a plain object\n*\n* @example\n* var bool = isPlainObject( {} );\n* // returns true\n*\n* @example\n* var bool = isPlainObject( null );\n* // returns false\n*/\nfunction isPlainObject( value ) {\n\tvar proto;\n\n\t// Screen for obvious non-objects...\n\tif ( !isObject( value ) ) {\n\t\treturn false;\n\t}\n\t// Objects with no prototype (e.g., `Object.create( null )`) are plain...\n\tproto = getPrototypeOf( value );\n\tif ( !proto ) {\n\t\treturn true;\n\t}\n\t// Objects having a prototype are plain if and only if they are constructed with a global `Object` function and the prototype points to the prototype of a plain object...\n\treturn (\n\t\t// Cannot have own `constructor` property:\n\t\t!hasOwnProp( value, 'constructor' ) &&\n\n\t\t// Prototype `constructor` property must be a function (see also https://bugs.jquery.com/ticket/9897 and http://stackoverflow.com/questions/18531624/isplainobject-thing):\n\t\thasOwnProp( proto, 'constructor' ) &&\n\t\tisFunction( proto.constructor ) &&\n\t\tnativeClass( proto.constructor ) === '[object Function]' &&\n\n\t\t// Test for object-specific method:\n\t\thasOwnProp( proto, 'isPrototypeOf' ) &&\n\t\tisFunction( proto.isPrototypeOf ) &&\n\n\t\t(\n\t\t\t// Test if the prototype matches the global `Object` prototype (same realm):\n\t\t\tproto === objectPrototype ||\n\n\t\t\t// Test that all properties are own properties (cross-realm; *most* likely a plain object):\n\t\t\townProps( value )\n\t\t)\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isPlainObject;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isArray from '@stdlib/assert-is-array';\n\n\n// MAIN //\n\n/**\n* Tests if a value is an object; e.g., `{}`.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is an object\n*\n* @example\n* var bool = isObject( {} );\n* // returns true\n*\n* @example\n* var bool = isObject( null );\n* // returns false\n*/\nfunction isObject( value ) {\n\treturn (\n\t\ttypeof value === 'object' &&\n\t\tvalue !== null &&\n\t\t!isArray( value )\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isObject;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Object from '@stdlib/object-ctor';\nimport getProto from './detect.js';\n\n\n// MAIN //\n\n/**\n* Returns the prototype of a provided object.\n*\n* @param {*} value - input value\n* @returns {(Object|null)} prototype\n*\n* @example\n* var proto = getPrototypeOf( {} );\n* // returns {}\n*/\nfunction getPrototypeOf( value ) {\n\tif (\n\t\tvalue === null ||\n\t\tvalue === void 0\n\t) {\n\t\treturn null;\n\t}\n\t// In order to ensure consistent ES5/ES6 behavior, cast input value to an object (strings, numbers, booleans); ES5 `Object.getPrototypeOf` throws when provided primitives and ES6 `Object.getPrototypeOf` casts:\n\tvalue = Object( value );\n\n\treturn getProto( value );\n}\n\n\n// EXPORTS //\n\nexport default getPrototypeOf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport isObject from '@stdlib/assert-is-plain-object';\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport isnan from '@stdlib/assert-is-nan';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport format from '@stdlib/string-format';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {boolean} [options.sorted] - boolean indicating if the input data is already sorted in ascending order\n* @param {string} [options.alternative] - alternative hypothesis\n* @returns {(null|Error)} null or an error\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'alpha', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'alternative' ) ) {\n\t\topts.alternative = options.alternative;\n\t\tif ( !isString( opts.alternative ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'alternative', opts.alternative ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'sorted' ) ) {\n\t\topts.sorted = options.sorted;\n\t\tif ( !isBoolean( opts.sorted ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'sorted', opts.sorted ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright 1984, 1995, 2000 by Stephen L. Moshier\n*\n* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.\n*\n* Stephen L. Moshier\n* moshier@na-net.ornl.gov\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport PIO4 from '@stdlib/constants-float64-fourth-pi';\nimport ratevalPQ from './rational_pq.js';\nimport ratevalRS from './rational_rs.js';\n\n\n// VARIABLES //\n\nvar MOREBITS = 6.123233995736765886130e-17; // pi/2 = PIO2 + MOREBITS\n\n\n// MAIN //\n\n/**\n* Computes the arcsine of a double-precision floating-point number.\n*\n* ## Method\n*\n* -   A rational function of the form\n*\n*     ```tex\n*     x + x^3 \\frac{P(x^2)}{Q(x^2)}\n*     ```\n*\n*     is used for \\\\(\\|x\\|\\\\) in the interval \\\\(\\[0, 0.5\\]\\\\). If \\\\(\\|x\\| > 0.5\\\\), it is transformed by the identity\n*\n*     ```tex\n*     \\operatorname{asin}(x) = \\frac{\\pi}{2} - 2 \\operatorname{asin}( \\sqrt{ (1-x)/2 } )\n*     ```\n*\n* ## Notes\n*\n* -   Relative error:\n*\n*     | arithmetic | domain | # trials | peak    | rms     |\n*     |:-----------|:-------|:---------|:--------|:--------|\n*     | DEC        | -1, 1  | 40000    | 2.6e-17 | 7.1e-18 |\n*     | IEEE       | -1, 1  | 10^6     | 1.9e-16 | 5.4e-17 |\n*\n* @param {number} x - input value\n* @returns {number} arcsine (in radians)\n*\n* @example\n* var v = asin( 0.0 );\n* // returns ~0.0\n*\n* @example\n* var v = asin( 3.141592653589793/4.0 );\n* // returns ~0.903\n*\n* @example\n* var v = asin( -3.141592653589793/6.0 );\n* // returns ~-0.551\n*\n* @example\n* var v = asin( NaN );\n* // returns NaN\n*/\nfunction asin( x ) {\n\tvar sgn;\n\tvar zz;\n\tvar a;\n\tvar p;\n\tvar z;\n\n\tif ( isnan( x ) ) {\n\t\treturn NaN;\n\t}\n\tif ( x > 0.0 ) {\n\t\ta = x;\n\t} else {\n\t\tsgn = true;\n\t\ta = -x;\n\t}\n\tif ( a > 1.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( a > 0.625 ) {\n\t\t// arcsin(1-x) = pi/2 - sqrt(2x)(1+R(x))\n\t\tzz = 1.0 - a;\n\t\tp = zz * ratevalRS( zz );\n\t\tzz = sqrt( zz + zz );\n\t\tz = PIO4 - zz;\n\t\tzz = ( zz*p ) - MOREBITS;\n\t\tz -= zz;\n\t\tz += PIO4;\n\t} else {\n\t\tif ( a < 1.0e-8 ) {\n\t\t\treturn x;\n\t\t}\n\t\tzz = a * a;\n\t\tz = zz * ratevalPQ( zz );\n\t\tz = ( a*z ) + a;\n\t}\n\treturn ( sgn ) ? -z : z;\n}\n\n\n// EXPORTS //\n\nexport default asin;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function (i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\)).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 0.08333333333333809;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 28.536655482610616 + (x * (-25.56901049652825 + (x * (6.968710824104713 + (x * (-0.5634242780008963 + (x * 0.002967721961301243))))))); // eslint-disable-line max-len\n\t\ts2 = 342.43986579130785 + (x * (-383.8770957603691 + (x * (147.0656354026815 + (x * (-21.947795316429207 + (x * 1.0))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.002967721961301243 + (x * (-0.5634242780008963 + (x * (6.968710824104713 + (x * (-25.56901049652825 + (x * 28.536655482610616))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (-21.947795316429207 + (x * (147.0656354026815 + (x * (-383.8770957603691 + (x * 342.43986579130785))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* One fourth times the mathematical constant `π`.\n*\n* @module @stdlib/constants-float64-fourth-pi\n* @type {number}\n*\n* @example\n* import FOURTH_PI from '@stdlib/constants-float64-fourth-pi';\n* // returns 7.85398163397448309616e-1\n*/\n\n\n// MAIN //\n\n/**\n* One fourth times the mathematical constant `π`.\n*\n* @constant\n* @type {number}\n* @default 7.85398163397448309616e-1\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}\n*/\nvar FOURTH_PI = 7.85398163397448309616e-1;\n\n\n// EXPORTS //\n\nexport default FOURTH_PI;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function (i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\)).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 0.16666666666666713;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -8.198089802484825 + (x * (19.562619833175948 + (x * (-16.262479672107002 + (x * (5.444622390564711 + (x * (-0.6019598008014124 + (x * 0.004253011369004428))))))))); // eslint-disable-line max-len\n\t\ts2 = -49.18853881490881 + (x * (139.51056146574857 + (x * (-147.1791292232726 + (x * (70.49610280856842 + (x * (-14.740913729888538 + (x * 1.0))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.004253011369004428 + (x * (-0.6019598008014124 + (x * (5.444622390564711 + (x * (-16.262479672107002 + (x * (19.562619833175948 + (x * -8.198089802484825))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (-14.740913729888538 + (x * (70.49610280856842 + (x * (-147.1791292232726 + (x * (139.51056146574857 + (x * -49.18853881490881))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport asin from '@stdlib/math-base-special-asin';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport PI from '@stdlib/constants-float64-pi';\n\n\n// VARIABLES //\n\nvar TWO_OVER_PI = 2.0 / PI; // TODO: consider moving to pkg\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for an arcsine distribution with minimum support `a` and maximum support `b` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 9.0, 0.0, 10.0 );\n* // returns ~0.795\n*\n* @example\n* var y = cdf( 0.5, 0.0, 2.0 );\n* // returns ~0.333\n*\n* @example\n* var y = cdf( +Infinity, 2.0, 4.0 );\n* // returns 1.0\n*\n* @example\n* var y = cdf( -Infinity, 2.0, 4.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 1.0, 0.0 );\n* // returns NaN\n*/\nfunction cdf( x, a, b ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\ta >= b\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < a ) {\n\t\treturn 0.0;\n\t}\n\tif ( x >= b ) {\n\t\treturn 1.0;\n\t}\n\treturn TWO_OVER_PI * asin( sqrt( ( x-a ) / ( b-a ) ) );\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Creates a function which always returns the same value.\n*\n* @param {*} [value] - value to always return\n* @returns {Function} constant function\n*\n* @example\n* var fcn = wrap( 3.14 );\n*\n* var v = fcn();\n* // returns 3.14\n*\n* v = fcn();\n* // returns 3.14\n*\n* v = fcn();\n* // returns 3.14\n*/\nfunction wrap( value ) {\n\treturn constantFunction;\n\n\t/**\n\t* Constant function.\n\t*\n\t* @private\n\t* @returns {*} constant value\n\t*/\n\tfunction constantFunction() {\n\t\treturn value;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default wrap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Arcsine distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-arcsine-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-arcsine-cdf';\n*\n* var y = cdf( 5.0, 0.0, 4.0 );\n* // returns 1.0\n*\n* var mycdf = cdf.factory( 0.0, 10.0 );\n* y = mycdf( 0.5 );\n* // returns ~0.144\n*\n* y = mycdf( 8.0 );\n* // returns ~0.705\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport asin from '@stdlib/math-base-special-asin';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport PI from '@stdlib/constants-float64-pi';\n\n\n// VARIABLES //\n\nvar TWO_OVER_PI = 2.0 / PI;\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for an arcsine distribution with minimum support `a` and maximum support `b`.\n*\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 0.0, 10.0 );\n* var y = cdf( 0.5 );\n* // returns ~0.144\n*\n* y = cdf( 8.0 );\n* // returns ~0.705\n*/\nfunction factory( a, b ) {\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\ta >= b\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for an arcsine distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < a ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tif ( x >= b ) {\n\t\t\treturn 1.0;\n\t\t}\n\t\treturn TWO_OVER_PI * asin( sqrt( ( x-a ) / ( b-a ) ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright, license, and long comment were part of the original implementation available as part of [FDLIBM]{@link http://www.netlib.org/fdlibm/s_expm1.c} and [FreeBSD]{@link https://svnweb.freebsd.org/base/release/12.2.0/lib/msun/src/s_expm1.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport getHighWord from '@stdlib/number-float64-base-get-high-word';\nimport setHighWord from '@stdlib/number-float64-base-set-high-word';\nimport fromWords from '@stdlib/number-float64-base-from-words';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport FLOAT64_EXPONENT_BIAS from '@stdlib/constants-float64-exponent-bias';\nimport HALF_LN2 from '@stdlib/constants-float64-half-ln-two';\nimport polyval from './polyval_q.js';\n\n\n// VARIABLES //\n\nvar OVERFLOW_THRESHOLD = 7.09782712893383973096e+02; // 0x40862E42 0xFEFA39EF\n\n// High and low words of ln(2):\nvar LN2_HI = 6.93147180369123816490e-01; // 0x3FE62E42 0xFEE00000\nvar LN2_LO = 1.90821492927058770002e-10; // 0x3DEA39EF 0x35793C76\n\n// 1 / ln(2):\nvar LN2_INV = 1.44269504088896338700e+00; // 0x3FF71547 0x652B82FE\n\n// ln(2) * 56:\nvar LN2x56 = 3.88162421113569373274e+01; // 0x4043687A 0x9F1AF2B1\n\n// ln(2) * 1.5:\nvar LN2_HALFX3 = 1.03972077083991796413e+00; // 0x3FF0A2B2 0x3F3BAB73\n\n\n// MAIN //\n\n/**\n* Computes `exp(x) - 1`.\n*\n* ## Method\n*\n* 1.  Given \\\\(x\\\\), we use argument reduction to find \\\\(r\\\\) and an integer \\\\(k\\\\) such that\n*\n*     ```tex\n*     x = k \\cdot \\ln(2) + r\n*     ```\n*\n*     where\n*\n*     ```tex\n*     |r| \\leq \\frac{\\ln(2)}{2} \\approx 0.34658\n*     ```\n*\n*     <!-- <note> -->\n*\n*     A correction term \\\\(c\\\\) will need to be computed to compensate for the error in \\\\(r\\\\) when rounded to a floating-point number.\n*\n*     <!-- </note> -->\n*\n* 2.  To approximate \\\\(\\operatorname{expm1}(r)\\\\), we use a special rational function on the interval \\\\(\\[0,0.34658]\\\\). Since\n*\n*     ```tex\n*     r \\frac{e^r + 1}{e^r - 1} = 2 + \\frac{r^2}{6} - \\frac{r^4}{360} + \\ldots\n*     ```\n*\n*     we define \\\\(\\operatorname{R1}(r^2)\\\\) by\n*\n*     ```tex\n*     r \\frac{e^r + 1}{e^r - 1} = 2 + \\frac{r^2}{6} \\operatorname{R1}(r^2)\n*     ```\n*\n*     That is,\n*\n*     ```tex\n*     \\begin{align*}\n*     \\operatorname{R1}(r^2) &= \\frac{6}{r} \\biggl(\\frac{e^r+1}{e^r-1} - \\frac{2}{r}\\biggr) \\\\\n*     &= \\frac{6}{r} \\biggl( 1 + 2 \\biggl(\\frac{1}{e^r-1} - \\frac{1}{r}\\biggr)\\biggr) \\\\\n*     &= 1 - \\frac{r^2}{60} + \\frac{r^4}{2520} - \\frac{r^6}{100800} + \\ldots\n*     \\end{align*}\n*     ```\n*\n*     We use a special Remes algorithm on \\\\(\\[0,0.347]\\\\) to generate a polynomial of degree \\\\(5\\\\) in \\\\(r^2\\\\) to approximate \\\\(\\mathrm{R1}\\\\). The maximum error of this polynomial approximation is bounded by \\\\(2^{-61}\\\\). In other words,\n*\n*     ```tex\n*     \\operatorname{R1}(z) \\approx 1 + \\mathrm{Q1} \\cdot z + \\mathrm{Q2} \\cdot z^2 + \\mathrm{Q3} \\cdot z^3 + \\mathrm{Q4} \\cdot z^4 + \\mathrm{Q5} \\cdot z^5\n*     ```\n*\n*     where\n*\n*     ```tex\n*     \\begin{align*}\n*     \\mathrm{Q1} &= -1.6666666666666567384\\mbox{e-}2 \\\\\n*     \\mathrm{Q2} &= 3.9682539681370365873\\mbox{e-}4 \\\\\n*     \\mathrm{Q3} &= -9.9206344733435987357\\mbox{e-}6 \\\\\n*     \\mathrm{Q4} &= 2.5051361420808517002\\mbox{e-}7 \\\\\n*     \\mathrm{Q5} &= -6.2843505682382617102\\mbox{e-}9\n*     \\end{align*}\n*     ```\n*\n*     where \\\\(z = r^2\\\\) and the values of \\\\(\\mathrm{Q1}\\\\) to \\\\(\\mathrm{Q5}\\\\) are listed in the source. The error is bounded by\n*\n*     ```tex\n*     \\biggl| 1 + \\mathrm{Q1} \\cdot z + \\ldots + \\mathrm{Q5} \\cdot z - \\operatorname{R1}(z) \\biggr| \\leq 2^{-61}\n*     ```\n*\n*     \\\\(\\operatorname{expm1}(r) = e^r - 1\\\\) is then computed by the following specific way which minimizes the accumulated rounding error\n*\n*     ```tex\n*     \\operatorname{expm1}(r) = r + \\frac{r^2}{2} + \\frac{r^3}{2} \\biggl( \\frac{3 - (\\mathrm{R1} + \\mathrm{R1} \\cdot \\frac{r}{2})}{6 - r ( 3 - \\mathrm{R1} \\cdot \\frac{r}{2})} \\biggr)\n*     ```\n*\n*     To compensate for the error in the argument reduction, we use\n*\n*     ```tex\n*     \\begin{align*}\n*     \\operatorname{expm1}(r+c) &= \\operatorname{expm1}(r) + c + \\operatorname{expm1}(r) \\cdot c \\\\\n*     &\\approx \\operatorname{expm1}(r) + c + rc\n*     \\end{align*}\n*     ```\n*\n*     Thus, \\\\(c + rc\\\\) will be added in as the correction terms for \\\\(\\operatorname{expm1}(r+c)\\\\). Now, we can rearrange the term to avoid optimization screw up.\n*\n*     ```tex\n*     \\begin{align*}\n*     \\operatorname{expm1}(r+c) &\\approx r - \\biggl( \\biggl( r + \\biggl( \\frac{r^2}{2} \\biggl( \\frac{\\mathrm{R1} - (3 - \\mathrm{R1} \\cdot \\frac{r}{2})}{6 - r (3 - \\mathrm{R1} \\cdot \\frac{r}{2})} \\biggr) - c \\biggr) - c \\biggr) - \\frac{r^2}{2} \\biggr) \\\\\n*     &= r - \\mathrm{E}\n*     \\end{align*}\n*     ```\n*\n* 3.  To scale back to obtain \\\\(\\operatorname{expm1}(x)\\\\), we have (from step 1)\n*\n*     ```tex\n*     \\operatorname{expm1}(x) = \\begin{cases}\n*     2^k  (\\operatorname{expm1}(r) + 1) - 1 \\\\\n*     2^k (\\operatorname{expm1}(r) + (1-2^{-k}))\n*     \\end{cases}\n*     ```\n*\n* ## Special Cases\n*\n* ```tex\n* \\begin{align*}\n* \\operatorname{expm1}(\\infty) &= \\infty \\\\\n* \\operatorname{expm1}(-\\infty) &= -1 \\\\\n* \\operatorname{expm1}(\\mathrm{NaN}) &= \\mathrm{NaN}\n* \\end{align*}\n* ```\n*\n* ## Notes\n*\n* -   For finite arguments, only \\\\(\\operatorname{expm1}(0) = 0\\\\) is exact.\n*\n* -   To save one multiplication, we scale the coefficient \\\\(\\mathrm{Qi}\\\\) to \\\\(\\mathrm{Qi} \\cdot {2^i}\\\\) and replace \\\\(z\\\\) by \\\\(\\frac{x^2}{2}\\\\).\n*\n* -   To achieve maximum accuracy, we compute \\\\(\\operatorname{expm1}(x)\\\\) by\n*\n*     -   if \\\\(x < -56 \\cdot \\ln(2)\\\\), return \\\\(-1.0\\\\) (raise inexact if \\\\(x\\\\) does not equal \\\\(\\infty\\\\))\n*\n*     -   if \\\\(k = 0\\\\), return \\\\(r-\\mathrm{E}\\\\)\n*\n*     -   if \\\\(k = -1\\\\), return \\\\(\\frac{(r-\\mathrm{E})-1}{2}\\\\)\n*\n*     -   if \\\\(k = 1\\\\),\n*\n*         -   if \\\\(r < -0.25\\\\), return \\\\(2((r+0.5)- \\mathrm{E})\\\\)\n*         -   else return \\\\(1+2(r-\\mathrm{E})\\\\)\n*\n*     -   if \\\\(k < -2\\\\) or \\\\(k > 56\\\\), return \\\\(2^k(1-(\\mathrm{E}-r)) - 1\\\\) (or \\\\(e^x-1\\\\))\n*\n*     -   if \\\\(k \\leq 20\\\\), return \\\\(2^k((1-2^{-k})-(\\mathrm{E}-r))\\\\)\n*\n*     -   else return \\\\(2^k(1-((\\mathrm{E}+2^{-k})-r))\\\\)\n*\n* -   For IEEE 754 double, if \\\\(x > 7.09782712893383973096\\mbox{e+}02\\\\), then \\\\(\\operatorname{expm1}(x)\\\\) will overflow.\n*\n* -   The hexadecimal values listed in the source are the intended ones for the implementation constants. Decimal values may be used, provided that the compiler will convert from decimal to binary accurately enough to produce the intended hexadecimal values.\n*\n* -   According to an error analysis, the error is always less than \\\\(1\\\\) ulp (unit in the last place).\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var v = expm1( 0.2 );\n* // returns ~0.221\n*\n* @example\n* var v = expm1( -9.0 );\n* // returns ~-0.9999\n*\n* @example\n* var v = expm1( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = expm1( NaN );\n* // returns NaN\n*/\nfunction expm1( x ) {\n\tvar halfX;\n\tvar twopk;\n\tvar sign;\n\tvar hi;\n\tvar lo;\n\tvar hx;\n\tvar r1;\n\tvar y;\n\tvar z;\n\tvar c;\n\tvar t;\n\tvar e;\n\tvar k;\n\n\tif ( x === PINF || isnan( x ) ) {\n\t\treturn x;\n\t}\n\tif ( x === NINF ) {\n\t\treturn -1.0;\n\t}\n\tif ( x === 0.0 ) {\n\t\treturn x; // handles +-0 (IEEE 754-2008)\n\t}\n\t// Set y = |x|:\n\tif ( x < 0.0 ) {\n\t\tsign = true;\n\t\ty = -x;\n\t} else {\n\t\tsign = false;\n\t\ty = x;\n\t}\n\t// Filter out huge and non-finite arguments...\n\tif ( y >= LN2x56 ) { // if |x| >= 56*ln(2)\n\t\tif ( sign ) { // if x <= -56*ln(2)\n\t\t\treturn -1.0;\n\t\t}\n\t\tif ( y >= OVERFLOW_THRESHOLD ) { // if |x| >= 709.78...\n\t\t\treturn PINF;\n\t\t}\n\t}\n\t// Extract the more significant bits from |x|:\n\thx = getHighWord( y )|0; // asm type annotation\n\n\t// Argument reduction...\n\tif ( y > HALF_LN2 ) { // if |x| > 0.5*ln(2)\n\t\tif ( y < LN2_HALFX3 ) { // if |x| < 1.5*ln(2)\n\t\t\tif ( sign ) {\n\t\t\t\thi = x + LN2_HI;\n\t\t\t\tlo = -LN2_LO;\n\t\t\t\tk = -1;\n\t\t\t} else {\n\t\t\t\thi = x - LN2_HI;\n\t\t\t\tlo = LN2_LO;\n\t\t\t\tk = 1;\n\t\t\t}\n\t\t} else {\n\t\t\tif ( sign ) {\n\t\t\t\tk = (LN2_INV*x) - 0.5;\n\t\t\t} else {\n\t\t\t\tk = (LN2_INV*x) + 0.5;\n\t\t\t}\n\t\t\tk |= 0; // use a bitwise OR to cast `k` to an integer (see also asm.js type annotations: http://asmjs.org/spec/latest/#annotations)\n\t\t\tt = k;\n\t\t\thi = x - (t*LN2_HI); // t*ln2_hi is exact here\n\t\t\tlo = t * LN2_LO;\n\t\t}\n\t\tx = hi - lo;\n\t\tc = (hi-x) - lo;\n\t}\n\t// If |x| < 2**-54 => high word: 0 01111001001 00000000000000000000 => 0x3c900000 = 1016070144  => exponent = 01111001001 = 969 = 1023-54\n\telse if ( hx < 1016070144 ) {\n\t\treturn x;\n\t} else {\n\t\tk = 0;\n\t}\n\t// x is now in primary range...\n\thalfX = 0.5 * x;\n\tz = x * halfX;\n\n\tr1 = 1.0 + ( z * polyval( z ) );\n\n\tt = 3.0 - (r1*halfX);\n\te = z * ( (r1-t) / (6.0 - (x*t)) );\n\tif ( k === 0 ) {\n\t\treturn x - ( (x*e) - z );\t// c is 0\n\t}\n\ttwopk = fromWords( (FLOAT64_EXPONENT_BIAS+k)<<20, 0 ); // 2^k\n\te = ( x * (e-c) ) - c;\n\te -= z;\n\tif ( k === -1 ) {\n\t\treturn ( 0.5*(x-e) ) - 0.5;\n\t}\n\tif ( k === 1 ) {\n\t\tif ( x < -0.25 ) {\n\t\t\treturn -2.0 * ( e - (x+0.5) );\n\t\t}\n\t\treturn 1.0 + ( 2.0 * (x-e) );\n\t}\n\tif ( k <= -2 || k > 56 ) { // suffice to return exp(x)-1\n\t\ty = 1.0 - (e-x);\n\t\tif ( k === 1024 ) {\n\t\t\t// Add k to y's exponent:\n\t\t\thi = (getHighWord( y ) + (k<<20))|0; // asm type annotation\n\t\t\ty = setHighWord( y, hi );\n\t\t} else {\n\t\t\ty *= twopk;\n\t\t}\n\t\treturn y - 1.0;\n\t}\n\tt = 1.0;\n\tif ( k < 20 ) {\n\t\t// 0x3ff00000 - (0x200000>>k) = 1072693248 - (0x200000>>k) => 0x3ff00000 = 00111111111100000000000000000000 and 0x200000 = 0 00000000010 00000000000000000000\n\t\thi = (1072693248 - (0x200000>>k))|0; // asm type annotation\n\t\tt = setHighWord( t, hi ); // t=1-2^-k\n\t\ty = t - (e-x);\n\t} else {\n\t\thi = ( (FLOAT64_EXPONENT_BIAS-k)<<20 )|0; // asm type annotation\n\t\tt = setHighWord( t, hi ); // t=2^-k\n\t\ty = x - (e+t);\n\t\ty += 1.0;\n\t}\n\ty *= twopk;\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default expm1;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* One half times the natural logarithm of 2.\n*\n* @module @stdlib/constants-float64-half-ln-two\n* @type {number}\n*\n* @example\n* import HALF_LN2 from '@stdlib/constants-float64-half-ln-two';\n* // returns 3.46573590279972654709e-01\n*/\n\n// MAIN //\n\n/**\n* One half times the natural logarithm of 2.\n*\n* ```tex\n* \\frac{\\ln 2}{2}\n* ```\n*\n* @constant\n* @type {number}\n* @default 3.46573590279972654709e-01\n*/\nvar HALF_LN2 = 3.46573590279972654709e-01; // 0x3FD62E42 0xFEFA39EF\n\n\n// EXPORTS //\n\nexport default HALF_LN2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -0.03333333333333313;\n\t}\n\treturn -0.03333333333333313 + (x * (0.0015873015872548146 + (x * (-0.0000793650757867488 + (x * (0.000004008217827329362 + (x * -2.0109921818362437e-7))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Euler's number.\n*\n* @module @stdlib/constants-float64-e\n* @type {number}\n*\n* @example\n* import E from '@stdlib/constants-float64-e';\n* // returns 2.718281828459045\n*/\n\n\n// MAIN //\n\n/**\n* Euler's number.\n*\n* @constant\n* @type {number}\n* @default 2.718281828459045\n* @see [OEIS]{@link https://oeis.org/A001113}\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/E_(mathematical_constant)}\n*/\nvar E = 2.718281828459045235360287471352662497757247093699959574966;\n\n\n// EXPORTS //\n\nexport default E;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Difference between one and the smallest value greater than one that can be represented as a double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-eps\n* @type {number}\n*\n* @example\n* import FLOAT64_EPSILON from '@stdlib/constants-float64-eps';\n* // returns 2.220446049250313e-16\n*/\n\n\n// MAIN //\n\n/**\n* Difference between one and the smallest value greater than one that can be represented as a double-precision floating-point number.\n*\n* ## Notes\n*\n* The difference is\n*\n* ```tex\n* \\frac{1}{2^{52}}\n* ```\n*\n* @constant\n* @type {number}\n* @default 2.220446049250313e-16\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n* @see [Machine Epsilon]{@link https://en.wikipedia.org/wiki/Machine_epsilon}\n*/\nvar FLOAT64_EPSILON = 2.2204460492503130808472633361816E-16;\n\n\n// EXPORTS //\n\nexport default FLOAT64_EPSILON;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn Infinity;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 709811.662581658 + (x * (679979.8474157227 + (x * (293136.7857211597 + (x * (74887.54032914672 + (x * (12555.290582413863 + (x * (1443.4299244417066 + (x * (115.24194596137347 + (x * (6.309239205732627 + (x * (0.22668404630224365 + (x * (0.004826466289237662 + (x * 0.00004624429436045379))))))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 0.0 + (x * (362880.0 + (x * (1026576.0 + (x * (1172700.0 + (x * (723680.0 + (x * (269325.0 + (x * (63273.0 + (x * (9450.0 + (x * (870.0 + (x * (45.0 + (x * 1.0))))))))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.00004624429436045379 + (x * (0.004826466289237662 + (x * (0.22668404630224365 + (x * (6.309239205732627 + (x * (115.24194596137347 + (x * (1443.4299244417066 + (x * (12555.290582413863 + (x * (74887.54032914672 + (x * (293136.7857211597 + (x * (679979.8474157227 + (x * 709811.662581658))))))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (45.0 + (x * (870.0 + (x * (9450.0 + (x * (63273.0 + (x * (269325.0 + (x * (723680.0 + (x * (1172700.0 + (x * (1026576.0 + (x * (362880.0 + (x * 0.0))))))))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport abs from '@stdlib/math-base-special-abs';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport E from '@stdlib/constants-float64-e';\nimport EPSILON from '@stdlib/constants-float64-eps';\nimport lanczosSumExpGScaled from './lanczos_sum_expg_scaled.js'; // Lanczos approximation scaled by exp(G)\n\n\n// VARIABLES //\n\nvar G = 10.90051099999999983936049829935654997826;\n\n\n// MAIN //\n\n/**\n* Evaluate the beta function.\n*\n* @param {NonNegativeNumber} a - input value\n* @param {NonNegativeNumber} b - input value\n* @returns {number} evaluated beta function\n*\n* @example\n* var v = beta( 0.0, 0.5 );\n* // returns Infinity\n*\n* @example\n* var v = beta( 1.0, 1.0 );\n* // returns 1.0\n*\n* @example\n* var v = beta( -1.0, 2.0 );\n* // returns NaN\n*\n* @example\n* var v = beta( 5.0, 0.2 );\n* // returns ~3.382\n*\n* @example\n* var v = beta( 4.0, 1.0 );\n* // returns 0.25\n*\n* @example\n* var v = beta( NaN, 2.0 );\n* // returns NaN\n*/\nfunction beta( a, b ) {\n\tvar ambh;\n\tvar agh;\n\tvar bgh;\n\tvar cgh;\n\tvar res;\n\tvar tmp;\n\tvar c;\n\n\tif ( isnan( a ) || isnan( b ) ) {\n\t\treturn NaN;\n\t}\n\tif ( a < 0.0 || b < 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( b === 1.0 ) {\n\t\treturn 1.0 / a;\n\t}\n\tif ( a === 1.0 ) {\n\t\treturn 1.0 / b;\n\t}\n\tc = a + b;\n\tif ( c < EPSILON ) {\n\t\tres = c / a;\n\t\tres /= b;\n\t\treturn res;\n\t}\n\n\t// Special cases:\n\tif ( c === a && b < EPSILON ) {\n\t\treturn 1.0 / b;\n\t}\n\tif ( c === b && a < EPSILON ) {\n\t\treturn 1.0 / a;\n\t}\n\n\tif ( a < b ) {\n\t\t// Swap `a` and `b`:\n\t\ttmp = b;\n\t\tb = a;\n\t\ta = tmp;\n\t}\n\n\t// Lanczos calculation:\n\tagh = a + G - 0.5;\n\tbgh = b + G - 0.5;\n\tcgh = c + G - 0.5;\n\tres = lanczosSumExpGScaled( a ) * ( lanczosSumExpGScaled( b )/lanczosSumExpGScaled( c ) ); // eslint-disable-line max-len\n\tambh = a - 0.5 - b;\n\tif ( ( abs( b*ambh ) < ( cgh*100.0 ) ) && a > 100.0 ) {\n\t\t// Special case where the base of the power term is close to 1; compute `(1+x)^y` instead:\n\t\tres *= exp( ambh * log1p( -b/cgh ) );\n\t} else {\n\t\tres *= pow( agh/cgh, ambh );\n\t}\n\tif ( cgh > 1.0e10 ) {\n\t\t// This avoids possible overflow, but appears to be marginally less accurate:\n\t\tres *= pow( (agh/cgh)*(bgh/cgh), b );\n\t} else {\n\t\tres *= pow( (agh*bgh)/(cgh*cgh), b );\n\t}\n\tres *= sqrt( E/bgh);\n\treturn res;\n}\n\n\n// EXPORTS //\n\nexport default beta;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-max\n* @type {number}\n*\n* @example\n* import FLOAT64_MAX from '@stdlib/constants-float64-max';\n* // returns 1.7976931348623157e+308\n*/\n\n\n// MAIN //\n\n/**\n* Maximum double-precision floating-point number.\n*\n* ## Notes\n*\n* The maximum is given by\n*\n* ```tex\n* 2^{1023} (2 - 2^{-52})\n* ```\n*\n* @constant\n* @type {number}\n* @default 1.7976931348623157e+308\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MAX = 1.7976931348623157e+308;\n\n\n// EXPORTS //\n\nexport default FLOAT64_MAX;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* One half times the mathematical constant `π`.\n*\n* @module @stdlib/constants-float64-half-pi\n* @type {number}\n*\n* @example\n* import HALF_PI from '@stdlib/constants-float64-half-pi';\n* // returns 1.5707963267948966\n*/\n\n\n// MAIN //\n\n/**\n* One half times the mathematical constant `π`.\n*\n* @constant\n* @type {number}\n* @default 1.5707963267948966\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}\n*/\nvar HALF_PI = 1.5707963267948966;\n\n\n// EXPORTS //\n\nexport default HALF_PI;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nimport gamma from '@stdlib/math-base-special-gamma';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport FACTORIALS from './factorials.json';\n\n\n// VARIABLES //\n\nvar MAX_FACTORIAL = 170; // TODO: consider extracting as a constant\n\n\n// MAIN //\n\n/**\n* Evaluates the factorial of `x`.\n*\n* @param {number} x - input value\n* @returns {number} factorial\n*\n* @example\n* var v = factorial( 3.0 );\n* // returns 6.0\n*\n* @example\n* var v = factorial( -1.5 );\n* // returns ~-3.545\n*\n* @example\n* var v = factorial( -0.5 );\n* // returns ~1.772\n*\n* @example\n* var v = factorial( 0.5 );\n* // returns ~0.886\n*\n* @example\n* var v = factorial( -10.0 );\n* // returns NaN\n*\n* @example\n* var v = factorial( 171.0 );\n* // returns Infinity\n*\n* @example\n* var v = factorial( NaN );\n* // returns NaN\n*/\nfunction factorial( x ) {\n\tif ( isnan( x ) ) {\n\t\treturn NaN;\n\t}\n\tif ( isInteger( x ) ) {\n\t\tif ( x < 0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x <= MAX_FACTORIAL ) {\n\t\t\treturn FACTORIALS[ x ];\n\t\t}\n\t\treturn PINF;\n\t}\n\treturn gamma( x + 1.0 );\n}\n\n\n// EXPORTS //\n\nexport default factorial;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn Infinity;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 38474670393.31777 + (x * (36857665043.51951 + (x * (15889202453.72942 + (x * (4059208354.298835 + (x * (680547661.1834733 + (x * (78239755.00312005 + (x * (6246580.776401795 + (x * (341986.3488721347 + (x * (12287.194511824551 + (x * (261.61404416416684 + (x * 2.5066282746310007))))))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 0.0 + (x * (362880.0 + (x * (1026576.0 + (x * (1172700.0 + (x * (723680.0 + (x * (269325.0 + (x * (63273.0 + (x * (9450.0 + (x * (870.0 + (x * (45.0 + (x * 1.0))))))))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 2.5066282746310007 + (x * (261.61404416416684 + (x * (12287.194511824551 + (x * (341986.3488721347 + (x * (6246580.776401795 + (x * (78239755.00312005 + (x * (680547661.1834733 + (x * (4059208354.298835 + (x * (15889202453.72942 + (x * (36857665043.51951 + (x * 38474670393.31777))))))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (45.0 + (x * (870.0 + (x * (9450.0 + (x * (63273.0 + (x * (269325.0 + (x * (723680.0 + (x * (1172700.0 + (x * (1026576.0 + (x * (362880.0 + (x * 0.0))))))))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* Copyright John Maddock 2006-7, 2013-14.\n* Copyright Paul A. Bristow 2007, 2013-14.\n* Copyright Nikhar Agrawal 2013-14.\n* Copyright Christopher Kormanyos 2013-14.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport lanczosSum from '@stdlib/math-base-special-gamma-lanczos-sum';\nimport gamma from '@stdlib/math-base-special-gamma';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport abs from '@stdlib/math-base-special-abs';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport EPSILON from '@stdlib/constants-float64-eps';\nimport E from '@stdlib/constants-float64-e';\nimport G from '@stdlib/constants-float64-gamma-lanczos-g';\n\n\n// VARIABLES //\n\nvar MAX_FACTORIAL = 170; // TODO: consider moving to pkg\nvar FACTORIAL_169 = 4.269068009004705e+304;\n\n\n// MAIN //\n\n/**\n* Calculates the ratio of two gamma functions via Lanczos approximation.\n*\n* ## Notes\n*\n* -   When \\\\( z < \\epsilon \\\\), we get spurious numeric overflow unless we're very careful. This can occur either inside `lanczosSum(z)` or in the final combination of terms. To avoid this, split the product up into 2 (or 3) parts:\n*\n*     ```tex\n*     \\begin{align*}\n*     G(z) / G(L) &= 1 / (z \\cdot G(L)) ; z < \\eps, L = z + \\delta = \\delta \\\\\n*     z * G(L) &= z * G(lim) \\cdot (G(L)/G(lim)) ; lim = \\text{largest factorial}\n*     \\end{align*}\n*     ```\n*\n* @private\n* @param {number} z - first gamma parameter\n* @param {number} delta - difference\n* @returns {number} gamma ratio\n*/\nfunction gammaDeltaRatioLanczos( z, delta ) {\n\tvar result;\n\tvar ratio;\n\tvar zgh;\n\n\tif ( z < EPSILON ) {\n\t\tif ( delta > MAX_FACTORIAL ) {\n\t\t\tratio = gammaDeltaRatioLanczos( delta, MAX_FACTORIAL-delta );\n\t\t\tratio *= z;\n\t\t\tratio *= FACTORIAL_169;\n\t\t\treturn 1.0 / ratio;\n\t\t}\n\t\treturn 1.0 / ( z * gamma( z+delta ) );\n\t}\n\tzgh = z + G - 0.5;\n\tif ( z + delta === z ) {\n\t\tif ( abs(delta) < 10.0 ) {\n\t\t\tresult = exp( ( 0.5-z ) * log1p( delta/zgh ) );\n\t\t} else {\n\t\t\tresult = 1.0;\n\t\t}\n\t} else {\n\t\tif ( abs(delta) < 10.0 ) {\n\t\t\tresult = exp( ( 0.5-z ) * log1p( delta/zgh ));\n\t\t} else {\n\t\t\tresult = pow( zgh / (zgh+delta), z-0.5 );\n\t\t}\n\t\t// Split up the calculation to avoid spurious overflow:\n\t\tresult *= lanczosSum( z ) / lanczosSum( z + delta );\n\t}\n\tresult *= pow( E / ( zgh+delta ), delta );\n\treturn result;\n}\n\n\n// EXPORTS //\n\nexport default gammaDeltaRatioLanczos;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Arbitrary constant `g` to be used in Lanczos approximation functions.\n*\n* @module @stdlib/constants-float64-gamma-lanczos-g\n* @type {number}\n*\n* @example\n* import FLOAT64_GAMMA_LANCZOS_G from '@stdlib/constants-float64-gamma-lanczos-g';\n* // returns 10.900511\n*/\n\n\n// MAIN //\n\n/**\n* Arbitrary constant `g` to be used in Lanczos approximation functions.\n*\n* @constant\n* @type {number}\n* @default 10.900511\n* @see [Lanczos Approximation]{@link https://en.wikipedia.org/wiki/Lanczos_approximation}\n*/\nvar FLOAT64_GAMMA_LANCZOS_G = 10.90051099999999983936049829935654997826;\n\n\n// EXPORTS //\n\nexport default FLOAT64_GAMMA_LANCZOS_G;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* Copyright John Maddock 2006-7, 2013-14.\n* Copyright Paul A. Bristow 2007, 2013-14.\n* Copyright Nikhar Agrawal 2013-14.\n* Copyright Christopher Kormanyos 2013-14.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs';\nimport floor from '@stdlib/math-base-special-floor';\nimport gamma from '@stdlib/math-base-special-gamma';\nimport factorial from '@stdlib/math-base-special-factorial';\nimport gammaDeltaRatioLanczos from './gamma_delta_ratio_lanczos.js';\n\n\n// VARIABLES //\n\nvar MAX_FACTORIAL = 170; // TODO: consider moving to pkg\n\n\n// MAIN //\n\n/**\n* Computes the ratio of two gamma functions.\n*\n* ## Notes\n*\n* -   Specifically, the function evaluates\n*\n*     ```tex\n*     \\frac{ \\Gamma( z ) }{ \\Gamma( z + \\delta ) }\n*     ```\n*\n* @param {number} z - first gamma parameter\n* @param {number} delta - difference\n* @returns {number} gamma ratio\n*\n* @example\n* var y = gammaDeltaRatio( 2.0, 3.0 );\n* // returns ~0.042\n*\n* @example\n* var y = gammaDeltaRatio( 4.0, 0.5 );\n* // returns ~0.516\n*\n* @example\n* var y = gammaDeltaRatio( 100.0, 0.0 );\n* // returns 1.0\n*/\nfunction gammaDeltaRatio( z, delta ) {\n\tvar result;\n\tvar idelta;\n\tvar iz;\n\n\tif ( z <= 0.0 || z + delta <= 0.0 ) {\n\t\t// This isn't very sophisticated, or accurate, but it does work:\n\t\treturn gamma( z ) / gamma( z + delta );\n\t}\n\tidelta = floor( delta );\n\tif ( idelta === delta ) {\n\t\tiz = floor( z );\n\t\tif ( iz === z ) {\n\t\t\t// As both `z` and `delta` are integers, see if we can use a table lookup:\n\t\t\tif ( z <= MAX_FACTORIAL && ( z + delta <= MAX_FACTORIAL ) ) {\n\t\t\t\treturn factorial( iz - 1.0 ) / factorial( idelta + iz - 1.0 );\n\t\t\t}\n\t\t}\n\t\tif ( abs(delta) < 20.0 ) {\n\t\t\t// As `delta` is a small integer, we can use a finite product:\n\t\t\tif ( delta === 0.0 ) {\n\t\t\t\treturn 1.0;\n\t\t\t}\n\t\t\tif ( delta < 0.0 ) {\n\t\t\t\tz -= 1.0;\n\t\t\t\tresult = z;\n\t\t\t\tdelta += 1.0;\n\t\t\t\twhile ( delta !== 0.0 ) {\n\t\t\t\t\tz -= 1.0;\n\t\t\t\t\tresult *= z;\n\t\t\t\t\tdelta += 1.0;\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tresult = 1.0 / z;\n\t\t\tdelta -= 1.0;\n\t\t\twhile ( delta !== 0.0 ) {\n\t\t\t\tz += 1.0;\n\t\t\t\tresult /= z;\n\t\t\t\tdelta -= 1.0;\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\treturn gammaDeltaRatioLanczos( z, delta );\n}\n\n\n// EXPORTS //\n\nexport default gammaDeltaRatio;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Square root of double-precision floating-point epsilon.\n*\n* @module @stdlib/constants-float64-sqrt-eps\n* @type {number}\n*\n* @example\n* import FLOAT64_SQRT_EPSILON from '@stdlib/constants-float64-sqrt-eps';\n* // returns 0.14901161193847656e-7\n*/\n\n\n// MAIN //\n\n/**\n* Square root of double-precision floating-point epsilon.\n*\n* ```tex\n* \\sqrt{\\frac{1}{2^{52}}}\n* ```\n*\n* @constant\n* @type {number}\n* @default 0.14901161193847656e-7\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n* @see [Machine Epsilon]{@link https://en.wikipedia.org/wiki/Machine_epsilon}\n*/\nvar FLOAT64_SQRT_EPSILON = 0.1490116119384765625e-7;\n\n\n// EXPORTS //\n\nexport default FLOAT64_SQRT_EPSILON;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of the maximum double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-max-ln\n* @type {number}\n*\n* @example\n* import FLOAT64_MAX_LN from '@stdlib/constants-float64-max-ln';\n* // returns 709.782712893384\n*/\n\n\n// MAIN //\n\n/**\n* Natural logarithm of the maximum double-precision floating-point number.\n*\n* ## Notes\n*\n* The natural logarithm of the maximum is given by\n*\n* ```tex\n* \\ln \\left( 2^{1023} (2 - 2^{-52}) \\right)\n* ```\n*\n* @constant\n* @type {number}\n* @default 709.782712893384\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MAX_LN = 709.782712893384;\n\n\n// EXPORTS //\n\nexport default FLOAT64_MAX_LN;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_erf.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\nimport setLowWord from '@stdlib/number-float64-base-set-low-word';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport polyvalPP from './polyval_pp.js';\nimport polyvalQQ from './polyval_qq.js';\nimport polyvalPA from './polyval_pa.js';\nimport polyvalQA from './polyval_qa.js';\nimport polyvalRA from './polyval_ra.js';\nimport polyvalSA from './polyval_sa.js';\nimport polyvalRB from './polyval_rb.js';\nimport polyvalSB from './polyval_sb.js';\n\n\n// VARIABLES //\n\nvar TINY = 1.0e-300;\n\n// 2**-56 = 1/(2**56) = 1/72057594037927940\nvar SMALL = 1.3877787807814457e-17;\n\nvar ERX = 8.45062911510467529297e-1;  // 0x3FEB0AC1, 0x60000000\n\nvar PPC = 1.28379167095512558561e-1;  // 0x3FC06EBA, 0x8214DB68\nvar QQC = 1.0;\n\nvar PAC = -2.36211856075265944077e-3; // 0xBF6359B8, 0xBEF77538\nvar QAC = 1.0;\n\nvar RAC = -9.86494403484714822705e-3; // 0xBF843412, 0x600D6435\nvar SAC = 1.0;\n\nvar RBC = -9.86494292470009928597e-3; // 0xBF843412, 0x39E86F4A\nvar SBC = 1.0;\n\n\n// MAIN //\n\n/**\n* Evaluates the complementary error function.\n*\n* ```tex\n* \\operatorname{erf}(x) = \\frac{2}{\\sqrt{\\pi}} \\int^{x}_{0} e^{-t^2}\\ \\mathrm{dt}\n* ```\n*\n* Note that\n*\n* ```tex\n* \\begin{align*}\n* \\operatorname{erfc}(x) &= 1 - \\operatorname{erf}(x) \\\\\n* \\operatorname{erf}(-x) &= -\\operatorname{erf}(x) \\\\\n* \\operatorname{erfc}(-x) &= 2 - \\operatorname{erfc}(x)\n* \\end{align*}\n* ```\n*\n* ## Method\n*\n* 1.  For \\\\(|x| \\in [0, 0.84375)\\\\),\n*\n*     ```tex\n*     \\operatorname{erf}(x) = x + x \\cdot \\operatorname{R}(x^2)\n*     ```\n*\n*     and\n*\n*     ```tex\n*     \\operatorname{erfc}(x) = \\begin{cases}\n*     1 - \\operatorname{erf}(x) & \\textrm{if}\\ x \\in (-.84375,0.25) \\\\\n*     0.5 + ((0.5-x)-x \\mathrm{R}) & \\textrm{if}\\ x \\in [0.25,0.84375)\n*     \\end{cases}\n*     ```\n*\n*     where \\\\(R = P/Q\\\\) and where \\\\(P\\\\) is an odd polynomial of degree \\\\(8\\\\) and \\\\(Q\\\\) is an odd polynomial of degree \\\\(10\\\\).\n*\n*     ```tex\n*     \\biggl| \\mathrm{R} - \\frac{\\operatorname{erf}(x)-x}{x} \\biggr| \\leq 2^{-57.90}\n*     ```\n*\n*     <!-- <note> -->\n*\n*     The formula is derived by noting\n*\n*     ```tex\n*     \\operatorname{erf}(x) = \\frac{2}{\\sqrt{\\pi}}\\biggl(x - \\frac{x^3}{3} + \\frac{x^5}{10} - \\frac{x^7}{42} + \\ldots \\biggr)\n*     ```\n*\n*     and that\n*\n*     ```tex\n*     \\frac{2}{\\sqrt{\\pi}} = 1.128379167095512573896158903121545171688\n*     ```\n*\n*     is close to unity. The interval is chosen because the fix point of \\\\(\\operatorname{erf}(x)\\\\) is near \\\\(0.6174\\\\) (i.e., \\\\(\\operatorname{erf(x)} = x\\\\) when \\\\(x\\\\) is near \\\\(0.6174\\\\)), and, by some experiment, \\\\(0.84375\\\\) is chosen to guarantee the error is less than one ulp for \\\\(\\operatorname{erf}(x)\\\\).\n*\n*     <!-- </note> -->\n*\n* 2.  For \\\\(|x| \\in [0.84375,1.25)\\\\), let \\\\(s = |x|-1\\\\), and \\\\(c = 0.84506291151\\\\) rounded to single (\\\\(24\\\\) bits)\n*\n*     ```tex\n*     \\operatorname{erf}(x) = \\operatorname{sign}(x) \\cdot \\biggl(c + \\frac{\\operatorname{P1}(s)}{\\operatorname{Q1}(s)}\\biggr)\n*     ```\n*\n*     and\n*\n*     ```tex\n*     \\operatorname{erfc}(x) = \\begin{cases}\n*     (1-c) - \\frac{\\operatorname{P1}(s)}{\\operatorname{Q1}(s)} & \\textrm{if}\\ x > 0 \\\\\n*     1 + \\biggl(c + \\frac{\\operatorname{P1}(s)}{\\operatorname{Q1}(s)}\\biggr) & \\textrm{if}\\ x < 0\n*     \\end{cases}\n*     ```\n*\n*     where\n*\n*     ```tex\n*     \\biggl|\\frac{\\mathrm{P1}}{\\mathrm{Q1}} - (\\operatorname{erf}(|x|)-c)\\biggr| \\leq 2^{-59.06}\n*     ```\n*\n*     <!-- <note> -->\n*\n*     Here, we use the Taylor series expansion at \\\\(x = 1\\\\)\n*\n*     ```tex\n*     \\begin{align*}\n*     \\operatorname{erf}(1+s) &= \\operatorname{erf}(1) + s\\cdot \\operatorname{poly}(s) \\\\\n*     &= 0.845.. + \\frac{\\operatorname{P1}(s)}{\\operatorname{Q1}(s)}\n*     \\end{align*}\n*     ```\n*\n*     using a rational approximation to approximate\n*\n*     ```tex\n*     \\operatorname{erf}(1+s) - (c = (\\mathrm{single})0.84506291151)\n*     ```\n*\n*     <!-- </note> -->\n*\n*     Note that, for \\\\(x \\in [0.84375,1.25)\\\\), \\\\(|\\mathrm{P1}/\\mathrm{Q1}| < 0.078\\\\), where\n*\n*     -   \\\\(\\operatorname{P1}(s)\\\\) is a degree \\\\(6\\\\) polynomial in \\\\(s\\\\)\n*     -   \\\\(\\operatorname{Q1}(s)\\\\) is a degree \\\\(6\\\\) polynomial in \\\\(s\\\\)\n*\n* 3.  For \\\\(x \\in [1.25,1/0.35)\\\\),\n*\n*     ```tex\n*     \\begin{align*}\n*     \\operatorname{erfc}(x) &= \\frac{1}{x}e^{-x^2-0.5625+(\\mathrm{R1}/\\mathrm{S1})} \\\\\n*     \\operatorname{erf}(x) &= 1 - \\operatorname{erfc}(x)\n*     \\end{align*}\n*     ```\n*\n*     where\n*\n*     -   \\\\(\\operatorname{R1}(z)\\\\) is a degree \\\\(7\\\\) polynomial in \\\\(z\\\\), where \\\\(z = 1/x^2\\\\)\n*     -   \\\\(\\operatorname{S1}(z)\\\\) is a degree \\\\(8\\\\) polynomial in \\\\(z\\\\)\n*\n* 4.  For \\\\(x \\in [1/0.35,28)\\\\),\n*\n*     ```tex\n*     \\operatorname{erfc}(x) = \\begin{cases}\n*     \\frac{1}{x} e^{-x^2-0.5625+(\\mathrm{R2}/\\mathrm{S2})} & \\textrm{if}\\ x > 0 \\\\\n*     2.0 - \\frac{1}{x} e^{-x^2-0.5625+(\\mathrm{R2}/\\mathrm{S2})} & \\textrm{if}\\ -6 < x < 0 \\\\\n*     2.0 - \\mathrm{tiny} & \\textrm{if}\\ x \\leq -6\n*     \\end{cases}\n*     ```\n*\n*     and\n*\n*     ```tex\n*     \\operatorname{erf}(x) = \\begin{cases}\n*     \\operatorname{sign}(x) \\cdot (1.0 - \\operatorname{erfc}(x)) & \\textrm{if}\\ x < 6 \\\\\n*     \\operatorname{sign}(x) \\cdot (1.0 - \\mathrm{tiny}) & \\textrm{otherwise}\n*     \\end{cases}\n*     ```\n*\n*     where\n*\n*     -   \\\\(\\operatorname{R2}(z)\\\\) is a degree \\\\(6\\\\) polynomial in \\\\(z\\\\), where \\\\(z = 1/x^2\\\\)\n*     -   \\\\(\\operatorname{S2}(z)\\\\) is a degree \\\\(7\\\\) polynomial in \\\\(z\\\\)\n*\n* 5.  For \\\\(x \\in [28, \\infty)\\\\),\n*\n*     ```tex\n*     \\begin{align*}\n*     \\operatorname{erf}(x) &= \\operatorname{sign}(x) \\cdot (1 - \\mathrm{tiny}) & \\textrm{(raise inexact)}\n*     \\end{align*}\n*     ```\n*\n*     and\n*\n*     ```tex\n*     \\operatorname{erfc}(x) = \\begin{cases}\n*     \\mathrm{tiny} \\cdot \\mathrm{tiny} & \\textrm{if}\\ x > 0\\ \\textrm{(raise underflow)} \\\\\n*     2 - \\mathrm{tiny} & \\textrm{if}\\ x < 0\n*     \\end{cases}\n*     ```\n*\n* ## Special Cases\n*\n* ```tex\n* \\begin{align*}\n* \\operatorname{erf}(0) &= 0 \\\\\n* \\operatorname{erf}(-0) &= -0 \\\\\n* \\operatorname{erf}(\\infty) &= 1 \\\\\n* \\operatorname{erf}(-\\infty) &= -1 \\\\\n* \\operatorname{erfc}(0) &= 1 \\\\\n* \\operatorname{erfc}(\\infty) &= 0 \\\\\n* \\operatorname{erfc}(-\\infty) &= 2 \\\\\n* \\operatorname{erf}(\\mathrm{NaN}) &= \\mathrm{NaN} \\\\\n* \\operatorname{erfc}(\\mathrm{NaN}) &= \\mathrm{NaN}\n* \\end{align*}\n* ```\n*\n* ## Notes\n*\n* -   To compute \\\\(\\exp(-x^2-0.5625+(\\mathrm{R}/\\mathrm{S}))\\\\), let \\\\(s\\\\) be a single precision number and \\\\(s := x\\\\); then\n*\n*     ```tex\n*     -x^2 = -s^2 + (s-x)(s+x)\n*     ```\n*\n*     and\n*\n*     ```tex\n*     e^{-x^2-0.5626+(\\mathrm{R}/\\mathrm{S})} = e^{-s^2-0.5625} e^{(s-x)(s+x)+(\\mathrm{R}/\\mathrm{S})}\n*     ```\n*\n* -   `#4` and `#5` make use of the asymptotic series\n*\n*     ```tex\n*     \\operatorname{erfc}(x) \\approx \\frac{e^{-x^2}}{x\\sqrt{\\pi}} (1 + \\operatorname{poly}(1/x^2))\n*     ```\n*\n*     We use a rational approximation to approximate\n*\n*     ```tex\n*     g(s) = f(1/x^2) = \\ln(\\operatorname{erfc}(x) \\cdot x) - x^2 + 0.5625\n*     ```\n*\n* -   The error bound for \\\\(\\mathrm{R1}/\\mathrm{S1}\\\\) is\n*\n*     ```tex\n*     |\\mathrm{R1}/\\mathrm{S1} - f(x)| < 2^{-62.57}\n*     ```\n*\n*     and for \\\\(\\mathrm{R2}/\\mathrm{S2}\\\\) is\n*\n*     ```tex\n*     |\\mathrm{R2}/\\mathrm{S2} - f(x)| < 2^{-61.52}\n*     ```\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var y = erfc( 2.0 );\n* // returns ~0.0047\n*\n* @example\n* var y = erfc( -1.0 );\n* // returns ~1.8427\n*\n* @example\n* var y = erfc( 0.0 );\n* // returns 1.0\n*\n* @example\n* var y = erfc( Infinity );\n* // returns 0.0\n*\n* @example\n* var y = erfc( -Infinity );\n* // returns 2.0\n*\n* @example\n* var y = erfc( NaN );\n* // returns NaN\n*/\nfunction erfc( x ) {\n\tvar sign;\n\tvar ax;\n\tvar z;\n\tvar r;\n\tvar s;\n\tvar y;\n\tvar p;\n\tvar q;\n\n\t// Special case: NaN\n\tif ( isnan( x ) ) {\n\t\treturn NaN;\n\t}\n\t// Special case: +infinity\n\tif ( x === PINF ) {\n\t\treturn 0.0;\n\t}\n\t// Special case: -infinity\n\tif ( x === NINF ) {\n\t\treturn 2.0;\n\t}\n\t// Special case: +-0\n\tif ( x === 0.0 ) {\n\t\treturn 1.0;\n\t}\n\tif ( x < 0.0 ) {\n\t\tsign = true;\n\t\tax = -x;\n\t} else {\n\t\tsign = false;\n\t\tax = x;\n\t}\n\t// |x| < 0.84375\n\tif ( ax < 0.84375 ) {\n\t\tif ( ax < SMALL ) {\n\t\t\treturn 1.0 - x; // raise inexact\n\t\t}\n\t\tz = x * x;\n\t\tr = PPC + ( z*polyvalPP( z ) );\n\t\ts = QQC + ( z*polyvalQQ( z ) );\n\t\ty = r / s;\n\n\t\t// x < 1/4\n\t\tif ( x < 0.25 ) {\n\t\t\treturn 1.0 - ( x + (x*y) );\n\t\t}\n\t\tr = x * y;\n\t\tr += x - 0.5;\n\t\treturn 0.5 - r;\n\t}\n\t// 0.84375 <= |x| < 1.25\n\tif ( ax < 1.25 ) {\n\t\ts = ax - 1.0;\n\t\tp = PAC + ( s*polyvalPA( s ) );\n\t\tq = QAC + ( s*polyvalQA( s ) );\n\t\tif ( sign ) {\n\t\t\treturn 1.0 + ERX + (p/q);\n\t\t}\n\t\treturn 1.0 - ERX - (p/q);\n\t}\n\t// |x| < 28\n\tif ( ax < 28.0 ) {\n\t\ts = 1.0 / (ax*ax);\n\n\t\t// |x| < 1/0.35 ~ 2.857143\n\t\tif ( ax < 2.857142857142857 ) {\n\t\t\tr = RAC + ( s*polyvalRA( s ) );\n\t\t\ts = SAC + ( s*polyvalSA( s ) );\n\t\t}\n\t\t// |x| >= 1/0.35 ~ 2.857143\n\t\telse {\n\t\t\t// x < -6\n\t\t\tif ( x < -6.0 ) {\n\t\t\t\treturn 2.0 - TINY; // raise inexact\n\t\t\t}\n\t\t\tr = RBC + ( s*polyvalRB( s ) );\n\t\t\ts = SBC + ( s*polyvalSB( s ) );\n\t\t}\n\t\tz = setLowWord( ax, 0 ); // pseudo-single (20-bit) precision x\n\t\tr = exp( -(z*z) - 0.5625 ) * exp( ((z-ax)*(z+ax)) + (r/s) );\n\t\tif ( sign ) {\n\t\t\treturn 2.0 - (r/ax);\n\t\t}\n\t\treturn r/ax;\n\t}\n\tif ( sign ) {\n\t\treturn 2.0 - TINY; // raise inexact; ~2\n\t}\n\treturn TINY * TINY; // raise inexact; ~0\n}\n\n\n// EXPORTS //\n\nexport default erfc;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -0.3250421072470015;\n\t}\n\treturn -0.3250421072470015 + (x * (-0.02848174957559851 + (x * (-0.005770270296489442 + (x * -0.000023763016656650163))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.39791722395915535;\n\t}\n\treturn 0.39791722395915535 + (x * (0.0650222499887673 + (x * (0.005081306281875766 + (x * (0.00013249473800432164 + (x * -0.000003960228278775368))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.41485611868374833;\n\t}\n\treturn 0.41485611868374833 + (x * (-0.3722078760357013 + (x * (0.31834661990116175 + (x * (-0.11089469428239668 + (x * (0.035478304325618236 + (x * -0.002166375594868791))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.10642088040084423;\n\t}\n\treturn 0.10642088040084423 + (x * (0.540397917702171 + (x * (0.07182865441419627 + (x * (0.12617121980876164 + (x * (0.01363708391202905 + (x * 0.011984499846799107))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -0.6938585727071818;\n\t}\n\treturn -0.6938585727071818 + (x * (-10.558626225323291 + (x * (-62.375332450326006 + (x * (-162.39666946257347 + (x * (-184.60509290671104 + (x * (-81.2874355063066 + (x * -9.814329344169145))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 19.651271667439257;\n\t}\n\treturn 19.651271667439257 + (x * (137.65775414351904 + (x * (434.56587747522923 + (x * (645.3872717332679 + (x * (429.00814002756783 + (x * (108.63500554177944 + (x * (6.570249770319282 + (x * -0.0604244152148581))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -0.799283237680523;\n\t}\n\treturn -0.799283237680523 + (x * (-17.757954917754752 + (x * (-160.63638485582192 + (x * (-637.5664433683896 + (x * (-1025.0951316110772 + (x * -483.5191916086514))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 30.33806074348246;\n\t}\n\treturn 30.33806074348246 + (x * (325.7925129965739 + (x * (1536.729586084437 + (x * (3199.8582195085955 + (x * (2553.0504064331644 + (x * (474.52854120695537 + (x * -22.44095244658582))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of the smallest normalized double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-min-ln\n* @type {number}\n*\n* @example\n* import FLOAT64_MIN_LN from '@stdlib/constants-float64-min-ln';\n* // returns -708.3964185322641\n*/\n\n\n// MAIN //\n\n/**\n* Natural logarithm of the smallest normalized double-precision floating-point number.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* -\\ln \\left( 2^{1023-1} \\right)\n* ```\n*\n* @constant\n* @type {number}\n* @default -708.3964185322641\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MIN_LN = -708.3964185322641;\n\n\n// EXPORTS //\n\nexport default FLOAT64_MIN_LN;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n* (C) Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport ln from '@stdlib/math-base-special-ln';\nimport MAX_LN from '@stdlib/constants-float64-max-ln';\nimport MIN_LN from '@stdlib/constants-float64-min-ln';\n\n\n// MAIN //\n\n/**\n* Calculates the power term prefix `(z^a)(e^-z)` used in the non-normalized incomplete gammas.\n*\n* @private\n* @param {number} a - function parameter\n* @param {number} z - function parameter\n* @returns {number} power term prefix\n*/\nfunction fullIGammaPrefix( a, z ) {\n\tvar prefix;\n\tvar alz;\n\n\talz = a * ln( z );\n\tif ( z >= 1.0 ) {\n\t\tif ( ( alz < MAX_LN ) && ( -z > MIN_LN ) ) {\n\t\t\tprefix = pow( z, a ) * exp( -z );\n\t\t}\n\t\telse if ( a >= 1.0 ) {\n\t\t\tprefix = pow( z / exp(z/a), a );\n\t\t}\n\t\telse {\n\t\t\tprefix = exp( alz - z );\n\t\t}\n\t}\n\telse {\n\t\t/* eslint-disable no-lonely-if */\n\t\tif ( alz > MIN_LN ) {\n\t\t\tprefix = pow( z, a ) * exp( -z );\n\t\t}\n\t\telse if ( z/a < MAX_LN ) {\n\t\t\tprefix = pow( z / exp(z/a), a );\n\t\t} else {\n\t\t\tprefix = exp( alz - z );\n\t\t}\n\t}\n\treturn prefix;\n}\n\n\n// EXPORTS //\n\nexport default fullIGammaPrefix;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @param {NumericArray} c - polynomial coefficients sorted in ascending degree\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*\n* @example\n* var v = evalpoly( [3.0,2.0,1.0], 10.0 ); // 3*10^0 + 2*10^1 + 1*10^2\n* // returns 123.0\n*/\nfunction evalpoly( c, x ) {\n\tvar p;\n\tvar i;\n\n\ti = c.length;\n\tif ( i < 2 || x === 0.0 ) {\n\t\tif ( i === 0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn c[ 0 ];\n\t}\n\ti -= 1;\n\tp = ( c[ i ] * x ) + c[ i-1 ];\n\ti -= 2;\n\twhile ( i >= 0 ) {\n\t\tp = ( p * x ) + c[ i ];\n\t\ti -= 1;\n\t}\n\treturn p;\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns a Function object.\n*\n* @name Function\n* @constructor\n* @type {Function}\n* @param {...*} [argNames] - parameters names\n* @param {string} body - function body\n* @returns {Function} function\n*\n* @example\n* var add = new Fcn( 'x', 'y', 'return x + y' );\n*\n* var v = add( 1, 2 );\n* // returns 3\n*/\nvar Fcn = Function; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default Fcn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate a polynomial.\n*\n* @module @stdlib/math-base-tools-evalpoly\n*\n* @example\n* import evalpoly from '@stdlib/math-base-tools-evalpoly';\n*\n* var v = evalpoly( [3.0,2.0,1.0], 10.0 ); // 3*10^0 + 2*10^1 + 1*10^2\n* // returns 123.0\n*\n* @example\n* import evalpoly from '@stdlib/math-base-tools-evalpoly';\n*\n* var polyval = evalpoly.factory( [3.0,2.0,1.0] );\n*\n* var v = polyval( 10.0 ); // => 3*10^0 + 2*10^1 + 1*10^2\n* // returns 123.0\n*\n* v = polyval( 5.0 ); // => 3*5^0 + 2*5^1 + 1*5^2\n* // returns 38.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Fcn from '@stdlib/function-ctor';\nimport evalpoly from './main.js';\n\n\n// MAIN //\n\n/**\n* Generates a function for evaluating a polynomial.\n*\n* ## Notes\n*\n* -   The compiled function uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @param {NumericArray} c - polynomial coefficients sorted in ascending degree\n* @returns {Function} function for evaluating a polynomial\n*\n* @example\n* var polyval = factory( [3.0,2.0,1.0] );\n*\n* var v = polyval( 10.0 ); // => 3*10^0 + 2*10^1 + 1*10^2\n* // returns 123.0\n*\n* v = polyval( 5.0 ); // => 3*5^0 + 2*5^1 + 1*5^2\n* // returns 38.0\n*/\nfunction factory( c ) {\n\tvar f;\n\tvar n;\n\tvar m;\n\tvar i;\n\n\t// Avoid exceeding the maximum stack size on V8 :(. Note that the choice of `500` was empirically determined...\n\tif ( c.length > 500 ) {\n\t\treturn polyval;\n\t}\n\t// Code generation. Start with the function definition...\n\tf = 'return function evalpoly(x){';\n\n\t// Create the function body...\n\tn = c.length;\n\n\t// If no coefficients, the function always returns 0...\n\tif ( n === 0 ) {\n\t\tf += 'return 0.0;';\n\t}\n\t// If only one coefficient, the function always returns that coefficient...\n\telse if ( n === 1 ) {\n\t\tf += 'return ' + c[ 0 ] + ';';\n\t}\n\t// If more than one coefficient, apply Horner's method...\n\telse {\n\t\t// If `x == 0`, return the first coefficient...\n\t\tf += 'if(x===0.0){return ' + c[ 0 ] + ';}';\n\n\t\t// Otherwise, evaluate the polynomial...\n\t\tf += 'return ' + c[ 0 ];\n\t\tm = n - 1;\n\t\tfor ( i = 1; i < n; i++ ) {\n\t\t\tf += '+x*';\n\t\t\tif ( i < m ) {\n\t\t\t\tf += '(';\n\t\t\t}\n\t\t\tf += c[ i ];\n\t\t}\n\t\t// Close all the parentheses...\n\t\tfor ( i = 0; i < m-1; i++ ) {\n\t\t\tf += ')';\n\t\t}\n\t\tf += ';';\n\t}\n\t// Close the function:\n\tf += '}';\n\n\t// Add a source directive for debugging:\n\tf += '//# sourceURL=evalpoly.factory.js';\n\n\t// Create the function in the global scope:\n\treturn ( new Fcn( f ) )();\n\n\t/*\n\t*    function evalpoly( x ) {\n\t*        if ( x === 0.0 ) {\n\t*            return c[ 0 ];\n\t*        }\n\t*        return c[0]+x*(c[1]+x*(c[2]+x*(c[3]+...+x*(c[n-2]+x*c[n-1]))));\n\t*    }\n\t*/\n\n\t/**\n\t* Evaluates a polynomial.\n\t*\n\t* @private\n\t* @param {number} x - value at which to evaluate a polynomial\n\t* @returns {number} evaluated polynomial\n\t*/\n\tfunction polyval( x ) {\n\t\treturn evalpoly( c, x );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Alias for `eval` global.\n*\n* @module @stdlib/utils-eval\n*\n* @example\n* import evil from '@stdlib/utils-eval';\n*\n* var v = evil( '5*4*3*2*1' );\n* // returns 120\n*/\n\n// MODULES //\n\nvar evil = eval; // eslint-disable-line no-eval\n\n\n// EXPORTS //\n\nexport default evil;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport evil from '@stdlib/utils-eval';\n\n\n// MAIN //\n\n/**\n* Tests for native `function*()` support.\n*\n* @returns {boolean} boolean indicating if an environment has native `function*()` support\n*\n* @example\n* var bool = hasGeneratorSupport();\n* // returns <boolean>\n*/\nfunction hasGeneratorSupport() {\n\tvar bool;\n\ttry {\n\t\tevil( '\"use strict\"; (function* () {})' );\n\t\tbool = true;\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tbool = false;\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\n\nexport default hasGeneratorSupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs';\nimport EPS from '@stdlib/constants-float64-eps';\n\n\n// VARIABLES //\n\nvar MAX_TERMS = 1000000;\n\n\n// MAIN //\n\n/**\n* Sum the elements of the series given by the supplied function.\n*\n* @param {Function} generator - series function\n* @param {Object} [options] - function options\n* @param {PositiveInteger} [options.maxTerms=1000000] - maximum number of terms to be added\n* @param {PositiveNumber} [options.tolerance=2.22e-16] - further terms are only added as long as the next term is greater than current term times the tolerance\n* @param {number} [options.initialValue=0] - initial value of the resulting sum\n* @returns {number} sum of all series terms\n*\n* @example\n* var gen = geometricSeriesClosure( 0.9 )\n* var out = sumSeries( gen );\n* // returns 10.0\n*\n* function geometricSeriesClosure( x ) {\n*     var exponent = -1;\n*     return function() {\n*         exponent += 1;\n*         return Math.pow( x, exponent );\n*     };\n* }\n*/\nfunction sumSeries( generator, options ) {\n\tvar tolerance;\n\tvar nextTerm;\n\tvar counter;\n\tvar result;\n\tvar opts;\n\n\topts = {};\n\n\tif ( arguments.length > 1 ) {\n\t\topts = options;\n\t}\n\ttolerance = opts.tolerance || EPS;\n\tcounter = opts.maxTerms || MAX_TERMS;\n\tresult = opts.initialValue || 0;\n\n\t// Repeatedly call function...\n\tdo {\n\t\tnextTerm = generator();\n\t\tresult += nextTerm;\n\t}\n\twhile ( ( abs(tolerance * result) < abs(nextTerm) ) && --counter ); // eslint-disable-line no-plusplus\n\n\treturn result;\n}\n\n\n// EXPORTS //\n\nexport default sumSeries;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Sum the elements of the series given by the supplied function.\n*\n* @module @stdlib/math-base-tools-sum-series\n*\n* @example\n* import sumSeries from '@stdlib/math-base-tools-sum-series';\n*\n* var gen = geometricSeriesClosure( 0.9 )\n* var out = sumSeries( gen );\n* // returns 10\n*\n* function geometricSeriesClosure( x ) {\n*     var exponent = -1;\n*     return function() {\n*         exponent += 1;\n*         return Math.pow( x, exponent );\n*     };\n* }\n*/\n\n// MODULES //\n\nimport hasGeneratorSupport from '@stdlib/assert-has-generator-support';\nimport generator from './generators.js';\nimport basic from './basic.js';\n\n\n// MAIN //\n\nvar sumSeries;\nif ( hasGeneratorSupport() ) {\n\tsumSeries = generator;\n} else {\n\tsumSeries = basic;\n}\n\n\n// EXPORTS //\n\nexport default sumSeries;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs';\nimport EPS from '@stdlib/constants-float64-eps';\n\n\n// VARIABLES //\n\nvar MAX_TERMS = 1000000;\n\n\n// MAIN //\n\n/**\n* Sum the elements of the series given by the supplied function.\n*\n* @param {Function} generator - series function\n* @param {Object} [options] - function options\n* @param {PositiveInteger} [options.maxTerms=1000000] - maximum number of terms to be added\n* @param {PositiveNumber} [options.tolerance=2.22e-16] - further terms are only added as long as the next term is greater than current term times the tolerance\n* @param {number} [options.initialValue=0] - initial value of the resulting sum\n* @returns {number} sum of all series terms\n*\n* @example\n* var gen = geometricSeriesGenerator( 0.9 );\n* var out = sumSeries( gen );\n* // returns 10.0\n*\n* function* geometricSeriesGenerator( x ) {\n*     var exponent = 0;\n*     while ( true ) {\n*         yield Math.pow( x, exponent );\n*         exponent += 1;\n*     }\n* }\n*/\nfunction sumSeries( generator, options ) {\n\tvar isgenerator;\n\tvar tolerance;\n\tvar nextTerm;\n\tvar counter;\n\tvar result;\n\tvar opts;\n\n\topts = {};\n\tif ( arguments.length > 1 ) {\n\t\topts = options;\n\t}\n\ttolerance = opts.tolerance || EPS;\n\tcounter = opts.maxTerms || MAX_TERMS;\n\tresult = opts.initialValue || 0;\n\n\tisgenerator = typeof generator.next === 'function';\n\tif ( isgenerator === true ) {\n\t\t// Case A: Iterate over generator object created by a generator function...\n\t\tfor ( nextTerm of generator ) {\n\t\t\tresult += nextTerm;\n\t\t\tif (\n\t\t\t\tabs(tolerance * result) >= abs(nextTerm) ||\n\t\t\t\t--counter === 0 // eslint-disable-line no-plusplus\n\t\t\t) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// Case B: Repeatedly call function...\n\t\tdo {\n\t\t\tnextTerm = generator();\n\t\t\tresult += nextTerm;\n\t\t}\n\t\twhile ( ( abs(tolerance * result) < abs(nextTerm) ) && --counter ); // eslint-disable-line no-plusplus\n\t}\n\treturn result;\n}\n\n\n// EXPORTS //\n\nexport default sumSeries;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n* (C) Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport evalpoly from '@stdlib/math-base-tools-evalpoly';\nimport log1pmx from '@stdlib/math-base-special-log1pmx';\nimport erfc from '@stdlib/math-base-special-erfc';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport exp from '@stdlib/math-base-special-exp';\nimport TWO_PI from '@stdlib/constants-float64-two-pi';\nimport polyvalC0 from './polyval_c0.js';\nimport polyvalC1 from './polyval_c1.js';\nimport polyvalC2 from './polyval_c2.js';\nimport polyvalC3 from './polyval_c3.js';\nimport polyvalC4 from './polyval_c4.js';\nimport polyvalC5 from './polyval_c5.js';\nimport polyvalC6 from './polyval_c6.js';\nimport polyvalC7 from './polyval_c7.js';\nimport polyvalC8 from './polyval_c8.js';\n\n\n// VARIABLES //\n\n// Pre-allocate workspace array:\nvar workspace = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ]; // WARNING: not thread safe\n\n\n// MAIN //\n\n/**\n* Asymptotic expansions of the incomplete gamma functions when `a` is large and `x ~ a` (IEEE double precision or 10^-17).\n*\n* @private\n* @param {number} a - function parameter\n* @param {number} x - function parameter\n* @returns {number} value of asymptotic expansion\n*/\nfunction igammaTemmeLarge( a, x ) {\n\tvar result;\n\tvar sigma;\n\tvar phi;\n\tvar y;\n\tvar z;\n\n\tsigma = ( x-a ) / a;\n\tphi = -log1pmx( sigma );\n\ty = a * phi;\n\tz = sqrt( 2.0 * phi );\n\tif ( x < a ) {\n\t\tz = -z;\n\t}\n\tworkspace[ 0 ] = polyvalC0( z );\n\tworkspace[ 1 ] = polyvalC1( z );\n\tworkspace[ 2 ] = polyvalC2( z );\n\tworkspace[ 3 ] = polyvalC3( z );\n\tworkspace[ 4 ] = polyvalC4( z );\n\tworkspace[ 5 ] = polyvalC5( z );\n\tworkspace[ 6 ] = polyvalC6( z );\n\tworkspace[ 7 ] = polyvalC7( z );\n\tworkspace[ 8 ] = polyvalC8( z );\n\tworkspace[ 9 ] = -0.00059676129019274625;\n\tresult = evalpoly( workspace, 1.0/a );\n\tresult *= exp( -y ) / sqrt( TWO_PI * a );\n\tif ( x < a ) {\n\t\tresult = -result;\n\t}\n\tresult += erfc( sqrt(y) ) / 2.0;\n\treturn result;\n}\n\n\n// EXPORTS //\n\nexport default igammaTemmeLarge;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link https://www.boost.org/doc/libs/1_83_0/boost/math/special_functions/log1p.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2005-2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs';\nimport ln from '@stdlib/math-base-special-ln';\nimport FLOAT_EPS from '@stdlib/constants-float64-eps';\nimport sumSeries from '@stdlib/math-base-tools-sum-series';\nimport log1pSeries from './log1p_series.js';\n\n\n// MAIN //\n\n/**\n* Evaluates \\\\( \\operatorname{log1pmx}(x) = \\ln(1+x) - x \\\\).\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var v = log1pmx( 1.1 );\n* // returns ~-0.358\n*\n* @example\n* var v = log1pmx( 0.99 );\n* // returns ~-0.302\n*\n* @example\n* var v = log1pmx( -0.99 );\n* // returns ~-3.615\n*\n* @example\n* var v = log1pmx( -1.1 );\n* // returns NaN\n*\n* @example\n* var v = log1pmx( NaN );\n* // returns NaN\n*/\nfunction log1pmx( x ) {\n\tvar opts;\n\tvar ax;\n\tif ( x <= -1.0 ) {\n\t\treturn NaN;\n\t}\n\tax = abs( x );\n\tif ( ax > 0.95 ) {\n\t\treturn ln( 1.0 + x ) - x;\n\t}\n\tif ( ax < FLOAT_EPS ) {\n\t\treturn -x * x / 2.0;\n\t}\n\topts = {\n\t\t'initialValue': -x\n\t};\n\treturn sumSeries( log1pSeries( x ), opts );\n}\n\n\n// EXPORTS //\n\nexport default log1pmx;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link https://www.boost.org/doc/libs/1_83_0/boost/math/special_functions/log1p.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2005-2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Creates a function to evaluate a Taylor series expansion `pow(-1, k-1) * pow(x, k) / k` for `ln(1 + x)`.\n*\n* @private\n* @param {number} x - the value at which to evaluate the series\n* @returns {Function} series function\n*/\nfunction log1pSeries( x ) {\n\tvar mMult = -x;\n\tvar mProd = -1.0;\n\tvar k = 0;\n\n\treturn next;\n\n\t/**\n\t* Calculate the next term of the series.\n\t*\n\t* @private\n\t* @returns {number} series expansion term\n\t*/\n\tfunction next() {\n\t\tmProd *= mMult;\n\t\tk += 1;\n\t\treturn mProd / k;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default log1pSeries;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -0.3333333333333333;\n\t}\n\treturn -0.3333333333333333 + (x * (0.08333333333333333 + (x * (-0.014814814814814815 + (x * (0.0011574074074074073 + (x * (0.0003527336860670194 + (x * (-0.0001787551440329218 + (x * (0.00003919263178522438 + (x * (-0.0000021854485106799924 + (x * (-0.00000185406221071516 + (x * (8.296711340953087e-7 + (x * (-1.7665952736826078e-7 + (x * (6.707853543401498e-9 + (x * (1.0261809784240309e-8 + (x * (-4.382036018453353e-9 + (x * 9.14769958223679e-10))))))))))))))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -0.001851851851851852;\n\t}\n\treturn -0.001851851851851852 + (x * (-0.003472222222222222 + (x * (0.0026455026455026454 + (x * (-0.0009902263374485596 + (x * (0.00020576131687242798 + (x * (-4.018775720164609e-7 + (x * (-0.000018098550334489977 + (x * (0.00000764916091608111 + (x * (-0.0000016120900894563446 + (x * (4.647127802807434e-9 + (x * (1.378633446915721e-7 + (x * (-5.752545603517705e-8 + (x * 1.1951628599778148e-8))))))))))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.004133597883597883;\n\t}\n\treturn 0.004133597883597883 + (x * (-0.0026813271604938273 + (x * (0.0007716049382716049 + (x * (0.0000020093878600823047 + (x * (-0.00010736653226365161 + (x * (0.000052923448829120125 + (x * (-0.000012760635188618728 + (x * (3.423578734096138e-8 + (x * (0.0000013721957309062932 + (x * (-6.298992138380055e-7 + (x * 1.4280614206064242e-7))))))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.0006494341563786008;\n\t}\n\treturn 0.0006494341563786008 + (x * (0.00022947209362139917 + (x * (-0.0004691894943952557 + (x * (0.00026772063206283885 + (x * (-0.00007561801671883977 + (x * (-2.396505113867297e-7 + (x * (0.000011082654115347302 + (x * (-0.0000056749528269915965 + (x * 0.0000014230900732435883))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -0.0008618882909167117;\n\t}\n\treturn -0.0008618882909167117 + (x * (0.0007840392217200666 + (x * (-0.0002990724803031902 + (x * (-0.0000014638452578843418 + (x * (0.00006641498215465122 + (x * (-0.00003968365047179435 + (x * 0.000011375726970678419))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -0.00033679855336635813;\n\t}\n\treturn -0.00033679855336635813 + (x * (-0.00006972813758365858 + (x * (0.0002772753244959392 + (x * (-0.00019932570516188847 + (x * (0.00006797780477937208 + (x * (1.419062920643967e-7 + (x * (-0.000013594048189768693 + (x * (0.000008018470256334202 + (x * -0.000002291481176508095))))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.0005313079364639922;\n\t}\n\treturn 0.0005313079364639922 + (x * (-0.0005921664373536939 + (x * (0.0002708782096718045 + (x * (7.902353232660328e-7 + (x * (-0.00008153969367561969 + (x * (0.0000561168275310625 + (x * -0.000018329116582843375))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.00034436760689237765;\n\t}\n\treturn 0.00034436760689237765 + (x * (0.00005171790908260592 + (x * (-0.00033493161081142234 + (x * (0.0002812695154763237 + (x * -0.00010976582244684731))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -0.0006526239185953094;\n\t}\n\treturn -0.0006526239185953094 + (x * (0.0008394987206720873 + (x * -0.000438297098541721))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The mathematical constant `π` times `2`.\n*\n* @module @stdlib/constants-float64-two-pi\n* @type {number}\n*\n* @example\n* import TWO_PI from '@stdlib/constants-float64-two-pi';\n* // returns 6.283185307179586\n*/\n\n\n// MAIN //\n\n/**\n* The mathematical constant `π` times `2`.\n*\n* @constant\n* @type {number}\n* @default 6.283185307179586\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}\n*/\nvar TWO_PI = 6.28318530717958647692528676655900576839433879875021164194988918461563281257241799725606965068423413596429617303; // eslint-disable-line max-len\n\n\n// EXPORTS //\n\nexport default TWO_PI;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n* (C) Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sumSeries from '@stdlib/math-base-tools-sum-series';\nimport lowerIncompleteGammaSeries from './lower_incomplete_gamma_series.js';\n\n\n// MAIN //\n\n/**\n* Sums elements of the series expansion of the lower incomplete gamma function.\n*\n* ## Method\n*\n* -   Multiply result by `((z^a) * (e^-z) / a)` to get the full lower incomplete integral.\n* -   Divide by `tgamma(a)` to get the normalized value.\n*\n* @private\n* @param {number} a - function parameter\n* @param {number} z - function parameter\n* @param {number} initialValue - initial value of the resulting sum\n* @returns {number} sum of terms of lower gamma series\n*/\nfunction lowerGammaSeries( a, z, initialValue ) {\n\tvar result;\n\tvar s;\n\n\tinitialValue = initialValue || 0.0;\n\ts = lowerIncompleteGammaSeries( a, z );\n\tresult = sumSeries( s, {\n\t\t'initialValue': initialValue\n\t});\n\treturn result;\n}\n\n\n// EXPORTS //\n\nexport default lowerGammaSeries;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n* (C) Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Creates a function to evaluate a series expansion of the incomplete gamma function.\n*\n* @private\n* @param {number} a1 - function parameter\n* @param {number} z1 - function parameter\n* @returns {Function} series function\n*/\nfunction lowerIncompleteGammaSeries( a1, z1 ) {\n\tvar result = 1.0;\n\tvar a = a1;\n\tvar z = z1;\n\treturn next;\n\n\t/**\n\t* Calculate the next term of the series.\n\t*\n\t* @private\n\t* @returns {number} series expansion term\n\t*/\n\tfunction next() {\n\t\tvar r = result;\n\t\ta += 1.0;\n\t\tresult *= z/a;\n\t\treturn r;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default lowerIncompleteGammaSeries;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn Infinity;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 709811.662581658 + (x * (679979.8474157227 + (x * (293136.7857211597 + (x * (74887.54032914672 + (x * (12555.290582413863 + (x * (1443.4299244417066 + (x * (115.24194596137347 + (x * (6.309239205732627 + (x * (0.22668404630224365 + (x * (0.004826466289237662 + (x * 0.00004624429436045379))))))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 0.0 + (x * (362880.0 + (x * (1026576.0 + (x * (1172700.0 + (x * (723680.0 + (x * (269325.0 + (x * (63273.0 + (x * (9450.0 + (x * (870.0 + (x * (45.0 + (x * 1.0))))))))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.00004624429436045379 + (x * (0.004826466289237662 + (x * (0.22668404630224365 + (x * (6.309239205732627 + (x * (115.24194596137347 + (x * (1443.4299244417066 + (x * (12555.290582413863 + (x * (74887.54032914672 + (x * (293136.7857211597 + (x * (679979.8474157227 + (x * 709811.662581658))))))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (45.0 + (x * (870.0 + (x * (9450.0 + (x * (63273.0 + (x * (269325.0 + (x * (723680.0 + (x * (1172700.0 + (x * (1026576.0 + (x * (362880.0 + (x * 0.0))))))))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* Copyright John Maddock 2006-7, 2013-14.\n* Copyright Paul A. Bristow 2007, 2013-14.\n* Copyright Nikhar Agrawal 2013-14.\n* Copyright Christopher Kormanyos 2013-14.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport lanczosSumExpGScaled from '@stdlib/math-base-special-gamma-lanczos-sum-expg-scaled';\nimport gammaln from '@stdlib/math-base-special-gammaln';\nimport gamma from '@stdlib/math-base-special-gamma';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport abs from '@stdlib/math-base-special-abs';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport max from '@stdlib/math-base-special-max';\nimport min from '@stdlib/math-base-special-min';\nimport ln from '@stdlib/math-base-special-ln';\nimport MAX_LN from '@stdlib/constants-float64-max-ln';\nimport MIN_LN from '@stdlib/constants-float64-min-ln';\nimport G from '@stdlib/constants-float64-gamma-lanczos-g';\nimport E from '@stdlib/constants-float64-e';\n\n\n// MAIN //\n\n/**\n* Computes `(z^a)*(e^-z) / gamma(a)`.\n*\n* @private\n* @param {number} a - input value\n* @param {number} z - input value\n* @returns {number} function value\n*/\nfunction regularisedGammaPrefix( a, z ) {\n\tvar prefix;\n\tvar amza;\n\tvar agh;\n\tvar alz;\n\tvar amz;\n\tvar sq;\n\tvar d;\n\n\tagh = a + G - 0.5;\n\td = ( (z - a) - G + 0.5 ) / agh;\n\tif ( a < 1.0 ) {\n\t\t// Treat a < 1 as a special case because our Lanczos approximations are optimized against the factorials with a > 1, and for high precision types very small values of `a` can give rather erroneous results for gamma:\n\t\tif ( z <= MIN_LN ) {\n\t\t\t// Use logs, so should be free of cancellation errors:\n\t\t\treturn exp( ( a * ln(z) ) - z - gammaln( a ) );\n\t\t}\n\t\t// No danger of overflow as gamma(a) < 1/a for small a, so direct calculation:\n\t\treturn pow( z, a ) * exp( -z ) / gamma( a );\n\t}\n\tif ( abs(d*d*a) <= 100.0 && a > 150.0 ) {\n\t\t// Special case for large a and a ~ z:\n\t\tprefix = ( a * ( log1p( d ) - d ) ) + ( z * ( 0.5-G ) / agh );\n\t\tprefix = exp( prefix );\n\t}\n\telse {\n\t\t// General case. Direct computation is most accurate, but use various fallbacks for different parts of the problem domain:\n\t\talz = a * ln(z / agh);\n\t\tamz = a - z;\n\t\tif (\n\t\t\tmin(alz, amz) <= MIN_LN ||\n\t\t\tmax(alz, amz) >= MAX_LN\n\t\t) {\n\t\t\tamza = amz / a;\n\t\t\tif (\n\t\t\t\tmin(alz, amz)/2.0 > MIN_LN &&\n\t\t\t\tmax(alz, amz)/2.0 < MAX_LN\n\t\t\t) {\n\t\t\t\t// Compute square root of the result and then square it:\n\t\t\t\tsq = pow( z / agh, a / 2.0 ) * exp( amz / 2.0 );\n\t\t\t\tprefix = sq * sq;\n\t\t\t}\n\t\t\telse if (\n\t\t\t\tmin(alz, amz)/4.0 > MIN_LN &&\n\t\t\t\tmax(alz, amz)/4.0 < MAX_LN &&\n\t\t\t\tz > a\n\t\t\t) {\n\t\t\t\t// Compute the 4th root of the result then square it twice:\n\t\t\t\tsq = pow( z / agh, a / 4.0 ) * exp( amz / 4.0 );\n\t\t\t\tprefix = sq * sq;\n\t\t\t\tprefix *= prefix;\n\t\t\t}\n\t\t\telse if (\n\t\t\t\tamza > MIN_LN &&\n\t\t\t\tamza < MAX_LN\n\t\t\t) {\n\t\t\t\tprefix = pow( (z * exp(amza)) / agh, a );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tprefix = exp( alz + amz );\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tprefix = pow( z / agh, a ) * exp( amz );\n\t\t}\n\t}\n\tprefix *= sqrt( agh / E ) / lanczosSumExpGScaled( a );\n\treturn prefix;\n}\n\n\n// EXPORTS //\n\nexport default regularisedGammaPrefix;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/detail/lgamma_small.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006-7, 2013-14.\n* (C) Copyright Paul A. Bristow 2007, 2013-14.\n* (C) Copyright Nikhar Agrawal 2013-14.\n* (C) Copyright Christopher Kormanyos 2013-14.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ln from '@stdlib/math-base-special-ln';\nimport EPS from '@stdlib/constants-float64-eps';\nimport rateval1 from './rational_p1q1.js';\nimport rateval2 from './rational_p2q2.js';\nimport rateval3 from './rational_p3q3.js';\n\n\n// VARIABLES //\n\nvar Y1 = 0.158963680267333984375;\nvar Y2 = 0.52815341949462890625;\nvar Y3 = 0.452017307281494140625;\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of the gamma function for small arguments.\n*\n* ## Method\n*\n* 1.  For \\\\( z > 2 \\\\), begin by performing argument reduction until \\\\( z \\\\) is in \\\\(\\[2,3)\\\\). Use the following form:\n*\n*     ```tex\n*     \\operatorname{gammaln}(z) = (z-2)(z+1)(Y + R(z-2))\n*     ```\n*\n*     where \\\\( R(z-2) \\\\) is a rational approximation optimized for low absolute error. As long as the absolute error is small compared to the constant \\\\( Y \\\\), then any rounding error in the computation will get wiped out.\n*\n* 2.  If \\\\( z < 1 \\\\), use recurrence to shift to \\\\( z \\\\) in the interval \\\\(\\[1,2\\]\\\\). Then, use one of two approximations: one for \\\\( z \\\\) in \\\\(\\[1,1.5\\]\\\\) and one for \\\\( z \\\\) in \\\\(\\[1.5,2\\]\\\\):\n*\n*     -   For \\(( z \\\\) in \\\\(\\[1,1.5\\]\\\\), use\n*\n*         ```tex\n*         \\operatorname{gammaln}(z) = (z-1)(z-2)(Y + R(z-1))\n*         ```\n*\n*         where \\\\( R(z-1) \\\\) is a rational approximation optimized for low absolute error. As long as the absolute error is small compared to the constant \\\\( Y \\\\), then any rounding error in the computation will get wiped out.\n*\n*     -   For \\\\( z \\\\) in \\\\(\\[1.5,2\\]\\\\), use\n*\n*         ```tex\n*         \\operatorname{gammaln}(z) = (2-z)(1-z)(Y + R(2-z))\n*         ```\n*\n*         where \\\\( R(2-z) \\\\) is a rational approximation optimized for low absolute error. As long as the absolute error is small compared to the constant \\\\( Y \\\\), then any rounding error in the computation will get wiped out.\n*\n* ## Notes\n*\n* -   Relative error:\n*\n*     | function | peak         | maximum deviation |\n*     |:--------:|:------------:|:-----------------:|\n*     | R(Z-2)   | 4.231e-18    | 5.900e-24         |\n*     | R(Z-1)   | 1.230011e-17 | 3.139e-021        |\n*     | R(2-Z)   | 1.797565e-17 | 2.151e-021        |\n*\n* @private\n* @param {number} z - input value\n* @param {number} zm1 - `z` minus one\n* @param {number} zm2 - `z` minus two\n* @returns {number} function value\n*/\nfunction lgammaSmallImp( z, zm1, zm2 ) {\n\tvar prefix;\n\tvar result;\n\tvar r;\n\tvar R;\n\n\tif ( z < EPS ) {\n\t\treturn -ln( z );\n\t}\n\tif ( zm1 === 0.0 || zm2 === 0.0 ) {\n\t\treturn 0.0;\n\t}\n\tresult = 0.0;\n\tif ( z > 2.0 ) {\n\t\tif ( z >= 3.0 ) {\n\t\t\tdo {\n\t\t\t\tz -= 1.0;\n\t\t\t\tzm2 -= 1.0;\n\t\t\t\tresult += ln(z);\n\t\t\t} while ( z >= 3.0 );\n\t\t\tzm2 = z - 2.0;\n\t\t}\n\t\tr = zm2 * ( z+1.0 );\n\t\tR = rateval1( zm2 );\n\t\tresult += ( r*Y1 ) + ( r*R );\n\t\treturn result;\n\t}\n\tif ( z < 1.0 ) {\n\t\tresult += -ln(z);\n\t\tzm2 = zm1;\n\t\tzm1 = z;\n\t\tz += 1.0;\n\t}\n\tif ( z <= 1.5 ) {\n\t\tr = rateval2( zm1 );\n\t\tprefix = zm1 * zm2;\n\t\tresult += ( prefix*Y2 ) + ( prefix*r );\n\t\treturn result;\n\t}\n\t// Case: 1.5 < z <= 2\n\tr = zm2 * zm1;\n\tR = rateval3( -zm2 );\n\tresult += ( r*Y3 ) + ( r*R );\n\treturn result;\n}\n\n\n// EXPORTS //\n\nexport default lgammaSmallImp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.01803556856784494;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -0.01803556856784494 + (x * (0.02512664961998968 + (x * (0.049410315156753225 + (x * (0.0172491608709614 + (x * (-0.0002594535632054381 + (x * (-0.0005410098692152044 + (x * (-0.00003245886498259485 + (x * 0.0))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (1.962029871977952 + (x * (1.4801966942423133 + (x * (0.5413914320717209 + (x * (0.09885042511280101 + (x * (0.008213096746488934 + (x * (0.00022493629192211576 + (x * -2.2335276320861708e-7))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.0 + (x * (-0.00003245886498259485 + (x * (-0.0005410098692152044 + (x * (-0.0002594535632054381 + (x * (0.0172491608709614 + (x * (0.049410315156753225 + (x * (0.02512664961998968 + (x * -0.01803556856784494))))))))))))); // eslint-disable-line max-len\n\t\ts2 = -2.2335276320861708e-7 + (x * (0.00022493629192211576 + (x * (0.008213096746488934 + (x * (0.09885042511280101 + (x * (0.5413914320717209 + (x * (1.4801966942423133 + (x * (1.962029871977952 + (x * 1.0))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 0.04906224540690395;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 0.04906224540690395 + (x * (-0.09691175301595212 + (x * (-0.4149833583594954 + (x * (-0.4065671242119384 + (x * (-0.1584135863906922 + (x * (-0.024014982064857155 + (x * -0.0010034668769627955))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (3.0234982984646304 + (x * (3.4873958536072385 + (x * (1.9141558827442668 + (x * (0.5071377386143635 + (x * (0.05770397226904519 + (x * 0.001957681026011072))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = -0.0010034668769627955 + (x * (-0.024014982064857155 + (x * (-0.1584135863906922 + (x * (-0.4065671242119384 + (x * (-0.4149833583594954 + (x * (-0.09691175301595212 + (x * 0.04906224540690395))))))))))); // eslint-disable-line max-len\n\t\ts2 = 0.001957681026011072 + (x * (0.05770397226904519 + (x * (0.5071377386143635 + (x * (1.9141558827442668 + (x * (3.4873958536072385 + (x * (3.0234982984646304 + (x * 1.0))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.029232972183027003;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -0.029232972183027003 + (x * (0.14421626775719232 + (x * (-0.14244039073863127 + (x * (0.05428096940550536 + (x * (-0.008505359768683364 + (x * (0.0004311713426792973 + (x * 0.0))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (-1.5016935605448505 + (x * (0.846973248876495 + (x * (-0.22009515181499575 + (x * (0.02558279715597587 + (x * (-0.0010066679553914337 + (x * -8.271935218912905e-7))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.0 + (x * (0.0004311713426792973 + (x * (-0.008505359768683364 + (x * (0.05428096940550536 + (x * (-0.14244039073863127 + (x * (0.14421626775719232 + (x * -0.029232972183027003))))))))))); // eslint-disable-line max-len\n\t\ts2 = -8.271935218912905e-7 + (x * (-0.0010066679553914337 + (x * (0.02558279715597587 + (x * (-0.22009515181499575 + (x * (0.846973248876495 + (x * (-1.5016935605448505 + (x * 1.0))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n* (C) Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport powm1 from '@stdlib/math-base-special-powm1';\nimport sumSeries from '@stdlib/math-base-tools-sum-series';\nimport gamma1pm1 from '@stdlib/math-base-special-gamma1pm1';\nimport smallGamma2Series from './small_gamma2_series.js';\n\n\n// MAIN //\n\n/**\n* Compute the full upper fraction (Q) when `a` is very small.\n*\n* @private\n* @param {number} a - function parameter\n* @param {number} x - function parameter\n* @param {boolean} invert - boolean indicating if the upper tail of the incomplete gamma function should be evaluated\n* @returns {Array} full upper fraction (Q) and pgam\n*/\nfunction tgammaSmallUpperPart( a, x, invert ) {\n\tvar initialValue;\n\tvar result;\n\tvar pgam;\n\tvar p;\n\tvar s;\n\n\tresult = gamma1pm1( a );\n\tpgam = ( result + 1.0 ) / a;\n\tp = powm1( x, a );\n\tresult -= p;\n\tresult /= a;\n\ts = smallGamma2Series( a, x );\n\tp += 1.0;\n\tinitialValue = ( invert ) ? pgam : 0.0;\n\tresult = -p * sumSeries( s, {\n\t\t'initialValue': (initialValue - result) / p\n\t});\n\tif ( invert ) {\n\t\tresult = -result;\n\t}\n\treturn [ result, pgam ];\n}\n\n\n// EXPORTS //\n\nexport default tgammaSmallUpperPart;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006-7, 2013-14.\n* (C) Copyright Paul A. Bristow 2007, 2013-14.\n* (C) Copyright Nikhar Agrawal 2013-14.\n* (C) Copyright Christopher Kormanyos 2013-14.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport gamma from '@stdlib/math-base-special-gamma';\nimport expm1 from '@stdlib/math-base-special-expm1';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport lgammaSmallImp from './lgamma_small_imp.js';\n\n\n// MAIN //\n\n/**\n* Computes `gamma(x+1) - 1`.\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var v = gammap1m1( 0.2 );\n* // returns ~-0.082\n*\n* @example\n* var v = gammap1m1( -9.2 );\n* // returns ~-1.0\n*\n* @example\n* var v = gammap1m1( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = gammap1m1( -3.0 );\n* // returns NaN\n*\n* @example\n* var v = gammap1m1( NaN );\n* // returns NaN\n*/\nfunction gammap1m1( x ) {\n\tif ( isnan( x ) ) {\n\t\treturn NaN;\n\t}\n\tif ( x < 0.0 ) {\n\t\tif ( x < -0.5 ) {\n\t\t\t// Best method is simply to subtract 1 from gamma:\n\t\t\treturn gamma( 1.0+x ) - 1.0;\n\t\t}\n\t\t// Use expm1 on the logarithm of gamma:\n\t\treturn expm1( -log1p( x ) + lgammaSmallImp( x+2.0, x+1.0, x ) );\n\t}\n\tif ( x < 2.0 ) {\n\t\t// Use expm1 on the logarithm of gamma:\n\t\treturn expm1( lgammaSmallImp( x+1.0, x, x-1.0 ) );\n\t}\n\t// Best method is simply to subtract 1 from gamma:\n\treturn gamma( 1.0+x ) - 1.0;\n}\n\n\n// EXPORTS //\n\nexport default gammap1m1;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_60_0/boost/math/special_functions/powm1.hpp}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport abs from '@stdlib/math-base-special-abs';\nimport expm1 from '@stdlib/math-base-special-expm1';\nimport ln from '@stdlib/math-base-special-ln';\nimport pow from '@stdlib/math-base-special-pow';\nimport trunc from '@stdlib/math-base-special-trunc';\n\n\n// MAIN //\n\n/**\n* Evaluates `bˣ - 1`.\n*\n* @param {number} b - base\n* @param {number} x - exponent\n* @returns {number} function value\n*\n* @example\n* var y = powm1( 2.0, 3.0 );\n* // returns 7.0\n*\n* @example\n* var y = powm1( 4.0, 0.5 );\n* // returns 1.0\n*\n* @example\n* var y = powm1( 0.0, 100.0 );\n* // returns -1.0\n*\n* @example\n* var y = powm1( 100.0, 0.0 );\n* // returns 0.0\n*\n* @example\n* var y = powm1( 0.0, 0.0 );\n* // returns 0.0\n*\n* @example\n* var y = powm1( 3.141592653589793, 5.0 );\n* // returns ~305.0197\n*\n* @example\n* var y = powm1( NaN, 3.0 );\n* // returns NaN\n*\n* @example\n* var y = powm1( 5.0, NaN );\n* // returns NaN\n*/\nfunction powm1( b, x ) {\n\tvar y;\n\tif (\n\t\tisnan( b ) ||\n\t\tisnan( x )\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x === 0.0 ) {\n\t\t// Any number raised to zero (including 0) is always 1 => b^0 - 1 = 0\n\t\treturn 0.0;\n\t}\n\tif ( b === 0.0 ) {\n\t\t// Zero raised to any number (except 0) is always zero => 0^x - 1 = -1\n\t\treturn -1.0;\n\t}\n\tif ( b < 0.0 && x%2.0 === 0 ) {\n\t\t// If `x` is even, recognize that `(-b)**x == (b)**x`...\n\t\tb = -b;\n\t}\n\tif ( b > 0.0 ) {\n\t\tif (\n\t\t\tabs( x*(b-1.0) ) < 0.5 ||\n\t\t\tabs( x ) < 0.2\n\t\t) {\n\t\t\t// No good/quick approximation for ln(b)*x, so we have to evaluate...\n\t\t\ty = ln( b ) * x;\n\t\t\tif ( y < 0.5 ) {\n\t\t\t\treturn expm1( y );\n\t\t\t}\n\t\t}\n\t} else if ( trunc( x ) !== x ) {\n\t\t// Exponentiation would yield a complex result...\n\t\treturn NaN;\n\t}\n\treturn pow( b, x ) - 1.0;\n}\n\n\n// EXPORTS //\n\nexport default powm1;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n* (C) Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n/**\n* Series representation for upper fraction when `z` is small.\n*\n* @private\n* @param {number} a - function parameter\n* @param {number} x - function parameter\n* @returns {Function} series function\n*/\nfunction smallGamma2Series( a, x ) {\n\tvar result;\n\tvar apn;\n\tvar n;\n\tvar r;\n\n\tresult = -x;\n\tx = -x;\n\tapn = a + 1.0;\n\tn = 1;\n\treturn next;\n\n\t/**\n\t* Calculate the next term of the series.\n\t*\n\t* @private\n\t* @returns {number} series expansion term\n\t*/\n\tfunction next() {\n\t\tr = result / apn;\n\t\tresult *= x;\n\t\tn += 1;\n\t\tresult /= n;\n\t\tapn += 1.0;\n\t\treturn r;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default smallGamma2Series;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs';\nimport FLOAT32_SMALLEST_NORMAL from '@stdlib/constants-float32-smallest-normal';\nimport EPS from '@stdlib/constants-float64-eps';\n\n\n// VARIABLES //\n\nvar MAX_ITER = 1000000;\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates a continued fraction expansion.\n*\n* ```text\n*           a1\n*      ---------------\n*      b1 +     a2\n*           ----------\n*            b2 +   a3\n*                -----\n*                b3 + ...\n* ```\n*\n* @private\n* @param {Function} gen - function giving terms of continued fraction expansion\n* @param {PositiveNumber} factor - further terms are only added as long as factor*result is smaller than the next term\n* @param {PositiveInteger} maxIter - maximum number of iterations\n* @returns {number} evaluated expansion\n*/\nfunction continuedFractionA( gen, factor, maxIter ) {\n\tvar isgenerator;\n\tvar delta;\n\tvar a0;\n\tvar f;\n\tvar C;\n\tvar D;\n\tvar v;\n\n\tisgenerator = typeof gen.next === 'function';\n\tv = ( isgenerator ) ? gen.next().value : gen();\n\tf = v[ 1 ];\n\ta0 = v[ 0 ];\n\tif ( f === 0.0 ) {\n\t\tf = FLOAT32_SMALLEST_NORMAL;\n\t}\n\tC = f;\n\tD = 0;\n\tif ( isgenerator === true ) {\n\t\tdo {\n\t\t\tv = gen.next().value;\n\t\t\tif ( v ) {\n\t\t\t\tD = v[ 1 ] + ( v[ 0 ] * D );\n\t\t\t\tif ( D === 0.0 ) {\n\t\t\t\t\tD = FLOAT32_SMALLEST_NORMAL;\n\t\t\t\t}\n\t\t\t\tC = v[ 1 ] + ( v[ 0 ] / C );\n\t\t\t\tif ( C === 0.0 ) {\n\t\t\t\t\tC = FLOAT32_SMALLEST_NORMAL;\n\t\t\t\t}\n\t\t\t\tD = 1.0 / D;\n\t\t\t\tdelta = C * D;\n\t\t\t\tf *= delta;\n\t\t\t}\n\t\t} while ( ( abs( delta - 1.0 ) > factor ) && --maxIter ); // eslint-disable-line no-plusplus\n\t} else {\n\t\tdo {\n\t\t\tv = gen();\n\t\t\tif ( v ) {\n\t\t\t\tD = v[ 1 ] + ( v[ 0 ] * D );\n\t\t\t\tif ( D === 0.0 ) {\n\t\t\t\t\tD = FLOAT32_SMALLEST_NORMAL;\n\t\t\t\t}\n\t\t\t\tC = v[ 1 ] + ( v[ 0 ] / C );\n\t\t\t\tif ( C === 0.0 ) {\n\t\t\t\t\tC = FLOAT32_SMALLEST_NORMAL;\n\t\t\t\t}\n\t\t\t\tD = 1.0 / D;\n\t\t\t\tdelta = C * D;\n\t\t\t\tf *= delta;\n\t\t\t}\n\t\t} while ( v && ( abs( delta - 1.0 ) > factor ) && --maxIter ); // eslint-disable-line no-plusplus\n\t}\n\treturn a0 / f;\n}\n\n/**\n* Evaluates a continued fraction expansion.\n*\n* ```text\n*      b0 +    a1\n*      ---------------\n*      b1 +     a2\n*           ----------\n*           b2 +   a3\n*                -----\n*                b3 + ...\n* ```\n*\n* @private\n* @param {Function} gen - function giving terms of continued fraction expansion\n* @param {PositiveNumber} factor - further terms are only added as long as factor*result is smaller than the next term\n* @param {PositiveInteger} maxIter - maximum number of iterations\n* @returns {number} evaluated expansion\n*/\nfunction continuedFractionB( gen, factor, maxIter ) {\n\tvar isgenerator;\n\tvar delta;\n\tvar f;\n\tvar C;\n\tvar D;\n\tvar v;\n\n\tisgenerator = typeof gen.next === 'function';\n\tv = ( isgenerator ) ? gen.next().value : gen();\n\tf = v[ 1 ];\n\tif ( f === 0.0 ) {\n\t\tf = FLOAT32_SMALLEST_NORMAL;\n\t}\n\tC = f;\n\tD = 0.0;\n\tif ( isgenerator === true ) {\n\t\tdo {\n\t\t\tv = gen.next().value;\n\t\t\tif ( v ) {\n\t\t\t\tD = v[ 1 ] + ( v[ 0 ] * D );\n\t\t\t\tif ( D === 0.0 ) {\n\t\t\t\t\tD = FLOAT32_SMALLEST_NORMAL;\n\t\t\t\t}\n\t\t\t\tC = v[ 1 ] + ( v[ 0 ] / C );\n\t\t\t\tif ( C === 0.0 ) {\n\t\t\t\t\tC = FLOAT32_SMALLEST_NORMAL;\n\t\t\t\t}\n\t\t\t\tD = 1.0 / D;\n\t\t\t\tdelta = C * D;\n\t\t\t\tf *= delta;\n\t\t\t}\n\t\t} while ( v && ( abs( delta - 1.0 ) > factor ) && --maxIter ); // eslint-disable-line no-plusplus\n\t} else {\n\t\tdo {\n\t\t\tv = gen();\n\t\t\tif ( v ) {\n\t\t\t\tD = v[ 1 ] + ( v[ 0 ] * D );\n\t\t\t\tif ( D === 0.0 ) {\n\t\t\t\t\tD = FLOAT32_SMALLEST_NORMAL;\n\t\t\t\t}\n\t\t\t\tC = v[ 1 ] + ( v[ 0 ] / C );\n\t\t\t\tif ( C === 0.0 ) {\n\t\t\t\t\tC = FLOAT32_SMALLEST_NORMAL;\n\t\t\t\t}\n\t\t\t\tD = 1.0 / D;\n\t\t\t\tdelta = C * D;\n\t\t\t\tf *= delta;\n\t\t\t}\n\t\t} while ( v && ( abs( delta - 1.0 ) > factor ) && --maxIter ); // eslint-disable-line no-plusplus\n\t}\n\treturn f;\n}\n\n\n// MAIN //\n\n/**\n* Evaluates the continued fraction approximation for the supplied series generator using the modified Lentz algorithm.\n*\n* ## References\n*\n* -   Lentz, William J. 1976. \"Generating bessel functions in Mie scattering calculations using continued fractions.\" _Applied Optics_ 15 (3): 668–71. doi:[10.1364/AO.15.000668](https://doi.org/10.1364/AO.15.000668).\n*\n* @param {Function} generator - function returning terms of continued fraction expansion\n* @param {Object} [options] - function options\n* @param {PositiveInteger} [options.maxIter=1000] - maximum number of iterations\n* @param {PositiveNumber} [options.tolerance=2.22e-16] - further terms are only added as long as the next term is greater than current term times the tolerance\n* @param {boolean} [options.keep=false] - whether to keep the leading b term\n* @returns {number} value of continued fraction\n*\n* @example\n* // Continued fraction for (e-1)^(-1):\n* var gen = generator();\n* var out = continuedFraction( gen );\n* // returns ~0.582\n*\n* function* generator() {\n*    var i = 0;\n*    while ( true ) {\n*        i++;\n*        yield [ i, i ];\n*    }\n* }\n*/\nfunction continuedFraction( generator, options ) {\n\tvar maxIter;\n\tvar opts;\n\tvar eps;\n\n\topts = {};\n\tif ( arguments.length > 1 ) {\n\t\topts = options;\n\t}\n\tmaxIter = opts.maxIter || MAX_ITER;\n\teps = opts.tolerance || EPS;\n\n\tif ( opts.keep ) {\n\t\treturn continuedFractionB( generator, eps, maxIter );\n\t}\n\treturn continuedFractionA( generator, eps, maxIter );\n}\n\n\n// EXPORTS //\n\nexport default continuedFraction;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Smallest positive single-precision floating-point normal number.\n*\n* @module @stdlib/constants-float32-smallest-normal\n* @type {number}\n*\n* @example\n* import FLOAT32_SMALLEST_NORMAL from '@stdlib/constants-float32-smallest-normal';\n* // returns 1.1754943508222875e-38\n*/\n\n\n// MAIN //\n\n/**\n* The smallest positive single-precision floating-point normal number.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* \\frac{1}{2^{127-1}}\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 0 00000001 00000000000000000000000\n* ```\n*\n* @constant\n* @type {number}\n* @default 1.1754943508222875e-38\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT32_SMALLEST_NORMAL = 1.1754943508222875e-38;\n\n\n// EXPORTS //\n\nexport default FLOAT32_SMALLEST_NORMAL;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs';\nimport EPS from '@stdlib/constants-float64-eps';\nimport FLOAT32_SMALLEST_NORMAL from '@stdlib/constants-float32-smallest-normal';\n\n\n// VARIABLES //\n\nvar MAX_ITER = 1000000;\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates a continued fraction expansion.\n*\n* ```text\n*           a1\n*      ---------------\n*      b1 +     a2\n*           ----------\n*            b2 +   a3\n*                -----\n*                b3 + ...\n* ```\n*\n* @private\n* @param {Function} gen - function giving terms of continued fraction expansion\n* @param {PositiveNumber} factor - further terms are only added as long as factor*result is smaller than the next term\n* @param {PositiveInteger} maxIter - maximum number of iterations\n* @returns {number} evaluated expansion\n*/\nfunction continuedFractionA( gen, factor, maxIter ) {\n\tvar delta;\n\tvar a0;\n\tvar C;\n\tvar D;\n\tvar f;\n\tvar v;\n\n\tv = gen();\n\tf = v[ 1 ];\n\ta0 = v[ 0 ];\n\tif ( f === 0 ) {\n\t\tf = FLOAT32_SMALLEST_NORMAL;\n\t}\n\tC = f;\n\tD = 0.0;\n\n\tdo {\n\t\tv = gen();\n\t\tif ( v ) {\n\t\t\tD = v[ 1 ] + ( v[ 0 ] * D );\n\t\t\tif ( D === 0.0 ) {\n\t\t\t\tD = FLOAT32_SMALLEST_NORMAL;\n\t\t\t}\n\t\t\tC = v[ 1 ] + ( v[ 0 ] / C );\n\t\t\tif ( C === 0.0 ) {\n\t\t\t\tC = FLOAT32_SMALLEST_NORMAL;\n\t\t\t}\n\t\t\tD = 1.0 / D;\n\t\t\tdelta = C * D;\n\t\t\tf *= delta;\n\t\t}\n\t} while ( v && ( abs( delta - 1.0 ) > factor ) && --maxIter ); // eslint-disable-line no-plusplus\n\n\treturn a0 / f;\n}\n\n/**\n* Evaluates a continued fraction expansion.\n*\n* ```text\n*      b0 +   a1\n*      ---------------\n*      b1 +   a2\n*           ----------\n*           b2 +   a3\n*                -----\n*                b3 + ...\n* ```\n*\n* @private\n* @param {Function} gen - function giving terms of continued fraction expansion\n* @param {PositiveNumber} factor - further terms are only added as long as factor*result is smaller than the next term\n* @param {PositiveInteger} maxIter - maximum number of iterations\n* @returns {number} evaluated expansion\n*/\nfunction continuedFractionB( gen, factor, maxIter ) {\n\tvar delta;\n\tvar C;\n\tvar D;\n\tvar f;\n\tvar v;\n\n\tv = gen();\n\tf = v[ 1 ];\n\tif ( f === 0.0 ) {\n\t\tf = FLOAT32_SMALLEST_NORMAL;\n\t}\n\tC = f;\n\tD = 0.0;\n\tdo {\n\t\tv = gen();\n\t\tif ( v ) {\n\t\t\tD = v[ 1 ] + ( v[ 0 ] * D );\n\t\t\tif ( D === 0.0 ) {\n\t\t\t\tD = FLOAT32_SMALLEST_NORMAL;\n\t\t\t}\n\t\t\tC = v[ 1 ] + ( v[ 0 ] / C );\n\t\t\tif ( C === 0.0 ) {\n\t\t\t\tC = FLOAT32_SMALLEST_NORMAL;\n\t\t\t}\n\t\t\tD = 1.0 / D;\n\t\t\tdelta = C * D;\n\t\t\tf *= delta;\n\t\t}\n\t} while ( v && ( abs( delta - 1.0 ) > factor ) && --maxIter ); // eslint-disable-line no-plusplus\n\treturn f;\n}\n\n\n// MAIN //\n\n/**\n* Evaluates the continued fraction approximation for the supplied series generator using the modified Lentz algorithm.\n*\n* ## References\n*\n* -   Lentz, William J. 1976. \"Generating bessel functions in Mie scattering calculations using continued fractions.\" _Applied Optics_ 15 (3): 668–71. doi:[10.1364/AO.15.000668](https://doi.org/10.1364/AO.15.000668).\n*\n* @param {Function} generator - function returning terms of continued fraction expansion\n* @param {Object} [options] - function options\n* @param {PositiveInteger} [options.maxIter=1000000] - maximum number of iterations\n* @param {PositiveNumber} [options.tolerance=2.22e-16] - further terms are only added as long as the next term is greater than current term times the tolerance\n* @param {boolean} [options.keep=false] - whether to keep the leading b term\n* @returns {number} value of continued fraction\n*\n* @example\n* // Continued fraction for (e-1)^(-1):\n* var gen = generator();\n* var out = continuedFraction( gen );\n* // returns ~0.582\n*\n* function generator() {\n*    var i = 0;\n*    return function() {\n*        i++;\n*        return [ i, i ];\n*    };\n* }\n*/\nfunction continuedFraction( generator, options ) {\n\tvar maxIter;\n\tvar opts;\n\tvar eps;\n\n\topts = {};\n\tif ( arguments.length > 1 ) {\n\t\topts = options;\n\t}\n\teps = opts.tolerance || EPS;\n\tmaxIter = opts.maxIter || MAX_ITER;\n\n\tif ( opts.keep ) {\n\t\treturn continuedFractionB( generator, eps, maxIter );\n\t}\n\treturn continuedFractionA( generator, eps, maxIter );\n}\n\n\n// EXPORTS //\n\nexport default continuedFraction;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Calculate a continued fraction approximation.\n*\n* @module @stdlib/math-base-tools-continued-fraction\n*\n* @example\n* import continuedFraction from '@stdlib/math-base-tools-continued-fraction';\n*\n* // Continued fraction for (e-1)^(-1):\n* var gen = generator()\n* var out = continuedFraction( gen );\n* // returns ~0.582\n*\n* function generator() {\n*    var i = 0;\n*    return function() {\n*        i++;\n*        return [ i, i ];\n*    };\n* }\n*/\n\n// MODULES //\n\nimport hasGeneratorSupport from '@stdlib/assert-has-generator-support';\nimport generator from './generators.js';\nimport basic from './basic.js';\n\n\n// MAIN //\n\nvar continuedFraction;\nif ( hasGeneratorSupport() ) {\n\tcontinuedFraction = generator;\n} else {\n\tcontinuedFraction = basic;\n}\n\n\n// EXPORTS //\n\nexport default continuedFraction;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n* (C) Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport continuedFraction from '@stdlib/math-base-tools-continued-fraction';\nimport upperIncompleteGammaFract from './upper_incomplete_gamma_fract.js';\n\n\n// MAIN //\n\n/**\n* Evaluate the lower incomplete gamma integral via a series expansion and divide by `gamma(z)` to normalize.\n*\n* @private\n* @param {number} a - function parameter\n* @param {number} z - function parameter\n* @returns {number} function value\n*/\nfunction upperGammaFraction( a, z ) {\n\tvar f = upperIncompleteGammaFract( a, z );\n\treturn 1.0 / ( z - a + 1.0 + continuedFraction( f ) );\n}\n\n\n// EXPORTS //\n\nexport default upperGammaFraction;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n* (C) Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Creates a function to evaluate a series expansion of the upper incomplete gamma fraction.\n*\n* @private\n* @param {number} a1 - function parameter\n* @param {number} z1 - function parameter\n* @returns {Function} series function\n*/\nfunction upperIncompleteGammaFract( a1, z1 ) {\n\tvar z = z1 - a1 + 1.0;\n\tvar a = a1;\n\tvar k = 0;\n\treturn next;\n\n\t/**\n\t* Calculate the next term of the series.\n\t*\n\t* @private\n\t* @returns {Array} series expansion terms\n\t*/\n\tfunction next() {\n\t\tk += 1;\n\t\tz += 2.0;\n\t\treturn [\n\t\t\tk * (a - k),\n\t\t\tz\n\t\t];\n\t}\n}\n\n\n// EXPORTS //\n\nexport default upperIncompleteGammaFract;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006-7, 2013-14.\n* (C) Copyright Paul A. Bristow 2007, 2013-14.\n* (C) Copyright Nikhar Agrawal 2013-14.\n* (C) Christopher Kormanyos 2013-14.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport gammaln from '@stdlib/math-base-special-gammaln';\nimport floor from '@stdlib/math-base-special-floor';\nimport gamma from '@stdlib/math-base-special-gamma';\nimport abs from '@stdlib/math-base-special-abs';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport ln from '@stdlib/math-base-special-ln';\nimport SQRT_EPSILON from '@stdlib/constants-float64-sqrt-eps';\nimport FLOAT64_MAX from '@stdlib/constants-float64-max';\nimport SQRT_TWO_PI from '@stdlib/constants-float64-sqrt-two-pi';\nimport MAX_LN from '@stdlib/constants-float64-max-ln';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport finiteGammaQ from './finite_gamma_q.js';\nimport finiteHalfGammaQ from './finite_half_gamma_q.js';\nimport fullIGammaPrefix from './full_igamma_prefix.js';\nimport igammaTemmeLarge from './igamma_temme_large.js';\nimport lowerGammaSeries from './lower_gamma_series.js';\nimport regularisedGammaPrefix from './regularised_gamma_prefix.js';\nimport tgammaSmallUpperPart from './tgamma_small_upper_part.js';\nimport upperGammaFraction from './upper_gamma_fraction.js';\n\n\n// VARIABLES //\n\nvar MAX_FACTORIAL = 170; // TODO: consider extracting as a constant\n\n\n// MAIN //\n\n/**\n* Computes the regularized incomplete gamma function. The upper tail is calculated via the modified Lentz's method for computing continued fractions, the lower tail using a power expansion.\n*\n* ## Notes\n*\n* -   When `a >= MAX_FACTORIAL` and computing the non-normalized incomplete gamma, result is rather hard to compute unless we use logs. There are really two options a) if `x` is a long way from `a` in value then we can reliably use methods 2 and 4 below in logarithmic form and go straight to the result. Otherwise we let the regularized gamma take the strain (the result is unlikely to underflow in the central region anyway) and combine with `lgamma` in the hopes that we get a finite result.\n*\n* @param {NonNegativeNumber} x - function parameter\n* @param {PositiveNumber} a - function parameter\n* @param {boolean} [regularized=true] - boolean indicating if the function should evaluate the regularized or non-regularized incomplete gamma functions\n* @param {boolean} [upper=false] - boolean indicating if the function should return the upper tail of the incomplete gamma function\n* @returns {number} function value\n*/\nfunction gammainc( x, a, regularized, upper ) {\n\tvar optimisedInvert;\n\tvar normalized;\n\tvar evalMethod;\n\tvar initValue;\n\tvar isHalfInt;\n\tvar useTemme;\n\tvar isSmallA;\n\tvar invert;\n\tvar result;\n\tvar isInt;\n\tvar sigma;\n\tvar gam;\n\tvar res;\n\tvar fa;\n\tvar g;\n\n\tif ( x < 0.0 || a <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\tnormalized = ( regularized === void 0 ) ? true : regularized;\n\tinvert = upper;\n\tresult = 0.0;\n\tif ( a >= MAX_FACTORIAL && !normalized ) {\n\t\tif ( invert && ( a * 4.0 < x ) ) {\n\t\t\t// This is method 4 below, done in logs:\n\t\t\tresult = ( a * ln(x) ) - x;\n\t\t\tresult += ln( upperGammaFraction( a, x ) );\n\t\t}\n\t\telse if ( !invert && ( a > 4.0 * x ) ) {\n\t\t\t// This is method 2 below, done in logs:\n\t\t\tresult = ( a * ln(x) ) - x;\n\t\t\tinitValue = 0;\n\t\t\tresult += ln( lowerGammaSeries( a, x, initValue ) / a );\n\t\t}\n\t\telse {\n\t\t\tresult = gammainc( a, x, true, invert );\n\t\t\tif ( result === 0.0 ) {\n\t\t\t\tif ( invert ) {\n\t\t\t\t\t// Try http://functions.wolfram.com/06.06.06.0039.01\n\t\t\t\t\tresult = 1.0 + ( 1.0 / (12.0*a) ) + ( 1.0 / (288.0*a*a) );\n\t\t\t\t\tresult = ln( result ) - a + ( ( a-0.5 ) * ln(a) );\n\t\t\t\t\tresult += ln( SQRT_TWO_PI );\n\t\t\t\t} else {\n\t\t\t\t\t// This is method 2 below, done in logs, we're really outside the range of this method, but since the result is almost certainly infinite, we should probably be OK:\n\t\t\t\t\tresult = ( a * ln( x ) ) - x;\n\t\t\t\t\tinitValue = 0.0;\n\t\t\t\t\tresult += ln( lowerGammaSeries( a, x, initValue ) / a);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tresult = ln( result ) + gammaln( a );\n\t\t\t}\n\t\t}\n\t\tif ( result > MAX_LN ) {\n\t\t\treturn PINF;\n\t\t}\n\t\treturn exp( result );\n\t}\n\tisSmallA = ( a < 30 ) && ( a <= x + 1.0 ) && ( x < MAX_LN );\n\tif ( isSmallA ) {\n\t\tfa = floor( a );\n\t\tisInt = ( fa === a );\n\t\tisHalfInt = ( isInt ) ? false : ( abs( fa - a ) === 0.5 );\n\t} else {\n\t\tisInt = isHalfInt = false;\n\t}\n\tif ( isInt && x > 0.6 ) {\n\t\t// Calculate Q via finite sum:\n\t\tinvert = !invert;\n\t\tevalMethod = 0;\n\t}\n\telse if ( isHalfInt && x > 0.2 ) {\n\t\t// Calculate Q via finite sum for half integer a:\n\t\tinvert = !invert;\n\t\tevalMethod = 1;\n\t}\n\telse if ( x < SQRT_EPSILON && a > 1.0 ) {\n\t\tevalMethod = 6;\n\t}\n\telse if ( x < 0.5 ) {\n\t\t// Changeover criterion chosen to give a changeover at Q ~ 0.33:\n\t\tif ( -0.4 / ln( x ) < a ) {\n\t\t\tevalMethod = 2;\n\t\t} else {\n\t\t\tevalMethod = 3;\n\t\t}\n\t}\n\telse if ( x < 1.1 ) {\n\t\t// Changeover here occurs when P ~ 0.75 or Q ~ 0.25:\n\t\tif ( x * 0.75 < a ) {\n\t\t\tevalMethod = 2;\n\t\t} else {\n\t\t\tevalMethod = 3;\n\t\t}\n\t}\n\telse {\n\t\t// Begin by testing whether we're in the \"bad\" zone where the result will be near 0.5 and the usual series and continued fractions are slow to converge:\n\t\tuseTemme = false;\n\t\tif ( normalized && a > 20 ) {\n\t\t\tsigma = abs( (x-a)/a );\n\t\t\tif ( a > 200 ) {\n\t\t\t\t// Limit chosen so that we use Temme's expansion only if the result would be larger than about 10^-6. Below that the regular series and continued fractions converge OK, and if we use Temme's method we get increasing errors from the dominant erfc term as it's (inexact) argument increases in magnitude.\n\t\t\t\tif ( 20 / a > sigma * sigma ) {\n\t\t\t\t\tuseTemme = true;\n\t\t\t\t}\n\t\t\t} else if ( sigma < 0.4 ) {\n\t\t\t\tuseTemme = true;\n\t\t\t}\n\t\t}\n\t\tif ( useTemme ) {\n\t\t\tevalMethod = 5;\n\t\t}\n\t\t// Regular case where the result will not be too close to 0.5: Changeover occurs at P ~ Q ~ 0.5. Note that series computation of P is about x2 faster than continued fraction calculation of Q, so try and use the CF only when really necessary, especially for small x.\n\t\telse if ( x - ( 1.0 / (3.0 * x) ) < a ) {\n\t\t\tevalMethod = 2;\n\t\t} else {\n\t\t\tevalMethod = 4;\n\t\t\tinvert = !invert;\n\t\t}\n\t}\n\n\t/* eslint-disable default-case */\n\tswitch ( evalMethod ) {\n\tcase 0:\n\t\tresult = finiteGammaQ( a, x );\n\t\tif (normalized === false ) {\n\t\t\tresult *= gamma( a );\n\t\t}\n\t\tbreak;\n\tcase 1:\n\t\tresult = finiteHalfGammaQ( a, x );\n\t\tif ( normalized === false ) {\n\t\t\tresult *= gamma( a );\n\t\t}\n\t\tbreak;\n\tcase 2:\n\t\t// Compute P:\n\t\tresult = ( normalized ) ?\n\t\t\tregularisedGammaPrefix( a, x ) :\n\t\t\tfullIGammaPrefix( a, x );\n\t\tif ( result !== 0.0 ) {\n\t\t\tinitValue = 0.0;\n\t\t\toptimisedInvert = false;\n\t\t\tif ( invert ) {\n\t\t\t\tinitValue = ( normalized ) ? 1.0 : gamma(a);\n\t\t\t\tif (\n\t\t\t\t\tnormalized ||\n\t\t\t\t\tresult >= 1.0 ||\n\t\t\t\t\tFLOAT64_MAX * result > initValue\n\t\t\t\t) {\n\t\t\t\t\tinitValue /= result;\n\t\t\t\t\tif (\n\t\t\t\t\t\tnormalized ||\n\t\t\t\t\t\ta < 1.0 ||\n\t\t\t\t\t\t( FLOAT64_MAX / a > initValue )\n\t\t\t\t\t) {\n\t\t\t\t\t\tinitValue *= -a;\n\t\t\t\t\t\toptimisedInvert = true;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tinitValue = 0.0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tinitValue = 0.0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresult *= lowerGammaSeries( a, x, initValue ) / a;\n\t\tif ( optimisedInvert ) {\n\t\t\tinvert = false;\n\t\t\tresult = -result;\n\t\t}\n\t\tbreak;\n\tcase 3:\n\t\t// Compute Q:\n\t\tinvert = !invert;\n\t\tres = tgammaSmallUpperPart( a, x, invert );\n\t\tresult = res[ 0 ];\n\t\tg = res[ 1 ];\n\t\tinvert = false;\n\t\tif ( normalized ) {\n\t\t\tresult /= g;\n\t\t}\n\t\tbreak;\n\tcase 4:\n\t\t// Compute Q:\n\t\tresult = ( normalized ) ?\n\t\t\tregularisedGammaPrefix( a, x ) :\n\t\t\tfullIGammaPrefix( a, x );\n\t\tif ( result !== 0 ) {\n\t\t\tresult *= upperGammaFraction( a, x );\n\t\t}\n\t\tbreak;\n\tcase 5:\n\t\tresult = igammaTemmeLarge( a, x );\n\t\tif ( x >= a ) {\n\t\t\tinvert = !invert;\n\t\t}\n\t\tbreak;\n\tcase 6:\n\t\t// Since x is so small that P is necessarily very small too, use http://functions.wolfram.com/GammaBetaErf/GammaRegularized/06/01/05/01/01/\n\t\tresult = ( normalized ) ?\n\t\t\tpow(x, a) / gamma( a + 1.0 ) :\n\t\t\tpow( x, a ) / a;\n\t\tresult *= 1.0 - ( a * x / ( a + 1.0 ) );\n\t\tbreak;\n\t}\n\tif ( normalized && result > 1.0 ) {\n\t\tresult = 1.0;\n\t}\n\tif ( invert ) {\n\t\tgam = ( normalized ) ? 1.0 : gamma( a );\n\t\tresult = gam - result;\n\t}\n\treturn result;\n}\n\n\n// EXPORTS //\n\nexport default gammainc;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n* (C) Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport exp from '@stdlib/math-base-special-exp';\n\n\n// MAIN //\n\n/**\n* Calculates normalized Q when a is an integer.\n*\n* @private\n* @param {integer} a - function parameter\n* @param {number} x - function parameter\n* @returns {number} upper gamma fraction\n*/\nfunction finiteGammaQ( a, x ) {\n\tvar term;\n\tvar sum;\n\tvar e;\n\tvar n;\n\n\te = exp( -x );\n\tsum = e;\n\tif ( sum !== 0.0 ) {\n\t\tterm = sum;\n\t\tfor ( n = 1; n < a; ++n ) {\n\t\t\tterm /= n;\n\t\t\tterm *= x;\n\t\t\tsum += term;\n\t\t}\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default finiteGammaQ;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n* (C) Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport erfc from '@stdlib/math-base-special-erfc';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport exp from '@stdlib/math-base-special-exp';\nimport PI from '@stdlib/constants-float64-pi';\n\n\n// MAIN //\n\n/**\n* Calculates normalized Q when a is a half-integer.\n*\n* @private\n* @param {number} a - function parameter\n* @param {number} x - function parameter\n* @returns {number} upper gamma fraction\n*/\nfunction finiteHalfGammaQ( a, x ) {\n\tvar half;\n\tvar term;\n\tvar sum;\n\tvar e;\n\tvar n;\n\n\te = erfc( sqrt(x) );\n\tif ( e !== 0 && a > 1.0 ) {\n\t\tterm = exp( -x ) / sqrt( PI * x );\n\t\tterm *= x;\n\t\thalf = 0.5;\n\t\tterm /= half;\n\t\tsum = term;\n\t\tfor ( n = 2; n < a; ++n ) {\n\t\t\tterm /= n - half;\n\t\t\tterm *= x;\n\t\t\tsum += term;\n\t\t}\n\t\te += sum;\n\t}\n\treturn e;\n}\n\n\n// EXPORTS //\n\nexport default finiteHalfGammaQ;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport gammaDeltaRatio from '@stdlib/math-base-special-gamma-delta-ratio';\nimport factorial from '@stdlib/math-base-special-factorial';\nimport gammainc from '@stdlib/math-base-special-gammainc';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport abs from '@stdlib/math-base-special-abs';\nimport pow from '@stdlib/math-base-special-pow';\nimport ln from '@stdlib/math-base-special-ln';\nimport MIN_VALUE from '@stdlib/constants-float64-smallest-normal';\nimport EPSILON from '@stdlib/constants-float64-eps';\nimport fullIGammaPrefix from './full_igamma_prefix.js';\nimport regularizedGammaPrefix from './regularized_gamma_prefix.js';\n\n\n// VARIABLES //\n\nvar p = new Array( 30 );\n\n\n// MAIN //\n\n/**\n* This is DiDonato and Morris's BGRAT routine, see Eq's 9 through 9.6.\n*\n* @private\n* @param {NonNegativeNumber} a - function parameter\n* @param {NonNegativeNumber} b - function parameter\n* @param {Probability} x - function parameter\n* @param {Probability} y - probability equal to `1-x`\n* @param {NonNegativeInteger} s0 - initial value\n* @param {number} mult - initial value\n* @param {boolean} normalized - boolean indicating whether to evaluate the regularized or non-regularized incomplete beta function\n* @returns {number} function value\n*/\nfunction betaSmallBLargeASeries( a, b, x, y, s0, mult, normalized ) {\n\tvar prefix;\n\tvar tmp1;\n\tvar tnp1;\n\tvar sum;\n\tvar b2n;\n\tvar bm1;\n\tvar lx2;\n\tvar lxp;\n\tvar mbn;\n\tvar lx;\n\tvar t4;\n\tvar h;\n\tvar j;\n\tvar m;\n\tvar n;\n\tvar r;\n\tvar t;\n\tvar u;\n\n\t// Some values we'll need later, these are Eq 9.1:\n\tbm1 = b - 1.0;\n\tt = a + ( bm1 / 2.0 );\n\tif ( y < 0.35 ) {\n\t\tlx = log1p( -y );\n\t} else {\n\t\tlx = ln( x );\n\t}\n\tu = -t * lx;\n\n\t// And from from 9.2:\n\th = regularizedGammaPrefix( b, u );\n\tif ( h <= MIN_VALUE ) {\n\t\treturn s0;\n\t}\n\tif ( normalized ) {\n\t\tprefix = h / gammaDeltaRatio( a, b );\n\t\tprefix /= pow( t, b );\n\t} else {\n\t\tprefix = fullIGammaPrefix( b, u ) / pow( t, b );\n\t}\n\tprefix *= mult;\n\n\t// We need the quantity Pn. Unfortunately, this is computed recursively and requires a full history of all the previous values. No choice but to declare a big table and hope it's big enough...\n\tp[ 0 ] = 1;  // see 9.3.\n\n\t// Now an initial value for J, see 9.6: gammainc( u, b, regularized, upper )\n\tj = gammainc( u, b, true, true );\n\tj /= h;\n\n\t// Now we can start to pull things together and evaluate the sum in Eq 9:\n\tsum = s0 + ( prefix * j ); // Value at N = 0\n\n\t// Some variables we'll need...\n\ttnp1 = 1.0; // 2*N+1\n\tlx2 = lx / 2.0;\n\tlx2 *= lx2;\n\tlxp = 1.0;\n\tt4 = 4.0 * t * t;\n\tb2n = b;\n\tfor ( n = 1; n < p.length; ++n ) {\n\t\t// Begin by evaluating the next Pn from Eq 9.4:\n\t\ttnp1 += 2.0;\n\t\tp[ n ] = 0.0;\n\t\tmbn = b - n;\n\t\ttmp1 = 3;\n\t\tfor ( m = 1; m < n; ++m ) {\n\t\t\tmbn = ( m * b ) - n;\n\t\t\tp[ n ] += mbn * p[ n-m ] / factorial( tmp1 );\n\t\t\ttmp1 += 2;\n\t\t}\n\t\tp[ n ] /= n;\n\t\tp[ n ] += bm1 / factorial( tnp1 );\n\n\t\t// Now we want Jn from Jn-1 using Eq 9.6:\n\t\tj = ( ( b2n * ( b2n+1.0 ) * j ) + ( ( u+b2n+1.0 ) * lxp ) ) / t4;\n\t\tlxp *= lx2;\n\t\tb2n += 2.0;\n\n\t\t// Pull it together with Eq 9:\n\t\tr = prefix * p[ n ] * j;\n\t\tsum += r;\n\t\tif ( r > 1.0 ) {\n\t\t\tif ( abs( r ) < abs( EPSILON * sum ) ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} else if ( abs( r / EPSILON ) < abs( sum ) ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default betaSmallBLargeASeries;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* Copyright John Maddock 2006-7, 2013-14.\n* Copyright Paul A. Bristow 2007, 2013-14.\n* Copyright Nikhar Agrawal 2013-14.\n* Copyright Christopher Kormanyos 2013-14.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport lanczosSumExpGScaled from '@stdlib/math-base-special-gamma-lanczos-sum-expg-scaled';\nimport gammaln from '@stdlib/math-base-special-gammaln';\nimport gamma from '@stdlib/math-base-special-gamma';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport abs from '@stdlib/math-base-special-abs';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport max from '@stdlib/math-base-special-max';\nimport min from '@stdlib/math-base-special-min';\nimport ln from '@stdlib/math-base-special-ln';\nimport MAX_LN from '@stdlib/constants-float64-max-ln';\nimport MIN_LN from '@stdlib/constants-float64-min-ln';\nimport G from '@stdlib/constants-float64-gamma-lanczos-g';\nimport E from '@stdlib/constants-float64-e';\n\n\n// MAIN //\n\n/**\n* Computes `(z^a)*(e^-z) / gamma(a)`.\n*\n* @private\n* @param {number} a - input value\n* @param {number} z - input value\n* @returns {number} function value\n*/\nfunction regularizedGammaPrefix( a, z ) {\n\tvar prefix;\n\tvar amza;\n\tvar agh;\n\tvar alz;\n\tvar amz;\n\tvar sq;\n\tvar d;\n\n\tagh = a + G - 0.5;\n\td = ( (z - a) - G + 0.5 ) / agh;\n\tif ( a < 1.0 ) {\n\t\t// Treat a < 1 as a special case because our Lanczos approximations are optimized against the factorials with a > 1, and for high precision types very small values of `a` can give rather erroneous results for gamma:\n\t\tif ( z <= MIN_LN ) {\n\t\t\t// Use logs, so should be free of cancellation errors:\n\t\t\treturn exp( ( a * ln(z) ) - z - gammaln( a ) );\n\t\t}\n\t\t// No danger of overflow as gamma(a) < 1/a for small a, so direct calculation:\n\t\treturn pow( z, a ) * exp( -z ) / gamma( a );\n\t}\n\tif ( abs(d*d*a) <= 100.0 && a > 150.0 ) {\n\t\t// Special case for large a and a ~ z:\n\t\tprefix = ( a * ( log1p( d ) - d ) ) + ( z * ( 0.5-G ) / agh );\n\t\tprefix = exp( prefix );\n\t}\n\telse {\n\t\t// General case. Direct computation is most accurate, but use various fallbacks for different parts of the problem domain:\n\t\talz = a * ln(z / agh);\n\t\tamz = a - z;\n\t\tif (\n\t\t\tmin(alz, amz) <= MIN_LN ||\n\t\t\tmax(alz, amz) >= MAX_LN\n\t\t) {\n\t\t\tamza = amz / a;\n\t\t\tif (\n\t\t\t\tmin(alz, amz)/2.0 > MIN_LN &&\n\t\t\t\tmax(alz, amz)/2.0 < MAX_LN\n\t\t\t) {\n\t\t\t\t// Compute square root of the result and then square it:\n\t\t\t\tsq = pow( z/agh, a/2.0 ) * exp( amz/2.0 );\n\t\t\t\tprefix = sq * sq;\n\t\t\t}\n\t\t\telse if (\n\t\t\t\tmin(alz, amz)/4.0 > MIN_LN &&\n\t\t\t\tmax(alz, amz)/4.0 < MAX_LN &&\n\t\t\t\tz > a\n\t\t\t) {\n\t\t\t\t// Compute the 4th root of the result then square it twice:\n\t\t\t\tsq = pow( z/agh, a/4.0 ) * exp( amz/4.0 );\n\t\t\t\tprefix = sq * sq;\n\t\t\t\tprefix *= prefix;\n\t\t\t}\n\t\t\telse if (\n\t\t\t\tamza > MIN_LN &&\n\t\t\t\tamza < MAX_LN\n\t\t\t) {\n\t\t\t\tprefix = pow( (z * exp(amza)) / agh, a );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tprefix = exp( alz + amz );\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tprefix = pow( z/agh, a ) * exp( amz );\n\t\t}\n\t}\n\tprefix *= sqrt( agh/E ) / lanczosSumExpGScaled( a );\n\treturn prefix;\n}\n\n\n// EXPORTS //\n\nexport default regularizedGammaPrefix;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n* (C) Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport ln from '@stdlib/math-base-special-ln';\nimport MAX_LN from '@stdlib/constants-float64-max-ln';\nimport MIN_LN from '@stdlib/constants-float64-min-ln';\n\n\n// MAIN //\n\n/**\n* Calculates the power term prefix `(z^a)(e^-z)` used in the non-normalized incomplete gammas.\n*\n* @private\n* @param {number} a - function parameter\n* @param {number} z - function parameter\n* @returns {number} power term prefix\n*/\nfunction fullIGammaPrefix( a, z ) {\n\tvar prefix;\n\tvar alz;\n\n\talz = a * ln( z );\n\tif ( z >= 1.0 ) {\n\t\tif ( ( alz < MAX_LN ) && ( -z > MIN_LN ) ) {\n\t\t\tprefix = pow( z, a ) * exp( -z );\n\t\t}\n\t\telse if ( a >= 1.0 ) {\n\t\t\tprefix = pow( z / exp(z/a), a );\n\t\t}\n\t\telse {\n\t\t\tprefix = exp( alz - z );\n\t\t}\n\t}\n\telse if ( alz > MIN_LN ) {\n\t\tprefix = pow( z, a ) * exp( -z );\n\t}\n\telse if ( z/a < MAX_LN ) {\n\t\tprefix = pow( z / exp(z/a), a );\n\t}\n\telse {\n\t\tprefix = exp( alz - z );\n\t}\n\treturn prefix;\n}\n\n\n// EXPORTS //\n\nexport default fullIGammaPrefix;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the delta in `beta(a,b,x) = prefix + delta * beta(a+k,b,x)`.\n*\n* ## Notes\n*\n* Specifically, the function calculates\n*\n* ```tex\n* \\frac{ (a)(a+1)(a+2)...(a+k-1) }{ (b)(b+1)(b+2)...(b+k-1) }\n* ```\n*\n* The function should only called with small `k`; for large `k`, it is grossly inefficient.\n*\n* @private\n* @param {number} a - input value\n* @param {number} b - input value\n* @param {NonNegativeInteger} k - input value\n* @returns {number} ratio value\n*/\nfunction risingFactorialRatio( a, b, k ) {\n\tvar result;\n\tvar i;\n\tif ( k === 0 ) {\n\t\treturn 1.0;\n\t}\n\tresult = 1.0;\n\tfor ( i = 0; i < k; i++ ) {\n\t\tresult *= ( a + i ) / ( b + i );\n\t}\n\treturn result;\n}\n\n\n// EXPORTS //\n\nexport default risingFactorialRatio;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport lanczosSumExpGScaled from '@stdlib/math-base-special-gamma-lanczos-sum-expg-scaled';\nimport maxabs from '@stdlib/math-base-special-maxabs';\nimport minabs from '@stdlib/math-base-special-minabs';\nimport expm1 from '@stdlib/math-base-special-expm1';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport abs from '@stdlib/math-base-special-abs';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport min from '@stdlib/math-base-special-min';\nimport ln from '@stdlib/math-base-special-ln';\nimport MAX_LN from '@stdlib/constants-float64-max-ln';\nimport MIN_LN from '@stdlib/constants-float64-min-ln';\nimport G from '@stdlib/constants-float64-gamma-lanczos-g';\nimport E from '@stdlib/constants-float64-e';\n\n\n// MAIN //\n\n/**\n* Computes the leading power terms in the incomplete beta function.\n*\n* When normalized,\n*\n* ```tex\n* \\frac{ x^a y^b }{ \\operatorname{Beta}(a,b) }\n* ```\n*\n* and otherwise\n*\n* ```tex\n* x^a y^b\n* ```\n*\n* ## Notes\n*\n* -   Almost all of the error in the incomplete beta comes from this function, particularly when \\\\( a \\\\) and \\\\( b \\\\) are large. Computing large powers are _hard_ though, and using logarithms just leads to horrendous cancellation errors.\n*\n* -   For \\\\( l1 * l2 > 0 \\\\) or \\\\( \\operatorname{min}( a, b ) < 1 \\\\), the two power terms both go in the same direction (toward zero or toward infinity). In this case if either term overflows or underflows, then the product of the two must do so also. Alternatively, if one exponent is less than one, then we can't productively use it to eliminate overflow or underflow from the other term.  Problems with spurious overflow/underflow can't be ruled out. In this case, but it is _very_ unlikely since one of the power terms will evaluate to a number close to 1.\n*\n* -   If \\\\( \\max( \\abs(l1), \\abs(l2) ) < 0.5 \\\\), both exponents are near one and both the exponents are greater than one, and, further, these two power terms tend in opposite directions (one toward zero, the other toward infinity), so we have to combine the terms to avoid any risk of overflow or underflow. We do this by moving one power term inside the other, we have:\n*\n*     ```tex\n*     (1 + l_1)^a \\cdot (1 + l_2)^b \\\\\n*     = ((1 + l_1) \\cdot (1 + l_2)^(b/a))^a \\\\\n*     = (1 + l_1 + l_3 + l_1*l_3)^a\n*     ```\n*\n*     and\n*\n*     ```tex\n*     l_3 = (1 + l_2)^(b/a) - 1 \\\\\n*     = \\exp((b/a) * \\ln(1 + l_2)) - 1\n*     ```\n*\n*     The tricky bit is deciding which term to move inside. By preference, we move the larger term inside, so that the size of the largest exponent is reduced.  However, that can only be done as long as l3 (see above) is also small.\n*\n* @private\n* @param {NonNegativeNumber} a - function parameter\n* @param {NonNegativeNumber} b - function parameter\n* @param {Probability} x - function parameter\n* @param {Probability} y - probability equal to `1-x`\n* @param {boolean} normalized - boolean indicating whether to evaluate the power terms of the regularized or non-regularized incomplete beta function\n* @returns {number} power terms\n*/\nfunction ibetaPowerTerms( a, b, x, y, normalized ) {\n\tvar result;\n\tvar smallA;\n\tvar ratio;\n\tvar agh;\n\tvar bgh;\n\tvar cgh;\n\tvar l1;\n\tvar l2;\n\tvar l3;\n\tvar p1;\n\tvar b1;\n\tvar b2;\n\tvar c;\n\tvar l;\n\n\tif ( !normalized ) {\n\t\t// Can we do better here?\n\t\treturn pow( x, a ) * pow( y, b );\n\t}\n\tc = a + b;\n\n\t// Combine power terms with Lanczos approximation:\n\tagh = a + G - 0.5;\n\tbgh = b + G - 0.5;\n\tcgh = c + G - 0.5;\n\tresult = lanczosSumExpGScaled( c );\n\tresult /= lanczosSumExpGScaled( a ) * lanczosSumExpGScaled( b );\n\n\t// Combine with the leftover terms from the Lanczos approximation:\n\tresult *= sqrt( bgh / E );\n\tresult *= sqrt( agh / cgh );\n\n\t// `l1` and `l2` are the base of the exponents minus one:\n\tl1 = ( ( x * b ) - ( y * agh ) ) / agh;\n\tl2 = ( ( y * a ) - ( x * bgh ) ) / bgh;\n\tif ( minabs( l1, l2 ) < 0.2 ) {\n\t\t// When the base of the exponent is very near 1 we get really gross errors unless extra care is taken:\n\t\tif ( l1 * l2 > 0 || min( a, b ) < 1 ) {\n\t\t\tif ( abs(l1) < 0.1 ) {\n\t\t\t\tresult *= exp( a * log1p( l1 ) );\n\t\t\t} else {\n\t\t\t\tresult *= pow( ( x*cgh ) / agh, a );\n\t\t\t}\n\t\t\tif ( abs(l2) < 0.1 ) {\n\t\t\t\tresult *= exp( b * log1p( l2 ) );\n\t\t\t} else {\n\t\t\t\tresult *= pow((y * cgh) / bgh, b);\n\t\t\t}\n\t\t}\n\t\telse if ( maxabs( l1, l2 ) < 0.5 ) {\n\t\t\tsmallA = a < b;\n\t\t\tratio = b / a;\n\t\t\tif (\n\t\t\t\t(smallA && (ratio * l2 < 0.1)) ||\n\t\t\t\t(!smallA && (l1 / ratio > 0.1))\n\t\t\t) {\n\t\t\t\tl3 = expm1( ratio * log1p( l2 ) );\n\t\t\t\tl3 = l1 + l3 + ( l3 * l1 );\n\t\t\t\tl3 = a * log1p( l3 );\n\t\t\t\tresult *= exp( l3 );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tl3 = expm1( log1p( l1 ) / ratio );\n\t\t\t\tl3 = l2 + l3 + ( l3 * l2 );\n\t\t\t\tl3 = b * log1p( l3 );\n\t\t\t\tresult *= exp( l3 );\n\t\t\t}\n\t\t}\n\t\telse if ( abs(l1) < abs(l2) ) {\n\t\t\t// First base near 1 only:\n\t\t\tl = ( a * log1p( l1 ) ) + ( b * ln( ( y*cgh ) / bgh ) );\n\t\t\tif ( l <= MIN_LN || l >= MAX_LN ) {\n\t\t\t\tl += ln(result);\n\t\t\t\tif ( l >= MAX_LN ) {\n\t\t\t\t\treturn NaN;\n\t\t\t\t}\n\t\t\t\tresult = exp( l );\n\t\t\t} else {\n\t\t\t\tresult *= exp( l );\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// Second base near 1 only:\n\t\t\tl = ( b * log1p( l2 ) ) + ( a * ln( (x*cgh) / agh ) );\n\t\t\tif ( l <= MIN_LN || l >= MAX_LN ) {\n\t\t\t\tl += ln(result);\n\t\t\t\tif ( l >= MAX_LN ) {\n\t\t\t\t\treturn NaN;\n\t\t\t\t}\n\t\t\t\tresult = exp( l );\n\t\t\t} else {\n\t\t\t\tresult *= exp( l );\n\t\t\t}\n\t\t}\n\t}\n\telse {\n\t\t// General case:\n\t\tb1 = (x * cgh) / agh;\n\t\tb2 = (y * cgh) / bgh;\n\t\tl1 = a * ln(b1);\n\t\tl2 = b * ln(b2);\n\t\tif (\n\t\t\tl1 >= MAX_LN ||\n\t\t\tl1 <= MIN_LN ||\n\t\t\tl2 >= MAX_LN ||\n\t\t\tl2 <= MIN_LN\n\t\t) {\n\t\t\t// Oops, under/overflow, sidestep if we can:\n\t\t\tif ( a < b ) {\n\t\t\t\tp1 = pow( b2, b / a );\n\t\t\t\tl3 = a * ( ln(b1) + ln(p1) );\n\t\t\t\tif ( l3 < MAX_LN && l3 > MIN_LN ) {\n\t\t\t\t\tresult *= pow( p1 * b1, a );\n\t\t\t\t} else {\n\t\t\t\t\tl2 += l1 + ln(result);\n\t\t\t\t\tif ( l2 >= MAX_LN ) {\n\t\t\t\t\t\treturn NaN;\n\t\t\t\t\t}\n\t\t\t\t\tresult = exp( l2 );\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tp1 = pow( b1, a / b );\n\t\t\t\tl3 = ( ln(p1) + ln(b2) ) * b;\n\t\t\t\tif ( l3 < MAX_LN && l3 > MIN_LN ) {\n\t\t\t\t\tresult *= pow( p1 * b2, b );\n\t\t\t\t} else {\n\t\t\t\t\tl2 += l1 + ln( result );\n\t\t\t\t\tif (l2 >= MAX_LN) {\n\t\t\t\t\t\treturn NaN;\n\t\t\t\t\t}\n\t\t\t\t\tresult = exp( l2 );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// Finally the normal case:\n\t\t\tresult *= pow( b1, a ) * pow( b2, b );\n\t\t}\n\t}\n\treturn result;\n}\n\n\n// EXPORTS //\n\nexport default ibetaPowerTerms;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs';\nimport min from '@stdlib/math-base-special-min';\n\n\n// MAIN //\n\n/**\n* Returns the minimum absolute value.\n*\n* @param {number} x - first number\n* @param {number} y - second number\n* @returns {number} minimum absolute value\n*\n* @example\n* var v = minabs( -3.14, 4.2 );\n* // returns 3.14\n*\n* @example\n* var v = minabs( 3.14, NaN );\n* // returns NaN\n*\n* @example\n* var v = minabs( +0.0, -0.0 );\n* // returns +0.0\n*/\nfunction minabs( x, y ) {\n\treturn min( abs( x ), abs( y ) );\n}\n\n\n// EXPORTS //\n\nexport default minabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs';\nimport max from '@stdlib/math-base-special-max';\n\n\n// MAIN //\n\n/**\n* Returns the maximum absolute value.\n*\n* @param {number} x - first number\n* @param {number} y - second number\n* @returns {number} maximum absolute value\n*\n* @example\n* var v = maxabs( 3.14, -4.2 );\n* // returns 4.2\n*\n* @example\n* var v = maxabs( 3.14, NaN );\n* // returns NaN\n*\n* @example\n* var v = maxabs( +0.0, -0.0 );\n* // returns +0.0\n*/\nfunction maxabs( x, y ) {\n\treturn max( abs( x ), abs( y ) );\n}\n\n\n// EXPORTS //\n\nexport default maxabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport continuedFraction from '@stdlib/math-base-tools-continued-fraction';\nimport ibetaPowerTerms from './ibeta_power_terms.js';\n\n\n// VARIABLES //\n\nvar OPTS = {\n\t'keep': true,\n\t'maxIter': 1000\n};\n\n\n// FUNCTIONS //\n\n/**\n* Continued fraction for the incomplete beta.\n*\n* @private\n* @param {NonNegativeNumber} a - function parameter\n* @param {NonNegativeNumber} b - function parameter\n* @param {Probability} x - function parameter\n* @param {Probability} y - probability equal to `1-x`\n* @returns {Function} series function\n*/\nfunction ibetaFraction2t( a, b, x, y ) {\n\tvar m = 0;\n\treturn next;\n\n\t/**\n\t* Calculate the numerator and denominator of the next term of the series.\n\t*\n\t* @private\n\t* @returns {Array} series expansion terms\n\t*/\n\tfunction next() {\n\t\tvar denom;\n\t\tvar aN;\n\t\tvar bN;\n\n\t\taN = (a + m - 1) * (a + b + m - 1) * m * (b - m) * x * x;\n\t\tdenom = a + ( 2.0*m ) - 1.0;\n\t\taN /= denom * denom;\n\t\tbN = m;\n\t\tbN += (m * (b - m) * x) / ( a + ( 2.0*m ) - 1.0 );\n\t\tbN += ( (a+m) * ( (a*y) - (b*x) + 1.0 + ( m*(2.0-x) ) ) ) / ( a + (2.0*m) + 1.0 ); // eslint-disable-line max-len\n\t\tm += 1;\n\t\treturn [ aN, bN ];\n\t}\n}\n\n\n// MAIN //\n\n/**\n* Evaluates the incomplete beta via the continued fraction representation.\n*\n* @private\n* @param {NonNegativeNumber} a - function parameter\n* @param {NonNegativeNumber} b - function parameter\n* @param {Probability} x - function parameter\n* @param {Probability} y - probability equal to `1-x`\n* @param {boolean} normalized - boolean indicating whether to evaluate the power terms of the regularized or non-regularized incomplete beta function\n* @param {(Array|TypedArray|Object)} out - output array holding the derivative as the second element\n* @returns {number} incomplete beta value\n*/\nfunction ibetaFraction2( a, b, x, y, normalized, out ) {\n\tvar result;\n\tvar fract;\n\tvar f;\n\n\tresult = ibetaPowerTerms( a, b, x, y, normalized );\n\tif ( out ) {\n\t\tout[ 1 ] = result;\n\t}\n\tif ( result === 0.0 ) {\n\t\treturn result;\n\t}\n\tf = ibetaFraction2t( a, b, x, y );\n\tfract = continuedFraction( f, OPTS );\n\treturn result / fract;\n}\n\n\n// EXPORTS //\n\nexport default ibetaFraction2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isOdd from '@stdlib/math-base-assert-is-odd';\nimport round from '@stdlib/math-base-special-round';\n\n\n// MAIN //\n\n/**\n* Computes the binomial coefficient of two integers.\n*\n* ## Method\n*\n* -   Instead of evaluating the factorial form, which is inefficient and prone to overflow for large inputs arguments, this module computes the following multiplicative representation of the binomial coefficient for integer arguments\n*\n*     ```tex\n*     \\binom nk = \\prod_{i=1}^k \\frac{n+1-i}{i}\n*     ```\n*\n* @param {integer} n - input value\n* @param {integer} k - second input value\n* @returns {integer} function value\n*\n* @example\n* var v = binomcoef( 8, 2 );\n* // returns 28\n*\n* @example\n* var v = binomcoef( 0, 0 );\n* // returns 1\n*\n* @example\n* var v = binomcoef( -4, 2 );\n* // returns 10\n*\n* @example\n* var v = binomcoef( NaN, 3 );\n* // returns NaN\n*\n* @example\n* var v = binomcoef( 5, NaN );\n* // returns NaN\n*\n* @example\n* var v = binomcoef( NaN, NaN );\n* // returns NaN\n*/\nfunction binomcoef( n, k ) {\n\tvar res;\n\tvar j;\n\tif ( isnan( n ) || isnan( k ) ) {\n\t\treturn NaN;\n\t}\n\tif ( !isInteger( n ) || !isInteger( k ) ) {\n\t\treturn NaN;\n\t}\n\tif ( k < 0 ) {\n\t\treturn 0;\n\t}\n\tif ( n < 0 ) {\n\t\tres = binomcoef( -n + k - 1, k );\n\t\tif ( isOdd( k ) ) {\n\t\t\tres = -res;\n\t\t}\n\t\treturn res;\n\t}\n\tif ( k > n ) {\n\t\treturn 0;\n\t}\n\tif ( k === 0 || k === n ) {\n\t\treturn 1;\n\t}\n\tif ( k === 1 || k === n - 1 ) {\n\t\treturn n;\n\t}\n\tif ( n - k < k ) {\n\t\tk = n - k;\n\t}\n\t// Use recursive definition...\n\tres = n;\n\tfor ( j = 2; j <= k; j++ ) {\n\t\tres *= ( n - j + 1 ) / j;\n\t}\n\t// Correct for rounding errors...\n\treturn ( isInteger( res ) ) ? res : round( res );\n}\n\n\n// EXPORTS //\n\nexport default binomcoef;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ibetaPowerTerms from './ibeta_power_terms.js';\n\n\n// MAIN //\n\n/**\n* Computes the difference between `ibeta(a,b,x)` and `ibeta(a+k,b,x)`.\n*\n* @private\n* @param {NonNegativeNumber} a - function parameter\n* @param {NonNegativeNumber} b - function parameter\n* @param {Probability} x - function parameter\n* @param {Probability} y - probability equal to `1-x`\n* @param {NonNegativeInteger} k - function input\n* @param {boolean} normalized - boolean indicating whether to evaluate the power terms of the regularized or non-regularized incomplete beta function\n* @param {(Array|TypedArray|Object)} out - output array holding the derivative as the second element\n* @returns {number} difference between ibeta(a,b,x) and ibeta(a+k,b,x)\n*/\nfunction ibetaAStep( a, b, x, y, k, normalized, out ) {\n\tvar prefix;\n\tvar term;\n\tvar sum;\n\tvar i;\n\n\tprefix = ibetaPowerTerms( a, b, x, y, normalized );\n\tif ( out ) {\n\t\tout[ 1 ] = prefix;\n\t}\n\tprefix /= a;\n\tif ( prefix === 0.0 ) {\n\t\treturn prefix;\n\t}\n\tsum = 1.0;\n\tterm = 1.0;\n\n\t// Series summation from 0 to k-1:\n\tfor ( i = 0; i < k-1; ++i ) {\n\t\tterm *= (a+b+i) * x / (a+i+1.0);\n\t\tsum += term;\n\t}\n\tprefix *= sum;\n\treturn prefix;\n}\n\n\n// EXPORTS //\n\nexport default ibetaAStep;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport lanczosSumExpGScaled from '@stdlib/math-base-special-gamma-lanczos-sum-expg-scaled';\nimport sumSeries from '@stdlib/math-base-tools-sum-series';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport ln from '@stdlib/math-base-special-ln';\nimport MIN_VALUE from '@stdlib/constants-float64-smallest-normal';\nimport MAX_LN from '@stdlib/constants-float64-max-ln';\nimport MIN_LN from '@stdlib/constants-float64-min-ln';\nimport G from '@stdlib/constants-float64-gamma-lanczos-g';\nimport E from '@stdlib/constants-float64-e';\n\n\n// VARIABLES //\n\nvar opts = {\n\t'maxTerms': 100\n};\n\n\n// FUNCTIONS //\n\n/**\n* Series approximation to the incomplete beta.\n*\n* @private\n* @param {NonNegativeNumber} a - function parameter\n* @param {NonNegativeNumber} b - function parameter\n* @param {Probability} x - function parameter\n* @param {number} result - initial result value\n* @returns {Function} series function\n*/\nfunction ibetaSeriesT( a, b, x, result ) {\n\tvar poch = 1.0 - b;\n\tvar n = 1;\n\treturn next;\n\n\t/**\n\t* Calculate the next term of the series.\n\t*\n\t* @private\n\t* @returns {number} series expansion term\n\t*/\n\tfunction next() {\n\t\tvar r = result / a;\n\t\ta += 1.0;\n\t\tresult *= poch * x / n;\n\t\tn += 1;\n\t\tpoch += 1.0;\n\t\treturn r;\n\t}\n}\n\n\n// MAIN //\n\n/**\n* Incomplete beta series.\n*\n* @private\n* @param {NonNegativeNumber} a - function parameter\n* @param {NonNegativeNumber} b - function parameter\n* @param {Probability} x - function parameter\n* @param {NonNegativeInteger} s0 - initial value\n* @param {boolean} normalized - boolean indicating whether to evaluate the power terms of the regularized or non-regularized incomplete beta function\n* @param {(Array|TypedArray|Object)} out - output array holding the derivative as the second element\n* @param {Probability} y - probability equal to `1-x`\n* @returns {number} function value\n*/\nfunction ibetaSeries( a, b, x, s0, normalized, out, y ) {\n\tvar result;\n\tvar agh;\n\tvar bgh;\n\tvar cgh;\n\tvar l1;\n\tvar l2;\n\tvar c;\n\tvar s;\n\n\tif ( normalized ) {\n\t\tc = a + b;\n\n\t\t// Incomplete beta power term, combined with the Lanczos approximation:\n\t\tagh = a + G - 0.5;\n\t\tbgh = b + G - 0.5;\n\t\tcgh = c + G - 0.5;\n\t\tresult = lanczosSumExpGScaled( c ) / ( lanczosSumExpGScaled( a ) * lanczosSumExpGScaled( b ) ); // eslint-disable-line max-len\n\n\t\tl1 = ln( cgh / bgh ) * ( b - 0.5 );\n\t\tl2 = ln( x * cgh / agh ) * a;\n\n\t\t// Check for over/underflow in the power terms:\n\t\tif (\n\t\t\tl1 > MIN_LN &&\n\t\t\tl1 < MAX_LN &&\n\t\t\tl2 > MIN_LN &&\n\t\t\tl2 < MAX_LN\n\t\t) {\n\t\t\tif ( a * b < bgh * 10.0 ) {\n\t\t\t\tresult *= exp( ( b-0.5 ) * log1p( a / bgh ) );\n\t\t\t} else {\n\t\t\t\tresult *= pow( cgh / bgh, b - 0.5 );\n\t\t\t}\n\t\t\tresult *= pow( x * cgh / agh, a );\n\t\t\tresult *= sqrt( agh / E );\n\n\t\t\tif ( out ) {\n\t\t\t\tout[ 1 ] = result * pow( y, b );\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// We need logs, and this *will* cancel:\n\t\t\tresult = ln( result ) + l1 + l2 + ( ( ln( agh ) - 1.0 ) / 2.0 );\n\t\t\tif ( out ) {\n\t\t\t\tout[ 1 ] = exp( result + ( b * ln( y ) ) );\n\t\t\t}\n\t\t\tresult = exp( result );\n\t\t}\n\t}\n\telse {\n\t\t// Non-normalized, just compute the power:\n\t\tresult = pow( x, a );\n\t}\n\tif ( result < MIN_VALUE ) {\n\t\treturn s0; // Safeguard: series can't cope with denorms.\n\t}\n\ts = ibetaSeriesT( a, b, x, result );\n\topts.initialValue = s0;\n\treturn sumSeries( s, opts );\n}\n\n\n// EXPORTS //\n\nexport default ibetaSeries;\n","/* eslint-disable max-statements, max-lines */\n\n/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n* (C) Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport expm1 from '@stdlib/math-base-special-expm1';\nimport floor from '@stdlib/math-base-special-floor';\nimport log1p from '@stdlib/math-base-special-log1p';\nimport asin from '@stdlib/math-base-special-asin';\nimport beta from '@stdlib/math-base-special-beta';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport max from '@stdlib/math-base-special-max';\nimport min from '@stdlib/math-base-special-min';\nimport MAX_FLOAT64 from '@stdlib/constants-float64-max';\nimport MIN_FLOAT64 from '@stdlib/constants-float64-smallest-normal';\nimport MAX_INT32 from '@stdlib/constants-int32-max';\nimport HALF_PI from '@stdlib/constants-float64-half-pi';\nimport PI from '@stdlib/constants-float64-pi';\nimport betaSmallBLargeASeries from './beta_small_b_large_a_series.js';\nimport risingFactorialRatio from './rising_factorial_ratio.js';\nimport ibetaPowerTerms from './ibeta_power_terms.js';\nimport ibetaFraction2 from './ibeta_fraction2.js';\nimport binomialCCDF from './binomial_ccdf.js';\nimport ibetaAStep from './ibeta_a_step.js';\nimport ibetaSeries from './ibeta_series.js';\n\n\n// VARIABLES //\n\nvar ONE_OVER_PI = 1.0 / PI;\n\n\n// MAIN //\n\n/**\n* Evaluates the incomplete beta function and its first derivative and assigns results to a provided output array.\n*\n* ## Notes\n*\n* -   This function divides up the input range and selects the right implementation method for each domain.\n*\n* @param {Probability} x - function input\n* @param {NonNegativeNumber} a - function parameter\n* @param {NonNegativeNumber} b - function parameter\n* @param {boolean} regularized - boolean indicating if the function should evaluate the regularized boolean beta function\n* @param {boolean} upper - boolean indicating if the function should return the upper tail of the incomplete beta function instead\n* @param {(Array|TypedArray|Object)} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {(Array|TypedArray|Object)} function value and first derivative\n*\n* @example\n* var out = ibetaImp( 0.5, 2.0, 2.0, false, false, [ 0.0, 0.0 ], 1, 0 );\n* // returns [ ~0.083, ~1.5 ]\n*\n* @example\n* var out = ibetaImp( 0.2, 1.0, 2.0, false, true, [ 0.0, 0.0 ], 1, 0 );\n* // returns [ 0.32, 1.6 ]\n*\n* @example\n* var out = ibetaImp( 0.2, 1.0, 2.0, true, true, [ 0.0, 0.0 ], 1, 0 );\n* // returns [ 0.64, 1.6 ]\n*/\nfunction ibetaImp( x, a, b, regularized, upper, out, stride, offset ) {\n\tvar lambda;\n\tvar prefix;\n\tvar fract;\n\tvar bbar;\n\tvar div;\n\tvar tmp;\n\tvar i0;\n\tvar i1;\n\tvar k;\n\tvar n;\n\tvar p;\n\tvar y;\n\n\ty = 1.0 - x;\n\ti0 = offset;\n\ti1 = offset + stride;\n\n\t// Derivative not set...\n\tout[ i1 ] = -1;\n\tif ( isnan( x ) || x < 0.0 || x > 1.0 ) {\n\t\tout[ i0 ] = NaN;\n\t\tout[ i1 ] = NaN;\n\t\treturn out;\n\t}\n\tif ( regularized ) {\n\t\tif ( a < 0.0 || b < 0.0 ) {\n\t\t\tout[ i0 ] = NaN;\n\t\t\tout[ i1 ] = NaN;\n\t\t\treturn out;\n\t\t}\n\t\t// Extend to a few very special cases...\n\t\tif ( a === 0.0 ) {\n\t\t\tif ( b === 0.0 ) {\n\t\t\t\tout[ i0 ] = NaN;\n\t\t\t\tout[ i1 ] = NaN;\n\t\t\t\treturn out;\n\t\t\t}\n\t\t\tif ( b > 0.0 ) {\n\t\t\t\tout[ i0 ] = ( upper ) ? 0.0 : 1.0;\n\t\t\t\treturn out;\n\t\t\t}\n\t\t} else if ( b === 0.0 ) {\n\t\t\tif ( a > 0.0 ) {\n\t\t\t\tout[ i0 ] = ( upper ) ? 1.0 : 0.0;\n\t\t\t\treturn out;\n\t\t\t}\n\t\t}\n\t} else if ( a <= 0.0 || b <= 0.0 ) {\n\t\tout[ i0 ] = NaN;\n\t\tout[ i1 ] = NaN;\n\t\treturn out;\n\t}\n\tif ( x === 0.0 ) {\n\t\tif ( a === 1.0 ) {\n\t\t\tout[ i1 ] = 1.0;\n\t\t} else {\n\t\t\tout[ i1 ] = ( a < 1.0 ) ? MAX_FLOAT64 / 2.0 : MIN_FLOAT64 * 2.0;\n\t\t}\n\t\tif ( upper ) {\n\t\t\tout[ i0 ] = ( regularized ) ? 1.0 : beta( a, b );\n\t\t\treturn out;\n\t\t}\n\t\tout[ i0 ] = 0.0;\n\t\treturn out;\n\t}\n\tif ( x === 1.0 ) {\n\t\tif ( b === 1.0 ) {\n\t\t\tout[ i1 ] = 1.0;\n\t\t} else {\n\t\t\tout[ i1 ] = ( b < 1.0 ) ? MAX_FLOAT64 / 2.0 : MIN_FLOAT64 * 2.0;\n\t\t}\n\t\tif ( upper ) {\n\t\t\tout[ i0 ] = 0.0;\n\t\t} else {\n\t\t\tout[ i0 ] = ( regularized ) ? 1.0 : beta( a, b );\n\t\t}\n\t\treturn out;\n\t}\n\tif ( a === 0.5 && b === 0.5 ) {\n\t\tout[ i1 ] = ONE_OVER_PI * sqrt( y * x );\n\n\t\t// We have an arcsine distribution:\n\t\tp = ( upper ) ? asin( sqrt(y) ) : asin( sqrt(x) );\n\t\tp /= HALF_PI;\n\t\tif ( !regularized ) {\n\t\t\tp *= PI;\n\t\t}\n\t\tout[ i0 ] = p;\n\t\treturn out;\n\t}\n\tif ( a === 1.0 ) {\n\t\ttmp = b;\n\t\tb = a;\n\t\ta = tmp;\n\n\t\ttmp = y;\n\t\ty = x;\n\t\tx = tmp;\n\n\t\tupper = !upper;\n\t}\n\tif ( b === 1.0 ) {\n\t\t// Special case see: http://functions.wolfram.com/GammaBetaErf/BetaRegularized/03/01/01/\n\t\tif ( a === 1.0 ) {\n\t\t\tout[ i0 ] = ( upper ) ? y : x;\n\t\t\tout[ i1 ] = 1.0;\n\t\t\treturn out;\n\t\t}\n\t\tout[ i1 ] = a * pow( x, a - 1.0 );\n\t\tif ( y < 0.5 ) {\n\t\t\tp = ( upper ) ? -expm1( a * log1p(-y) ) : exp( a * log1p(-y) );\n\t\t} else {\n\t\t\tp = ( upper ) ? -( pow( x, a ) - 1.0 ) : pow( x, a );\n\t\t}\n\t\tif ( !regularized ) {\n\t\t\tp /= a;\n\t\t}\n\t\tout[ i0 ] = p;\n\t\treturn out;\n\t}\n\tif ( min( a, b ) <= 1.0 ) {\n\t\tif ( x > 0.5 ) {\n\t\t\ttmp = b;\n\t\t\tb = a;\n\t\t\ta = tmp;\n\n\t\t\ttmp = y;\n\t\t\ty = x;\n\t\t\tx = tmp;\n\n\t\t\tupper = !upper;\n\t\t}\n\t\tif ( max( a, b ) <= 1.0 ) {\n\t\t\t// Both a,b < 1:\n\t\t\tif ( (a >= min( 0.2, b ) ) || ( pow(x, a) <= 0.9 ) ) {\n\t\t\t\tif ( upper ) {\n\t\t\t\t\tfract = -( ( regularized ) ? 1.0 : beta( a, b ) );\n\t\t\t\t\tupper = false;\n\t\t\t\t\tfract = -ibetaSeries( a, b, x, fract, regularized, out, y );\n\t\t\t\t} else {\n\t\t\t\t\tfract = ibetaSeries( a, b, x, 0, regularized, out, y );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttmp = b;\n\t\t\t\tb = a;\n\t\t\t\ta = tmp;\n\n\t\t\t\ttmp = y;\n\t\t\t\ty = x;\n\t\t\t\tx = tmp;\n\n\t\t\t\tupper = !upper;\n\t\t\t\tif ( y >= 0.3 ) {\n\t\t\t\t\tif ( upper ) {\n\t\t\t\t\t\tfract = -( ( regularized ) ? 1.0 : beta( a, b ) );\n\t\t\t\t\t\tupper = false;\n\t\t\t\t\t\tfract = -ibetaSeries( a, b, x, fract, regularized, out, y ); // eslint-disable-line max-len\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfract = ibetaSeries( a, b, x, 0, regularized, out, y );\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// Sidestep on a, and then use the series representation:\n\t\t\t\t\tif ( regularized ) {\n\t\t\t\t\t\tprefix = 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tprefix = risingFactorialRatio( a + b, a, 20 );\n\t\t\t\t\t}\n\t\t\t\t\tfract = ibetaAStep( a, b, x, y, 20, regularized, out );\n\t\t\t\t\tif ( upper ) {\n\t\t\t\t\t\tfract -= ( ( regularized ) ? 1 : beta( a, b ) );\n\t\t\t\t\t\tupper = false;\n\t\t\t\t\t\tfract = -betaSmallBLargeASeries( a + 20.0, b, x, y, fract, prefix, regularized ); // eslint-disable-line max-len\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfract = betaSmallBLargeASeries( a + 20.0, b, x, y, fract, prefix, regularized ); // eslint-disable-line max-len\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if ( b <= 1.0 || ( x < 0.1 && ( pow( b * x, a ) <= 0.7 ) ) ) {\n\t\t\tif ( upper ) {\n\t\t\t\tfract = -( ( regularized ) ? 1 : beta( a, b ) );\n\t\t\t\tupper = false;\n\t\t\t\tfract = -ibetaSeries( a, b, x, fract, regularized, out, y );\n\t\t\t} else {\n\t\t\t\tfract = ibetaSeries( a, b, x, 0.0, regularized, out, y );\n\t\t\t}\n\t\t} else {\n\t\t\ttmp = b;\n\t\t\tb = a;\n\t\t\ta = tmp;\n\n\t\t\ttmp = y;\n\t\t\ty = x;\n\t\t\tx = tmp;\n\t\t\tupper = !upper;\n\n\t\t\tif ( y >= 0.3 ) {\n\t\t\t\tif (upper) {\n\t\t\t\t\tfract = -(( regularized ) ? 1.0 : beta( a, b ));\n\t\t\t\t\tupper = false;\n\t\t\t\t\tfract = -ibetaSeries( a, b, x, fract, regularized, out, y );\n\t\t\t\t} else {\n\t\t\t\t\tfract = ibetaSeries( a, b, x, 0.0, regularized, out, y );\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ( a >= 15.0 ) {\n\t\t\t\tif ( upper ) {\n\t\t\t\t\tfract = -(( regularized ) ? 1.0 : beta( a, b ));\n\t\t\t\t\tupper = false;\n\t\t\t\t\tfract = -betaSmallBLargeASeries( a, b, x, y, fract, 1.0, regularized ); // eslint-disable-line max-len\n\t\t\t\t} else {\n\t\t\t\t\tfract = betaSmallBLargeASeries( a, b, x, y, 0.0, 1.0, regularized ); // eslint-disable-line max-len\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif ( regularized ) {\n\t\t\t\t\tprefix = 1;\n\t\t\t\t} else {\n\t\t\t\t\t// Sidestep to improve errors:\n\t\t\t\t\tprefix = risingFactorialRatio( a + b, a, 20.0 );\n\t\t\t\t}\n\t\t\t\tfract = ibetaAStep( a, b, x, y, 20.0, regularized, out );\n\t\t\t\tif ( upper ) {\n\t\t\t\t\tfract -= ( ( regularized ) ? 1.0 : beta( a, b ) );\n\t\t\t\t\tupper = false;\n\t\t\t\t\tfract = -betaSmallBLargeASeries( a + 20.0, b, x, y, fract, prefix, regularized ); // eslint-disable-line max-len\n\t\t\t\t} else {\n\t\t\t\t\tfract = betaSmallBLargeASeries( a + 20.0, b, x, y, fract, prefix, regularized ); // eslint-disable-line max-len\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// Both a,b >= 1:\n\t\tif ( a < b ) {\n\t\t\tlambda = a - ( (a + b) * x );\n\t\t} else {\n\t\t\tlambda = ( (a + b) * y ) - b;\n\t\t}\n\t\tif ( lambda < 0.0 ) {\n\t\t\ttmp = b;\n\t\t\tb = a;\n\t\t\ta = tmp;\n\n\t\t\ttmp = y;\n\t\t\ty = x;\n\t\t\tx = tmp;\n\t\t\tupper = !upper;\n\t\t}\n\t\tif ( b < 40.0 ) {\n\t\t\tif (\n\t\t\t\tfloor(a) === a &&\n\t\t\t\tfloor(b) === b &&\n\t\t\t\ta < MAX_INT32 - 100\n\t\t\t) {\n\t\t\t\t// Relate to the binomial distribution and use a finite sum:\n\t\t\t\tk = a - 1.0;\n\t\t\t\tn = b + k;\n\t\t\t\tfract = binomialCCDF( n, k, x, y );\n\t\t\t\tif ( !regularized ) {\n\t\t\t\t\tfract *= beta( a, b );\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ( b * x <= 0.7 ) {\n\t\t\t\tif ( upper ) {\n\t\t\t\t\tfract = -( ( regularized ) ? 1.0 : beta( a, b ) );\n\t\t\t\t\tupper = false;\n\t\t\t\t\tfract = -ibetaSeries( a, b, x, fract, regularized, out, y );\n\t\t\t\t} else {\n\t\t\t\t\tfract = ibetaSeries( a, b, x, 0.0, regularized, out, y );\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ( a > 15.0 ) {\n\t\t\t\t// Sidestep so we can use the series representation:\n\t\t\t\tn = floor( b );\n\t\t\t\tif ( n === b ) {\n\t\t\t\t\tn -= 1;\n\t\t\t\t}\n\t\t\t\tbbar = b - n;\n\t\t\t\tif ( regularized ) {\n\t\t\t\t\tprefix = 1;\n\t\t\t\t} else {\n\t\t\t\t\tprefix = risingFactorialRatio( a + bbar, bbar, n );\n\t\t\t\t}\n\t\t\t\tfract = ibetaAStep( bbar, a, y, x, n, regularized );\n\t\t\t\tfract = betaSmallBLargeASeries( a, bbar, x, y, fract, 1.0, regularized ); // eslint-disable-line max-len\n\t\t\t\tfract /= prefix;\n\t\t\t}\n\t\t\telse if ( regularized ) {\n\t\t\t\tn = floor( b );\n\t\t\t\tbbar = b - n;\n\t\t\t\tif ( bbar <= 0 ) {\n\t\t\t\t\tn -= 1;\n\t\t\t\t\tbbar += 1;\n\t\t\t\t}\n\t\t\t\tfract = ibetaAStep( bbar, a, y, x, n, regularized );\n\t\t\t\tfract += ibetaAStep( a, bbar, x, y, 20.0, regularized );\n\t\t\t\tif ( upper ) {\n\t\t\t\t\tfract -= 1;\n\t\t\t\t}\n\t\t\t\tfract = betaSmallBLargeASeries( a + 20.0, bbar, x, y, fract, 1, regularized ); // eslint-disable-line max-len\n\t\t\t\tif ( upper ) {\n\t\t\t\t\tfract = -fract;\n\t\t\t\t\tupper = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfract = ibetaFraction2( a, b, x, y, regularized, out );\n\t\t\t}\n\t\t} else {\n\t\t\tfract = ibetaFraction2( a, b, x, y, regularized, out );\n\t\t}\n\t}\n\tif ( out[ i1 ] < 0.0 ) {\n\t\tout[ i1 ] = ibetaPowerTerms( a, b, x, y, true );\n\t}\n\tdiv = y * x;\n\tif ( out[ i1 ] !== 0.0 ) {\n\t\tif ( ( MAX_FLOAT64 * div < out[ i1 ] ) ) {\n\t\t\t// Overflow, return an arbitrarily large value:\n\t\t\tout[ i1 ] = MAX_FLOAT64 / 2.0;\n\t\t} else {\n\t\t\tout[ i1 ] /= div;\n\t\t}\n\t}\n\tout[ i0 ] = ( upper ) ? ( ( regularized ) ? 1.0 : beta( a, b ) ) - fract : fract; // eslint-disable-line max-len\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default ibetaImp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport binomcoef from '@stdlib/math-base-special-binomcoef';\nimport floor from '@stdlib/math-base-special-floor';\nimport pow from '@stdlib/math-base-special-pow';\nimport MIN_VALUE from '@stdlib/constants-float64-smallest-normal';\n\n\n// MAIN //\n\n/**\n* For integer arguments we can relate the incomplete beta to the complement of the binomial distribution cdf and use this finite sum.\n*\n* @private\n* @param {NonNegativeInteger} n - number of trials\n* @param {NonNegativeInteger} k - function input\n* @param {Probability} x - function input\n* @param {Probability} y - probability equal to `1-x`\n* @returns {number} sum\n*/\nfunction binomialCCDF( n, k, x, y ) {\n\tvar startTerm;\n\tvar result;\n\tvar start;\n\tvar term;\n\tvar i;\n\n\tresult = pow( x, n );\n\tif ( result > MIN_VALUE ) {\n\t\tterm = result;\n\t\tfor ( i = floor( n - 1 ); i > k; i-- ) {\n\t\t\tterm *= ((i + 1) * y) / ((n - i) * x);\n\t\t\tresult += term;\n\t\t}\n\t} else {\n\t\t// First term underflows so we need to start at the mode of the distribution and work outwards:\n\t\tstart = floor( n * x );\n\t\tif ( start <= k + 1 ) {\n\t\t\tstart = floor( k + 2 );\n\t\t}\n\t\tresult = pow( x, start ) * pow( y, n - start );\n\t\tresult *= binomcoef( floor(n), floor(start) );\n\t\tif ( result === 0.0 ) {\n\t\t\t// OK, starting slightly above the mode didn't work, we'll have to sum the terms the old fashioned way:\n\t\t\tfor ( i = start - 1; i > k; i-- ) {\n\t\t\t\tresult += pow( x, i ) * pow( y, n - i );\n\t\t\t\tresult *= binomcoef( floor(n), floor(i) );\n\t\t\t}\n\t\t} else {\n\t\t\tterm = result;\n\t\t\tstartTerm = result;\n\t\t\tfor ( i = start - 1; i > k; i-- ) {\n\t\t\t\tterm *= ((i + 1) * y) / ((n - i) * x);\n\t\t\t\tresult += term;\n\t\t\t}\n\t\t\tterm = startTerm;\n\t\t\tfor ( i = start + 1; i <= n; i++ ) {\n\t\t\t\tterm *= (n - i + 1) * x / (i * y);\n\t\t\t\tresult += term;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n\n\n// EXPORTS //\n\nexport default binomialCCDF;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { assign as kernelBetainc } from '@stdlib/math-base-special-kernel-betainc';\n\n\n// MAIN //\n\n/**\n* Evaluates the incomplete beta function.\n*\n* @param {Probability} x - function parameter\n* @param {NonNegativeNumber} a - function parameter\n* @param {NonNegativeNumber} b - function parameter\n* @param {boolean} [regularized=true] - boolean indicating if the function should evaluate the regularized or non-regularized incomplete beta function\n* @param {boolean} [upper=false] - boolean indicating if the function should return the upper tail of the incomplete beta function\n* @returns {number} function value\n*\n* @example\n* var y = betainc( 0.5, 2.0, 2.0 );\n* // returns 0.5\n*\n* @example\n* var y = betainc( 0.5, 2.0, 2.0, false );\n* // returns ~0.083\n*\n* @example\n* var y = betainc( 0.2, 1.0, 2.0 );\n* // returns 0.36\n*/\nfunction betainc( x, a, b, regularized, upper ) {\n\tvar out = [ 0.0, 0.0 ];\n\tregularized = ( regularized === false ) ? false : true; // eslint-disable-line no-unneeded-ternary\n\tupper = ( upper === true ) ? true : false; // eslint-disable-line no-unneeded-ternary\n\tkernelBetainc( x, a, b, regularized, upper, out, 1, 0 );\n\treturn out[ 0 ];\n}\n\n\n// EXPORTS //\n\nexport default betainc;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport betainc from '@stdlib/math-base-special-betainc';\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a beta distribution with first shape parameter `alpha` and second shape parameter `beta` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 0.5, 1.0, 1.0 );\n* // returns 0.5\n*\n* @example\n* var y = cdf( 0.5, 2.0, 4.0 );\n* // returns ~0.813\n*\n* @example\n* var y = cdf( 0.2, 2.0, 2.0 );\n* // returns ~0.104\n*\n* @example\n* var y = cdf( 0.8, 4.0, 4.0 );\n* // returns ~0.967\n*\n* @example\n* var y = cdf( -0.5, 4.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( 1.5, 4.0, 2.0 );\n* // returns 1.0\n*\n* @example\n* var y = cdf( 2.0, -1.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 0.5, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( NaN, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 1.0, NaN );\n* // returns NaN\n*/\nfunction cdf( x, alpha, beta ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x <= 0.0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( x >= 1.0 ) {\n\t\treturn 1.0;\n\t}\n\treturn betainc( x, alpha, beta );\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport betainc from '@stdlib/math-base-special-betainc';\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a beta distribution with first shape parameter `alpha` and second shape parameter `beta`.\n*\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 0.5, 0.5 );\n*\n* var y = cdf( 0.8 );\n* // returns ~0.705\n*\n* y = cdf( 0.3 );\n* // returns ~0.369\n*/\nfunction factory( alpha, beta ) {\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a beta distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x <= 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tif ( x >= 1.0 ) {\n\t\t\treturn 1.0;\n\t\t}\n\t\treturn betainc( x, alpha, beta );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport betaCDF from '@stdlib/stats-base-dists-beta-cdf';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a beta prime distribution with first shape parameter `alpha` and second shape parameter `beta` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 0.5, 1.0, 1.0 );\n* // returns ~0.333\n*\n* @example\n* var y = cdf( 0.5, 2.0, 4.0 );\n* // returns ~0.539\n*\n* @example\n* var y = cdf( 0.2, 2.0, 2.0 );\n* // returns ~0.074\n*\n* @example\n* var y = cdf( 0.8, 4.0, 4.0 );\n* // returns ~0.38\n*\n* @example\n* var y = cdf( -0.5, 4.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( 2.0, -1.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 0.5, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( NaN, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 1.0, NaN );\n* // returns NaN\n*/\nfunction cdf( x, alpha, beta ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x <= 0.0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( x === PINF ) {\n\t\treturn 1.0;\n\t}\n\treturn betaCDF( x / ( 1.0 + x ), alpha, beta );\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the incomplete beta function and its first derivative.\n*\n* @module @stdlib/math-base-special-kernel-betainc\n*\n* @example\n* import kernelBetainc from '@stdlib/math-base-special-kernel-betainc';\n*\n* var out = kernelBetainc( 0.5, 2.0, 2.0, false, false );\n* // returns [ ~0.083, ~1.5 ]\n*\n* out = kernelBetainc( 0.2, 1.0, 2.0, true, false );\n* // returns [ 0.36, 1.6 ]\n*\n* @example\n* import kernelBetainc from '@stdlib/math-base-special-kernel-betainc';\n*\n* var arr = [ 0.0, 0.0 ];\n* var out = kernelBetainc.assign( 0.2, 1.0, 2.0, true, true, arr, 1, 0 );\n* // returns [ 0.64, 1.6 ]\n*\n* var bool = ( arr === out );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport compute from './assign.js';\n\n\n// MAIN //\n\n/**\n* Evaluates the incomplete beta function and its first derivative.\n*\n* @param {Probability} x - function input\n* @param {NonNegativeNumber} a - function parameter\n* @param {NonNegativeNumber} b - function parameter\n* @param {boolean} regularized - boolean indicating if the function should evaluate the regularized boolean beta function\n* @param {boolean} upper - boolean indicating if the function should return the upper tail of the incomplete beta function instead\n* @returns {Array} function value and first derivative\n*\n* @example\n* var out = kernelBetainc( 0.5, 2.0, 2.0, false, false );\n* // returns [ ~0.083, ~1.5 ]\n*\n* @example\n* var out = kernelBetainc( 0.2, 1.0, 2.0, true, false );\n* // returns [ 0.36, 1.6 ]\n*/\nfunction kernelBetainc( x, a, b, regularized, upper ) {\n\treturn compute( x, a, b, regularized, upper, [ 0.0, 0.0 ], 1, 0 );\n}\n\n\n// EXPORTS //\n\nexport default kernelBetainc;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the cumulative distribution function (CDF) for a beta distribution.\n*\n* @module @stdlib/stats-base-dists-beta-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-beta-cdf';\n*\n* var y = cdf( 0.5, 1.0, 1.0 );\n* // returns 0.5\n*\n* y = cdf( 0.5, 2.0, 4.0 );\n* // returns ~0.813\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-beta-cdf';\n*\n* var cdf = factory( 0.5, 0.5 );\n*\n* var y = cdf( 0.8 );\n* // returns ~0.705\n*\n* y = cdf( 0.3 );\n* // returns ~0.369\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the cumulative distribution function (CDF) for a beta prime distribution.\n*\n* @module @stdlib/stats-base-dists-betaprime-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-betaprime-cdf';\n*\n* var y = cdf( 0.5, 1.0, 1.0 );\n* // returns ~0.333\n*\n* y = cdf( 0.5, 2.0, 4.0 );\n* // returns ~0.539\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-betaprime-cdf';\n*\n* var cdf = factory( 0.5, 0.5 );\n*\n* var y = cdf( 0.8 );\n* // returns ~0.465\n*\n* y = cdf( 0.3 );\n* // returns ~0.319\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport { factory as betaFactory } from '@stdlib/stats-base-dists-beta-cdf';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a beta prime distribution with first shape parameter `alpha` and second shape parameter `beta`.\n*\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 0.5, 0.5 );\n*\n* var y = cdf( 0.8 );\n* // returns ~0.465\n*\n* y = cdf( 0.3 );\n* // returns ~0.319\n*/\nfunction factory( alpha, beta ) {\n\tvar betaCDF;\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tbetaCDF = betaFactory( alpha, beta );\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a beta prime distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x <= 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tif ( x === PINF ) {\n\t\t\treturn 1.0;\n\t\t}\n\t\treturn betaCDF( x / ( 1.0 + x ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original code, copyright and license are from [Go]{@link https://golang.org/src/math/atan2.go}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (c) 2009 The Go Authors. All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without\n* modification, are permitted provided that the following conditions are\n* met:\n*\n*    * Redistributions of source code must retain the above copyright\n* notice, this list of conditions and the following disclaimer.\n*    * Redistributions in binary form must reproduce the above\n* copyright notice, this list of conditions and the following disclaimer\n* in the documentation and/or other materials provided with the\n* distribution.\n*    * Neither the name of Google Inc. nor the names of its\n* contributors may be used to endorse or promote products derived from\n* this software without specific prior written permission.\n*\n* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n* \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n* A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n* OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isinfinite from '@stdlib/math-base-assert-is-infinite';\nimport copysign from '@stdlib/math-base-special-copysign';\nimport signbit from '@stdlib/number-float64-base-signbit';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport atan from '@stdlib/math-base-special-atan';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport PI from '@stdlib/constants-float64-pi';\n\n\n// MAIN //\n\n/**\n* Computes the angle in the plane (in radians) between the positive x-axis and the ray from `(0,0)` to the point `(x,y)`.\n*\n* ## Special Cases\n*\n* ```tex\n* \\begin{align*}\n* \\operatorname{atan2}(y,\\mathrm{NaN}) &= \\mathrm{NaN}\\\\\n* \\operatorname{atan2}(\\mathrm{NaN},x) &= \\mathrm{NaN}\\\\\n* \\operatorname{atan2}( +0,x \\ge 0 ) &= +0 \\\\\n* \\operatorname{atan2}( -0, x \\ge 0 ) &= -0 \\\\\n* \\operatorname{atan2}( +0,x \\le -0 ) &= +\\Pi \\\\\n* \\operatorname{atan2}( -0, x \\le -0 ) &= -\\Pi \\\\\n* \\operatorname{atan2}(+\\infty, +\\infty) &= +\\tfrac{\\Pi}{4} \\\\\n* \\operatorname{atan2}(-\\infty, +\\infty) &= -\\tfrac{\\Pi}{4} \\\\\n* \\operatorname{atan2}(+\\infty, -\\infty) &= +\\tfrac{3\\Pi}{4} \\\\\n* \\operatorname{atan2}(-\\infty, -\\infty) &= -\\tfrac{3\\Pi}{4} \\\\\n* \\operatorname{atan2}(y, +\\infty) &= 0.0 \\\\\n* \\operatorname{atan2}(y>0, -\\infty) &= +\\Pi \\\\\n* \\operatorname{atan2}(y<0, -\\infty) &= -\\Pi \\\\\n* \\operatorname{atan2}(+\\infty, x ) &= +\\tfrac{\\Pi}{2} \\\\\n* \\operatorname{atan2}(-\\infty, x ) &= -\\tfrac{\\Pi}{2} \\\\\n* \\end{align*}\n* ```\n*\n* @param {number} y - `y` coordinate\n* @param {number} x - `x` coordinate\n* @returns {number} angle (in radians)\n*\n* @example\n* var v = atan2( 2.0, 2.0 ); // => atan(1.0)\n* // returns ~0.785\n*\n* @example\n* var v = atan2( 6.0, 2.0 ); // => atan(3.0)\n* // returns ~1.249\n*\n* @example\n* var v = atan2( -1.0, -1.0 ); // => atan(1.0) - π\n* // returns ~-2.356\n*\n* @example\n* var v = atan2( 3.0, 0.0 ); // => π/2\n* // returns ~1.571\n*\n* @example\n* var v = atan2( -2.0, 0.0 ); // => -π/2\n* // returns ~-1.571\n*\n* @example\n* var v = atan2( 0.0, 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = atan2( 3.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = atan2( NaN, 2.0 );\n* // returns NaN\n*/\nfunction atan2( y, x ) {\n\tvar q;\n\tif ( isnan( x ) || isnan( y ) ) {\n\t\treturn NaN;\n\t}\n\tif ( isinfinite( x ) ) {\n\t\tif ( x === PINF ) {\n\t\t\tif ( isinfinite( y ) ) {\n\t\t\t\treturn copysign( PI / 4.0, y );\n\t\t\t}\n\t\t\treturn copysign( 0.0, y );\n\t\t}\n\t\t// Case: x is -Infinity\n\t\tif ( isinfinite( y ) ) {\n\t\t\treturn copysign( 3.0*PI/4.0, y );\n\t\t}\n\t\treturn copysign( PI, y );\n\t}\n\tif ( isinfinite( y ) ) {\n\t\treturn copysign( PI / 2.0, y );\n\t}\n\tif ( y === 0.0 ) {\n\t\tif ( x >= 0.0 && !signbit( x ) ) {\n\t\t\treturn copysign( 0.0, y );\n\t\t}\n\t\treturn copysign( PI, y );\n\t}\n\tif ( x === 0.0 ) {\n\t\treturn copysign( PI / 2.0, y );\n\t}\n\tq = atan( y / x );\n\tif ( x < 0.0 ) {\n\t\tif ( q <= 0.0 ) {\n\t\t\treturn q + PI;\n\t\t}\n\t\treturn q - PI;\n\t}\n\treturn q;\n}\n\n\n// EXPORTS //\n\nexport default atan2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport getHighWord from '@stdlib/number-float64-base-get-high-word';\n\n\n// MAIN //\n\n/**\n* Returns a boolean indicating if the sign bit is on (true) or off (false).\n*\n* @param {number} x - input value\n* @returns {boolean} boolean indicating if sign bit is on or off\n*\n* @example\n* var bool = signbit( 4.0 );\n* // returns false\n*\n* @example\n* var bool = signbit( -9.14e-307 );\n* // returns true\n*\n* @example\n* var bool = signbit( 0.0 );\n* // returns false\n*\n* @example\n* var bool = signbit( -0.0 );\n* // returns true\n*/\nfunction signbit( x ) {\n\t// Extract from the input value a higher order word (unsigned 32-bit integer) containing the exponent and sign:\n\tvar high = getHighWord( x );\n\n\t// Shift off all bits which are not the sign bit and check if the sign bit is on:\n\treturn ( high >>> 31 ) ? true : false; // eslint-disable-line no-unneeded-ternary\n}\n\n\n// EXPORTS //\n\nexport default signbit;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright 1984, 1995, 2000 by Stephen L. Moshier\n*\n* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.\n*\n* Stephen L. Moshier\n* moshier@na-net.ornl.gov\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport PIO2 from '@stdlib/constants-float64-half-pi';\nimport PIO4 from '@stdlib/constants-float64-fourth-pi';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport polyvalP from './polyval_p.js';\nimport polyvalQ from './polyval_q.js';\n\n\n// VARIABLES //\n\nvar MOREBITS = 6.123233995736765886130e-17; // pi/2 = PIO2 + MOREBITS.\nvar T3P8 = 2.41421356237309504880; // tan( 3*pi/8 )\n\n\n// MAIN //\n\n/**\n* Computes the arctangent of a double-precision floating-point number.\n*\n* ## Method\n*\n* -   Range reduction is from three intervals into the interval from 0 to 0.66. The approximant uses a rational function of degree 4/5 of the form\n*\n*     ```tex\n*     x + x^3 \\frac{P(x)}{Q(x)}\n*     ```\n*\n* ## Notes\n*\n* -   Relative error:\n*\n*     | arithmetic | domain  | # trials | peak    | rms     |\n*     |:-----------|:--------|:---------|:--------|:--------|\n*     | DEC        | -10, 10 | 50000    | 2.4e-17 | 8.3e-18 |\n*     | IEEE       | -10, 10 | 10^6     | 1.8e-16 | 5.0e-17 |\n*\n* @param {number} x - input value\n* @returns {number} arctangent (in radians)\n*\n* @example\n* var v = atan( 0.0 );\n* // returns ~0.0\n*\n* @example\n* import PI from '@stdlib/constants-float64-pi';\n*\n* var v = atan( -PI/4.0 );\n* // returns ~-0.666\n*\n* @example\n* import PI from '@stdlib/constants-float64-pi';\n*\n* var v = atan( PI/4.0 );\n* // returns ~0.666\n*\n* @example\n* var v = atan( NaN );\n* // returns NaN\n*/\nfunction atan( x ) {\n\tvar flg;\n\tvar sgn;\n\tvar y;\n\tvar z;\n\tif ( isnan( x ) || x === 0.0 ) {\n\t\treturn x;\n\t}\n\tif ( x === PINF ) {\n\t\treturn PIO2;\n\t}\n\tif ( x === NINF ) {\n\t\treturn -PIO2;\n\t}\n\tif ( x < 0.0 ) {\n\t\tsgn = true;\n\t\tx = -x;\n\t}\n\t// Range reduction:\n\tflg = 0;\n\tif ( x > T3P8 ) {\n\t\ty = PIO2;\n\t\tflg = 1;\n\t\tx = -( 1.0/x );\n\t} else if ( x <= 0.66 ) {\n\t\ty = 0.0;\n\t} else {\n\t\ty = PIO4;\n\t\tflg = 2;\n\t\tx = (x-1.0) / (x+1.0);\n\t}\n\tz = x * x;\n\tz = z*polyvalP( z ) / polyvalQ( z );\n\tz = ( x*z ) + x;\n\tif ( flg === 2 ) {\n\t\tz += 0.5 * MOREBITS;\n\t} else if ( flg === 1 ) {\n\t\tz += MOREBITS;\n\t}\n\ty += z;\n\treturn ( sgn ) ? -y : y;\n}\n\n\n// EXPORTS //\n\nexport default atan;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -64.85021904942025;\n\t}\n\treturn -64.85021904942025 + (x * (-122.88666844901361 + (x * (-75.00855792314705 + (x * (-16.157537187333652 + (x * -0.8750608600031904))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 194.5506571482614;\n\t}\n\treturn 194.5506571482614 + (x * (485.3903996359137 + (x * (432.88106049129027 + (x * (165.02700983169885 + (x * (24.858464901423062 + (x * 1.0))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport atan2 from '@stdlib/math-base-special-atan2';\n\n\n// VARIABLES //\n\nvar ONE_OVER_PI = 0.3183098861837907;\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a Cauchy distribution with location parameter `x0` and scale parameter `gamma` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} x0 - location parameter\n* @param {PositiveNumber} gamma - scale parameter\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 4.0, 0.0, 2.0 );\n* // returns ~0.852\n*\n* @example\n* var y = cdf( 1.0, 0.0, 2.0 );\n* // returns ~0.648\n*\n* @example\n* var y = cdf( 1.0, 3.0, 2.0 );\n* // returns 0.25\n*\n* @example\n* var y = cdf( NaN, 0.0, 2.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 1.0, 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = cdf( 1.0, NaN, 3.0 );\n* // returns NaN\n*/\nfunction cdf( x, x0, gamma ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( gamma ) ||\n\t\tisnan( x0 ) ||\n\t\tgamma <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn ( ONE_OVER_PI * atan2( x-x0, gamma ) ) + 0.5;\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport gammainc from '@stdlib/math-base-special-gammainc';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a gamma distribution with shape parameter `alpha` and rate parameter `beta` at a value `x`.\n*\n* @param {number} x - input value\n* @param {NonNegativeNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - rate parameter\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 2.0, 1.0, 1.0 );\n* // returns ~0.865\n*\n* @example\n* var y = cdf( 2.0, 3.0, 1.0 );\n* // returns ~0.323\n*\n* @example\n* var y = cdf( -1.0, 2.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( +Infinity, 4.0, 2.0 );\n* // returns 1.0\n*\n* @example\n* var y = cdf( -Infinity, 4.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, -1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 1.0, -1.0 );\n* // returns NaN\n*/\nfunction cdf( x, alpha, beta ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha < 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( alpha === 0.0 ) {\n\t\treturn ( x < 0 ) ? 0.0 : 1.0;\n\t}\n\tif ( x <= 0.0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( x === PINF ) {\n\t\treturn 1.0;\n\t}\n\treturn gammainc( x * beta, alpha );\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) of a degenerate distribution centered at a provided mean value.\n*\n* @param {number} mu - constant value of distribution\n* @returns {Function} function to evaluate the cumulative distribution function\n*\n* @example\n* var cdf = factory( 5.0 );\n*\n* var y = cdf( 3.0 );\n* // returns 0.0\n*\n* y = cdf( 6.0 );\n* // returns 1.0\n*\n* y = cdf( NaN );\n* // returns NaN\n*/\nfunction factory( mu ) {\n\tif ( isnan( mu ) ) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) of a degenerate distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated cumulative distribution function\n\t*\n\t* @example\n\t* var y = cdf( 10.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn (x < mu) ? 0.0 : 1.0;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport { factory as degenerate } from '@stdlib/stats-base-dists-degenerate-cdf';\nimport gammainc from '@stdlib/math-base-special-gammainc';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a gamma distribution with shape parameter `alpha` and rate parameter `beta`.\n*\n* @param {NonNegativeNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - rate parameter\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 0.5, 0.1 );\n* var y = cdf( 12.0 );\n* // returns ~0.879\n*\n* y = cdf( 8.0 );\n* // returns ~0.794\n*/\nfunction factory( alpha, beta ) {\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha < 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( alpha === 0.0 ) {\n\t\treturn degenerate( 0.0 );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a gamma distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( x <= 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tif ( x === PINF ) {\n\t\t\treturn 1.0;\n\t\t}\n\t\treturn gammainc( x * beta, alpha );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport gammaCDF from '@stdlib/stats-base-dists-gamma-cdf';\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a chi distribution with degrees of freedom `k` at a value `x`.\n*\n* @param {number} x - input value\n* @param {NonNegativeNumber} k - degrees of freedom\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 2.0, 3.0 );\n* // returns ~0.739\n*\n* @example\n* var y = cdf( 1.0, 0.5 );\n* // returns ~0.846\n*\n* @example\n* var y = cdf( -1.0, 4.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative degrees of freedom:\n* var y = cdf( 2.0, -1.0 );\n* // returns NaN\n*/\nfunction cdf( x, k ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( k ) ||\n\t\tk < 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( k === 0.0 ) {\n\t\treturn ( x < 0 ) ? 0.0 : 1.0;\n\t}\n\tif ( x <= 0.0 ) {\n\t\treturn 0.0;\n\t}\n\treturn gammaCDF( x*x, k/2.0, 0.5 );\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport gammaCDF from '@stdlib/stats-base-dists-gamma-cdf';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a chi-squared distribution with degrees of freedom `k` at a value `x`.\n*\n* @param {number} x - input value\n* @param {NonNegativeNumber} k - degrees of freedom\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 2.0, 3.0 );\n* // returns ~0.428\n*\n* @example\n* var y = cdf( 1.0, 0.5 );\n* // returns ~0.846\n*\n* @example\n* var y = cdf( -1.0, 4.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative degrees of freedom:\n* var y = cdf( 2.0, -1.0 );\n* // returns NaN\n*/\nfunction cdf( x, k ) {\n\treturn gammaCDF( x, k/2.0, 0.5 );\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sinpi from '@stdlib/math-base-special-sinpi';\nimport PI from '@stdlib/constants-float64-pi';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a raised cosine distribution with location parameter `mu` and scale parameter `s` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} mu - location parameter\n* @param {NonNegativeNumber} s - scale parameter\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 0.5, 0.0, 1.0 );\n* // returns ~0.909\n*\n* @example\n* var y = cdf( 1.2, 0.0, 1.0 );\n* // returns 1.0\n*\n* @example\n* var y = cdf( -0.9, 0.0, 1.0);\n* // returns ~0.0\n*\n* @example\n* var y = cdf( 2.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*/\nfunction cdf( x, mu, s ) {\n\tvar z;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( mu ) ||\n\t\tisnan( s ) ||\n\t\ts < 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( s === 0.0 ) {\n\t\treturn ( x < mu ) ? 0.0 : 1.0;\n\t}\n\tif ( x < mu - s ) {\n\t\treturn 0.0;\n\t}\n\tif ( x > mu + s ) {\n\t\treturn 1.0;\n\t}\n\tz = ( x - mu ) / s;\n\treturn ( 1.0 + z + ( sinpi( z ) / PI ) ) / 2.0;\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math-base-special-floor';\n\n\n// MAIN //\n\n/**\n* Tests if a finite double-precision floating-point number is a nonnegative integer.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is a nonnegative integer\n*\n* @example\n* var bool = isNonNegativeInteger( 1.0 );\n* // returns true\n*\n* @example\n* var bool = isNonNegativeInteger( 0.0 );\n* // returns true\n*\n* @example\n* var bool = isNonNegativeInteger( -10.0 );\n* // returns false\n*/\nfunction isNonNegativeInteger( x ) {\n\treturn (floor(x) === x && x >= 0);\n}\n\n\n// EXPORTS //\n\nexport default isNonNegativeInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport gammaCDF from '@stdlib/stats-base-dists-gamma-cdf';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for an Erlang distribution with shape parameter `k` and rate parameter `lambda` at a value `x`.\n*\n* @param {number} x - input value\n* @param {NonNegativeInteger} k - shape parameter\n* @param {PositiveNumber} lambda - rate parameter\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 2.0, 1, 1.0 );\n* // returns ~0.865\n*\n* @example\n* var y = cdf( 2.0, 3, 1.0 );\n* // returns ~0.323\n*\n* @example\n* var y = cdf( 2.0, 2.5, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( -1.0, 2, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( +Infinity, 4, 2.0 );\n* // returns 1.0\n*\n* @example\n* var y = cdf( -Infinity, 4, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( NaN, 0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 0, NaN );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, -1, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 1, -1.0 );\n* // returns NaN\n*/\nfunction cdf( x, k, lambda ) {\n\tif ( !isNonNegativeInteger( k ) ) {\n\t\treturn NaN;\n\t}\n\treturn gammaCDF( x, k, lambda );\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for an exponential distribution with rate parameter `lambda` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} lambda - rate parameter\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 2.0, 0.1 );\n* // returns ~0.181\n*\n* @example\n* var y = cdf( 1.0, 2.0 );\n* // returns ~0.865\n*\n* @example\n* var y = cdf( -1.0, 4.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative rate parameter:\n* var y = cdf( 2.0, -1.0 );\n* // returns NaN\n*/\nfunction cdf( x, lambda ) {\n\tif (\n\t\tisnan( lambda ) ||\n\t\tlambda < 0.0 ||\n\t\tlambda === PINF\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < 0.0 ) {\n\t\treturn 0.0;\n\t}\n\treturn 1.0 - exp( -lambda * x );\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport betainc from '@stdlib/math-base-special-betainc';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for an F distribution with numerator degrees of freedom `d1` and denominator degrees of freedom `d2` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} d1 - numerator degrees of freedom\n* @param {PositiveNumber} d2 - denominator degrees of freedom\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 2.0, 1.0, 1.0 );\n* // returns ~0.608\n*\n* @example\n* var y = cdf( 2.0, 8.0, 4.0 );\n* // returns ~0.737\n*\n* @example\n* var y = cdf( -1.0, 2.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( +Infinity, 4.0, 2.0 );\n* // returns 1.0\n*\n* @example\n* var y = cdf( -Infinity, 4.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( NaN, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 1.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 1.0, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, -1.0, 1.0 );\n* // returns NaN\n*/\nfunction cdf( x, d1, d2 ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( d1 ) ||\n\t\tisnan( d2 ) ||\n\t\td1 <= 0.0 ||\n\t\td2 <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x <= 0.0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( x === PINF ) {\n\t\treturn 1.0;\n\t}\n\tif ( d1 * x > d2 ) {\n\t\treturn betainc( (d1*x)/(d2+(d1*x)), d1/2.0, d2 /2.0, true, false );\n\t}\n\treturn betainc( d2/(d2+(d1*x)), d2/2.0, d1/2.0, true, true );\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a Fréchet distribution with shape `alpha`, scale `s`, and location `m` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} s - scale parameter\n* @param {number} m - location parameter\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 10.0, 2.0, 3.0, 2.0 );\n* // returns ~0.869\n*\n* @example\n* var y = cdf( -0.2, 1.0, 3.0, -1.0 );\n* // returns ~0.024\n*\n* @example\n* var y = cdf( 1.5, 2.0, 1.0, 1.0 );\n* // returns ~0.018\n*\n* @example\n* var y = cdf( NaN, 2.0, 1.0, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN, 1.0, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 2.0, NaN, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 2.0, 1.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, -1.0, 1.0, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 1.0, -1.0, 0.0 );\n* // returns NaN\n*/\nfunction cdf( x, alpha, s, m ) {\n\tvar z;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( alpha ) ||\n\t\tisnan( s ) ||\n\t\tisnan( m ) ||\n\t\talpha <= 0.0 ||\n\t\ts <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x <= m ) {\n\t\treturn 0.0;\n\t}\n\tz = ( x - m ) / s;\n\treturn exp( -pow( z, -alpha ) );\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a Gumbel distribution with location parameter `mu` and scale parameter `beta` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} mu - location parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 10.0, 0.0, 3.0 );\n* // returns ~0.965\n*\n* @example\n* var y = cdf( -2.0, 0.0, 3.0 );\n* // returns ~0.143\n*\n* @example\n* var y = cdf( 0.0, 0.0, 1.0 );\n* // returns ~0.368\n*\n* @example\n* var y = cdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative scale parameter:\n* var y = cdf( 0.0, 0.0, -1.0 );\n* // returns NaN\n*/\nfunction cdf( x, mu, beta ) {\n\tvar z;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( mu ) ||\n\t\tisnan( beta ) ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tz = ( x - mu ) / beta;\n\treturn exp( -exp( -z ) );\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport gammainc from '@stdlib/math-base-special-gammainc';\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for an inverse gamma distribution with shape parameter `alpha` and scale parameter `beta` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 2.0, 1.0, 1.0 );\n* // returns ~0.607\n*\n* @example\n* var y = cdf( 2.0, 3.0, 1.0 );\n* // returns ~0.986\n*\n* @example\n* var y = cdf( -1.0, 2.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( +Infinity, 4.0, 2.0 );\n* // returns 1.0\n*\n* @example\n* var y = cdf( -Infinity, 4.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, -1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 1.0, -1.0 );\n* // returns NaN\n*/\nfunction cdf( x, alpha, beta ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x <= 0.0 ) {\n\t\treturn 0.0;\n\t}\n\treturn gammainc( beta / x, alpha, true, true );\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a Kumaraswamy's double bounded distribution with first shape parameter `a` and second shape parameter `b` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} a - first shape parameter\n* @param {PositiveNumber} b - second shape parameter\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 0.5, 1.0, 1.0 );\n* // returns ~0.5\n*\n* @example\n* var y = cdf( 0.5, 2.0, 4.0 );\n* // returns ~0.684\n*\n* @example\n* var y = cdf( 0.2, 2.0, 2.0 );\n* // returns ~0.078\n*\n* @example\n* var y = cdf( 0.8, 4.0, 4.0 );\n* // returns ~0.878\n*\n* @example\n* var y = cdf( -0.5, 4.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( 1.5, 4.0, 2.0 );\n* // returns 1.0\n*\n* @example\n* var y = cdf( 2.0, -1.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 0.5, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( NaN, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 1.0, NaN );\n* // returns NaN\n*/\nfunction cdf( x, a, b ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\ta <= 0.0 ||\n\t\tb <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x <= 0.0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( x >= 1.0 ) {\n\t\treturn 1.0;\n\t}\n\treturn 1.0 - pow( 1.0 - pow( x, a ), b );\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a Laplace distribution with location parameter `mu` and scale parameter `b` at value `x`.\n*\n* @param {number} x - input value\n* @param {number} mu - location parameter\n* @param {PositiveNumber} b - scale parameter\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 2.0, 0.0, 1.0 );\n* // returns ~0.932\n*\n* @example\n* var y = cdf( 5.0, 10.0, 3.0 );\n* // returns ~0.094\n*\n* @example\n* var y = cdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative scale parameter:\n* var y = cdf( 2.0, 0.0, -1.0 );\n* // returns NaN\n*/\nfunction cdf( x, mu, b ) {\n\tvar z;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( mu ) ||\n\t\tisnan( b ) ||\n\t\tb <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tz = ( x - mu ) / b;\n\tif ( x < mu ) {\n\t\treturn 0.5 * exp( z );\n\t}\n\treturn 1.0 - ( 0.5 * exp( -z ) );\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport erfc from '@stdlib/math-base-special-erfc';\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a Lévy distribution with location parameter `mu` and scale parameter `c` at value `x`.\n*\n* @param {number} x - input value\n* @param {number} mu - location parameter\n* @param {PositiveNumber} c - scale parameter\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 2.0, 0.0, 1.0 );\n* // returns ~0.48\n*\n* @example\n* var y = cdf( 12.0, 10.0, 3.0 );\n* // returns ~0.221\n*\n* @example\n* var y = cdf( 9.0, 10.0, 3.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative scale parameter:\n* var y = cdf( 2.0, 0.0, -1.0 );\n* // returns NaN\n*/\nfunction cdf( x, mu, c ) {\n\tvar z;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( mu ) ||\n\t\tisnan( c ) ||\n\t\tc <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < mu ) {\n\t\treturn 0.0;\n\t}\n\tz = sqrt( c / ( 2.0 * ( x-mu ) ) );\n\treturn erfc( z );\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a logistic distribution with location parameter `mu` and scale parameter `s` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} mu - location parameter\n* @param {NonNegativeNumber} s - scale parameter\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 2.0, 0.0, 1.0 );\n* // returns ~0.881\n*\n* @example\n* var y = cdf( 5.0, 10.0, 3.0 );\n* // returns ~0.159\n*\n* @example\n* var y = cdf( 2.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*/\nfunction cdf( x, mu, s ) {\n\tvar z;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( mu ) ||\n\t\tisnan( s ) ||\n\t\ts < 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( s === 0.0 ) {\n\t\treturn ( x < mu ) ? 0.0 : 1.0;\n\t}\n\tz = ( x - mu ) / s;\n\treturn 1.0 / ( 1.0 + exp( -z ) );\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport erfc from '@stdlib/math-base-special-erfc';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a Normal distribution with mean `mu` and standard deviation `sigma` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} mu - mean\n* @param {NonNegativeNumber} sigma - standard deviation\n* @returns {Probability} evaluated cumulative distribution function\n*\n* @example\n* var y = cdf( 2.0, 0.0, 1.0 );\n* // returns ~0.977\n*\n* @example\n* var y = cdf( -1.0, -1.0, 2.0 );\n* // returns 0.5\n*\n* @example\n* var y = cdf( -1.0, 4.0, 2.0 );\n* // returns ~0.006\n*\n* @example\n* var y = cdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative standard deviation:\n* var y = cdf( 2.0, 0.0, -1.0 );\n* // returns NaN\n*/\nfunction cdf( x, mu, sigma ) {\n\tvar denom;\n\tvar xc;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( mu ) ||\n\t\tisnan( sigma ) ||\n\t\tsigma < 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( sigma === 0.0 ) {\n\t\treturn (x < mu) ? 0.0 : 1.0;\n\t}\n\tdenom = sigma * sqrt( 2.0 );\n\txc = x - mu;\n\treturn 0.5 * erfc( -xc/denom );\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport normalCDF from '@stdlib/stats-base-dists-normal-cdf';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a lognormal distribution with location parameter `mu` and scale parameter `sigma` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} mu - location parameter\n* @param {PositiveNumber} sigma - scale parameter\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 2.0, 0.0, 1.0 );\n* // returns ~0.756\n*\n* @example\n* var y = cdf( 5.0, 10.0, 3.0 );\n* // returns ~0.003\n*\n* @example\n* var y = cdf( 2.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*/\nfunction cdf( x, mu, sigma ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( mu ) ||\n\t\tisnan( sigma ) ||\n\t\tsigma <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x <= 0.0 ) {\n\t\treturn 0.0;\n\t}\n\treturn normalCDF( ln(x), mu, sigma );\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a Pareto (Type I) distribution with shape parameter `alpha` and scale parameter `beta` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 2.0, 1.0, 1.0 );\n* // returns 0.5\n*\n* @example\n* var y = cdf( 5.0, 2.0, 4.0 );\n* // returns ~0.36\n*\n* @example\n* var y = cdf( 4.0, 2.0, 2.0 );\n* // returns 0.75\n*\n* @example\n* var y = cdf( 1.9, 2.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( +Infinity, 4.0, 2.0 );\n* // returns 1.0\n*\n* @example\n* var y = cdf( 2.0, -1.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 0.5, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( NaN, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 1.0, NaN );\n* // returns NaN\n*/\nfunction cdf( x, alpha, beta ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < beta ) {\n\t\treturn 0.0;\n\t}\n\treturn 1.0 - pow( beta / x, alpha );\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a Rayleigh distribution with scale parameter `sigma` at a value `x`.\n*\n* @param {number} x - input value\n* @param {NonNegativeNumber} sigma - scale parameter\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 2.0, 3.0 );\n* // returns ~0.199\n*\n* @example\n* var y = cdf( 1.0, 2.0 );\n* // returns ~0.118\n*\n* @example\n* var y = cdf( -1.0, 4.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative scale parameter:\n* var y = cdf( 2.0, -1.0 );\n* // returns NaN\n*/\nfunction cdf( x, sigma ) {\n\tvar s2;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( sigma ) ||\n\t\tsigma < 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( sigma === 0.0 ) {\n\t\treturn ( x < 0.0 ) ? 0.0 : 1.0;\n\t}\n\tif ( x < 0.0 ) {\n\t\treturn 0.0;\n\t}\n\ts2 = pow( sigma, 2.0 );\n\treturn 1.0 - exp( -pow( x, 2.0 ) / ( 2.0 * s2 ) );\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport betainc from '@stdlib/math-base-special-betainc';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a Student's t distribution with degrees of freedom `v` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} v - degrees of freedom\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 2.0, 0.1 );\n* // returns ~0.611\n*\n* @example\n* var y = cdf( 1.0, 2.0 );\n* // returns ~0.789\n*\n* @example\n* var y = cdf( -1.0, 4.0 );\n* // returns ~0.187\n*\n* @example\n* var y = cdf( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, -1.0 );\n* // returns NaN\n*/\nfunction cdf( x, v ) {\n\tvar x2;\n\tvar p;\n\tvar z;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( v ) ||\n\t\tv <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x === 0.0 ) {\n\t\treturn 0.5;\n\t}\n\tx2 = pow( x, 2.0 );\n\tif ( v > 2.0*x2 ) {\n\t\tz = x2 / ( v + x2 );\n\t\tp = betainc( z, 0.5, v/2.0, true, true ) / 2.0;\n\t} else {\n\t\tz = v / ( v + x2 );\n\t\tp = betainc( z, v/2.0, 0.5, true, false ) / 2.0;\n\t}\n\treturn ( x > 0.0 ) ? 1.0 - p : p;\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a triangular distribution with lower limit `a` and upper limit `b` and mode `c` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} a - lower limit\n* @param {number} b - upper limit\n* @param {number} c - mode\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 0.5, -1.0, 1.0, 0.0 );\n* // returns 0.875\n*\n* @example\n* var y = cdf( 0.5, -1.0, 1.0, 0.5 );\n* // returns 0.75\n*\n* @example\n* var y = cdf( -10.0, -20.0, 0.0, -2.0 );\n* // returns ~0.278\n*\n* @example\n* var y = cdf( -2.0, -1.0, 1.0, 0.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( NaN, 0.0, 1.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN, 1.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 0.0, NaN, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 1.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 1.0, 0.0, 1.5 );\n* // returns NaN\n*/\nfunction cdf( x, a, b, c ) {\n\tvar denom1;\n\tvar denom2;\n\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\tisnan( c ) ||\n\t\ta > c ||\n\t\tc > b\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x <= a ) {\n\t\treturn 0.0;\n\t}\n\tdenom1 = ( b - a ) * ( c - a );\n\tdenom2 = ( b - a ) * ( b - c );\n\n\t// Case: x > a\n\tif ( x <= c ) {\n\t\treturn pow( x - a, 2.0 ) / denom1;\n\t}\n\t// Case: x > c\n\tif ( x < b ) {\n\t\treturn 1.0 - ( pow( b - x, 2.0 ) / denom2 );\n\t}\n\t// Case: x >= b\n\treturn 1.0;\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a uniform distribution with minimum support `a` and maximum support `b` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 9.0, 0.0, 10.0 );\n* // returns 0.9\n*\n* @example\n* var y = cdf( 0.5, 0.0, 2.0 );\n* // returns 0.25\n*\n* @example\n* var y = cdf( +Infinity, 2.0, 4.0 );\n* // returns 1.0\n*\n* @example\n* var y = cdf( -Infinity, 2.0, 4.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 1.0, 0.0 );\n* // returns NaN\n*/\nfunction cdf( x, a, b ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\ta >= b\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < a ) {\n\t\treturn 0.0;\n\t}\n\tif ( x >= b ) {\n\t\treturn 1.0;\n\t}\n\treturn ( x - a ) / ( b - a );\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport expm1 from '@stdlib/math-base-special-expm1';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a Weibull distribution with scale parameter `k` and shape parameter `lambda` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} k - scale parameter\n* @param {PositiveNumber} lambda - shape parameter\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 2.0, 1.0, 1.0 );\n* // returns ~0.865\n*\n* @example\n* var y = cdf( -1.0, 2.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( +Infinity, 4.0, 2.0 );\n* // returns 1.0\n*\n* @example\n* var y = cdf( -Infinity, 4.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 0.0, -1.0 );\n* // returns NaN\n*/\nfunction cdf( x, k, lambda ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( k ) ||\n\t\tisnan( lambda ) ||\n\t\tk <= 0.0 ||\n\t\tlambda <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < 0.0 ) {\n\t\treturn 0.0;\n\t}\n\treturn -expm1( -pow( x / lambda, k ) );\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Cauchy distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-cauchy-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-cauchy-cdf';\n*\n* var y = cdf( 2.0, 0.0, 1.0 );\n* // returns ~0.852\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-cauchy-cdf';\n*\n* var cdf = factory( 1.5, 3.0 );\n*\n* var y = cdf( 1.0 );\n* // returns ~0.447\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport atan2 from '@stdlib/math-base-special-atan2';\n\n\n// VARIABLES //\n\nvar ONE_OVER_PI = 0.3183098861837907;\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a Cauchy distribution with location parameter `x0` and scale parameter `gamma`.\n*\n* @param {number} x0 - location parameter\n* @param {PositiveNumber} gamma - scale parameter\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 10.0, 2.0 );\n*\n* var y = cdf( 10.0 );\n* // returns 0.5\n*\n* y = cdf( 12.0 );\n* // returns 0.75\n*/\nfunction factory( x0, gamma ) {\n\tif (\n\t\tisnan( gamma ) ||\n\t\tisnan( x0 ) ||\n\t\tgamma <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a Cauchy distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn ( ONE_OVER_PI * atan2( x-x0, gamma ) ) + 0.5;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Degenerate distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-degenerate-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-degenerate-cdf';\n*\n* var y = cdf( 2.0, 5.0 );\n* // returns 0.0\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-degenerate-cdf';\n*\n* var cdf = factory( 5.0 );\n*\n* var y = cdf( 3.0 );\n* // returns 0.0\n*\n* y = cdf( 6.0 );\n* // returns 1.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a degenerate distribution with mean value `mu`.\n*\n* @param {number} x - input value\n* @param {number} mu - constant value of distribution\n* @returns {Probability} evaluated cumulative distribution function\n*\n* @example\n* var y = cdf( 2.0, 3.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( 4.0, 3.0 );\n* // returns 1.0\n*\n* @example\n* var y = cdf( 3.0, 3.0 );\n* // returns 1.0\n*\n* @example\n* var y = cdf( NaN, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN );\n* // returns NaN\n*/\nfunction cdf( x, mu ) {\n\tif ( isnan( x ) || isnan( mu ) ) {\n\t\treturn NaN;\n\t}\n\treturn (x < mu) ? 0.0 : 1.0;\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Gamma distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-gamma-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-gamma-cdf';\n*\n* var y = cdf( 2.0, 8.0, 3.0 );\n* // returns ~0.256\n*\n* y = cdf( 0.0, 1.0, 1.0 );\n* // returns 0.0\n*\n* var mycdf = cdf.factory( 2.0, 0.5 );\n* y = mycdf( 6.0 );\n* // returns ~0.801\n*\n* y = mycdf( 2.0 );\n* // returns ~0.264\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Chi distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-chi-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-chi-cdf';\n*\n* var y = cdf( 2.0, 8.0 );\n* // returns ~0.143\n*\n* y = cdf( 0.0, 1.0 );\n* // returns 0.0\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-chi-cdf';\n*\n* var cdf = factory( 1.0 );\n*\n* var y = cdf( 2.0 );\n* // returns ~0.954\n*\n* y = cdf( 1.2 );\n* // returns ~0.77\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { factory as degenerate } from '@stdlib/stats-base-dists-degenerate-cdf';\nimport { factory as gammaFactory } from '@stdlib/stats-base-dists-gamma-cdf';\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a chi distribution with degrees of freedom `k`.\n*\n* @param {NonNegativeNumber} k - degrees of freedom\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 3.0 );\n*\n* var y = cdf( 6.0 );\n* // returns ~1.0\n*\n* y = cdf( 1.5 );\n* // returns ~0.478\n*/\nfunction factory( k ) {\n\tvar gamma;\n\tif ( k === 0.0 ) {\n\t\treturn degenerate( 0.0 );\n\t}\n\tgamma = gammaFactory( k/2.0, 0.5 );\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a chi distribution with degrees of freedom `k`.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn gamma( x*x );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Chi-squared distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-chisquare-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-chisquare-cdf';\n*\n* var y = cdf( 2.0, 8.0 );\n* // returns ~0.019\n*\n* y = cdf( 0.0, 1.0 );\n* // returns 0.0\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-chisquare-cdf';\n*\n* var cdf = factory( 1.0 );\n*\n* var y = cdf( 2.0 );\n* // returns ~0.843\n*\n* y = cdf( 1.2 );\n* // returns ~0.727\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { factory as gammaFactory } from '@stdlib/stats-base-dists-gamma-cdf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a chi-squared distribution with degrees of freedom `k`.\n*\n* @param {NonNegativeNumber} k - degrees of freedom\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 3.0 );\n*\n* var y = cdf( 6.0 );\n* // returns ~0.888\n*\n* y = cdf( 1.5 );\n* // returns ~0.318\n*/\nfunction factory( k ) {\n\treturn gammaFactory( k/2.0, 0.5 );\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Raised cosine distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-cosine-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-cosine-cdf';\n*\n* var y = cdf( 0.5, 0.0, 1.0 );\n* // returns ~0.909\n*\n* var mycdf = cdf.factory( 3.0, 1.5 );\n*\n* y = mycdf( 4.0 );\n* // returns ~0.971\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport { factory as degenerate } from '@stdlib/stats-base-dists-degenerate-cdf';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sinpi from '@stdlib/math-base-special-sinpi';\nimport PI from '@stdlib/constants-float64-pi';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a raised cosine distribution with location parameter `mu` and scale parameter `s`.\n*\n* @param {number} mu - location parameter\n* @param {NonNegativeNumber} s - scale parameter\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 3.0, 1.5 );\n*\n* var y = cdf( 1.9 );\n* // returns ~0.015\n*\n* y = cdf( 4.0 );\n* // returns ~0.971\n*/\nfunction factory( mu, s ) {\n\tif ( isnan( mu ) || isnan( s ) || s < 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( s === 0.0 ) {\n\t\treturn degenerate( mu );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a raised cosine distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tvar z;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < mu - s ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tif ( x > mu + s ) {\n\t\t\treturn 1.0;\n\t\t}\n\t\tz = ( x - mu ) / s;\n\t\treturn ( 1.0 + z + ( sinpi( z ) / PI ) ) / 2.0;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Erlang distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-erlang-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-erlang-cdf';\n*\n* var y = cdf( 2.0, 8, 3.0 );\n* // returns ~0.256\n*\n* y = cdf( 0.0, 1, 1.0 );\n* // returns 0.0\n*\n* var mycdf = cdf.factory( 2, 0.5 );\n* y = mycdf( 6.0 );\n* // returns ~0.801\n*\n* y = mycdf( 2.0 );\n* // returns ~0.264\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport constantFunction from '@stdlib/utils-constant-function';\nimport { factory as factoryGamma } from '@stdlib/stats-base-dists-gamma-cdf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for an Erlang distribution with shape parameter `k` and rate parameter `lambda`.\n*\n* @param {NonNegativeInteger} k - shape parameter\n* @param {PositiveNumber} lambda - rate parameter\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 2, 0.1 );\n* var y = cdf( 12.0 );\n* // returns ~0.337\n*\n* y = cdf( 8.0 );\n* // returns ~0.191\n*/\nfunction factory( k, lambda ) {\n\tif ( !isNonNegativeInteger( k ) ) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn factoryGamma( k, lambda );\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Exponential distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-exponential-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-exponential-cdf';\n*\n* var y = cdf( 2.0, 0.1 );\n* // returns ~0.181\n*\n* var myCDF = cdf.factory( 0.5 );\n* y = myCDF( 3.0 );\n* // returns ~0.777\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for an exponential distribution with rate parameter `lambda`.\n*\n* @param {PositiveNumber} lambda - rate parameter\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 0.5 );\n* var y = cdf( 3.0 );\n* // returns ~0.777\n*\n* y = cdf( 1.0 );\n* // returns ~0.393\n*/\nfunction factory( lambda ) {\n\tif (\n\t\tisnan( lambda ) ||\n\t\tlambda < 0.0 ||\n\t\tlambda === PINF\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for an exponential distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( x < 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn 1.0 - exp( -lambda * x );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the cumulative distribution function (CDF) for an F distribution.\n*\n* @module @stdlib/stats-base-dists-f-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-f-cdf';\n*\n* var y = cdf( 2.0, 1.0, 1.0 );\n* // returns ~0.608\n*\n* y = cdf( 2.0, 8.0, 4.0 );\n* // returns ~0.737\n*\n* y = cdf( -1.0, 2.0, 2.0 );\n* // returns 0.0\n*\n* var mycdf = cdf.factory( 10.0, 2.0 );\n*\n* y = mycdf( 10.0 );\n* // returns ~0.906\n*\n* y = mycdf( 8.0 );\n* // returns ~0.884\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport betainc from '@stdlib/math-base-special-betainc';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for an F distribution with numerator degrees of freedom `d1` and denominator degrees of freedom `d2`.\n*\n* @param {PositiveNumber} d1 - numerator degrees of freedom\n* @param {PositiveNumber} d2 - denominator degrees of freedom\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 10.0, 2.0 );\n*\n* var y = cdf( 10.0 );\n* // returns ~0.906\n*\n* y = cdf( 8.0 );\n* // returns ~0.884\n*/\nfunction factory( d1, d2 ) {\n\tif (\n\t\tisnan( d1 ) ||\n\t\tisnan( d2 ) ||\n\t\td1 <= 0.0 ||\n\t\td2 <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for an F distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 10.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x <= 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tif ( x === PINF ) {\n\t\t\treturn 1.0;\n\t\t}\n\t\tif ( d1 * x > d2 ) {\n\t\t\treturn betainc( (d1*x)/(d2+(d1*x)), d1/2.0, d2/2.0, true, false );\n\t\t}\n\t\treturn betainc( d2/(d2+(d1*x)), d2/2.0, d1/2.0, true, true );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Fréchet distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-frechet-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-frechet-cdf';\n*\n* var y = cdf( 10.0, 2.0, 3.0, 5.0 );\n* // returns ~0.698\n*\n* y = cdf( 0.0, 2.0, 3.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-frechet-cdf';\n* var cdf = factory( 3.0, 3.0, 5.0 );\n* var y = cdf( 10.0 );\n* // returns ~0.806\n*\n* y = cdf( 7.0 );\n* // returns ~0.034\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a Fréchet distribution with shape `alpha`, scale `s`, and location `m`.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} s - scale parameter\n* @param {number} m - location parameter\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 3.0, 3.0, 5.0 );\n*\n* var y = cdf( 10.0 );\n* // returns ~0.806\n*\n* y = cdf( 7.0 );\n* // returns ~0.034\n*/\nfunction factory( alpha, s, m ) {\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( s ) ||\n\t\tisnan( m ) ||\n\t\talpha <= 0.0 ||\n\t\ts <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a Fréchet distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( -2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tvar z;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x <= m ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tz = ( x - m ) / s;\n\t\treturn exp( -pow( z, -alpha ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Gumbel distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-gumbel-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-gumbel-cdf';\n*\n* var y = cdf( 10.0, 0.0, 3.0 );\n* // returns ~0.965\n*\n* y = cdf( 0.0, 0.0, 3.0 );\n* // returns ~0.368\n*\n* var myCDF = cdf.factory( 2.0, 3.0 );\n* y = myCDF( 10.0 );\n* // returns ~0.933\n*\n* y = myCDF( 2.0 );\n* // returns ~0.368\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a Gumbel distribution with location parameter `mu` and scale parameter `beta`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 0.0, 3.0 );\n*\n* var y = cdf( 10.0 );\n* // returns ~0.965\n*\n* y = cdf( -2.0 );\n* // returns ~0.143\n*/\nfunction factory( mu, beta ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( beta ) ||\n\t\tbeta <= 0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a Gumbel distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( -2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tvar z;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tz = ( x - mu ) / beta;\n\t\treturn exp( -exp( -z ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Inverse gamma distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-invgamma-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-invgamma-cdf';\n*\n* var y = cdf( 1.0, 8.0, 3.0 );\n* // returns ~0.988\n*\n* y = cdf( 0.0, 1.0, 1.0 );\n* // returns 0.0\n*\n* var mycdf = cdf.factory( 2.0, 0.5 );\n* y = mycdf( 0.5 );\n* // returns ~0.736\n*\n* y = mycdf( 2.0 );\n* // returns ~0.973\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport gammainc from '@stdlib/math-base-special-gammainc';\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for an inverse gamma distribution with shape parameter `alpha` and scale parameter `beta`.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 3.0, 1.5 );\n*\n* var y = cdf( 1.0 );\n* // returns ~0.809\n*\n* y = cdf( 2.0 );\n* // returns ~0.96\n*/\nfunction factory( alpha, beta ) {\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for an inverse gamma distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x <= 0 ) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn gammainc( beta / x, alpha, true, true );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the cumulative distribution function (CDF) for a Kumaraswamy's double bounded distribution.\n*\n* @module @stdlib/stats-base-dists-kumaraswamy-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-kumaraswamy-cdf';\n*\n* var y = cdf( 0.5, 1.0, 1.0 );\n* // returns 0.5\n*\n* y = cdf( 0.5, 2.0, 4.0 );\n* // returns ~0.684\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-kumaraswamy-cdf';\n*\n* var cdf = factory( 0.5, 0.5 );\n*\n* var y = cdf( 0.8 );\n* // returns ~0.675\n*\n* y = cdf( 0.3 );\n* // returns ~0.327\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a Kumaraswamy's double bounded distribution with first shape parameter `a` and second shape parameter `b`.\n*\n* @param {PositiveNumber} a - first shape parameter\n* @param {PositiveNumber} b - second shape parameter\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 0.5, 0.5 );\n*\n* var y = cdf( 0.8 );\n* // returns ~0.675\n*\n* y = cdf( 0.3 );\n* // returns ~0.327\n*/\nfunction factory( a, b ) {\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\ta <= 0.0 ||\n\t\tb <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a Kumaraswamy's double bounded distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x <= 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tif ( x >= 1.0 ) {\n\t\t\treturn 1.0;\n\t\t}\n\t\treturn 1.0 - pow( 1.0 - pow( x, a ), b );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Laplace distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-laplace-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-laplace-cdf';\n*\n* var y = cdf( 10.0, 0.0, 3.0 );\n* // returns ~0.982\n*\n* y = cdf( 0.0, 0.0, 3.0 );\n* // returns 0.5\n*\n* var myCDF = cdf.factory( 2.0, 3.0 );\n* y = myCDF( 10.0 );\n* // returns ~0.965\n*\n* y = myCDF( 2.0 );\n* // returns 0.5\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a Laplace distribution with location parameter `mu` and scale parameter `b`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} b - scale parameter\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 3.0, 1.5 );\n*\n* var y = cdf( 1.0 );\n* // returns ~0.132\n*\n* y = cdf( 4.0 );\n* // returns ~0.743\n*/\nfunction factory( mu, b ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( b ) ||\n\t\tb <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a Laplace distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tvar z;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tz = ( x - mu ) / b;\n\t\tif ( x < mu ) {\n\t\t\treturn 0.5 * exp( z );\n\t\t}\n\t\treturn 1.0 - (0.5 * exp( -z ));\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Lévy distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-levy-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-levy-cdf';\n*\n* var y = cdf( 10.0, 0.0, 3.0 );\n* // returns ~0.584\n*\n* y = cdf( 0.3, 0.0, 3.0 );\n* // returns ~0.002\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-levy-cdf';\n*\n* var myCDF = factory( 2.0, 3.0 );\n* var y = myCDF( 100.0 );\n* // returns ~0.861\n*\n* y = myCDF( 10.0 );\n* // returns ~0.54\n*\n* y = myCDF( 2.0 );\n* // returns 0.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport erfc from '@stdlib/math-base-special-erfc';\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a Lévy distribution with location parameter `mu` and scale parameter `c`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} c - scale parameter\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 3.0, 1.5 );\n*\n* var y = cdf( 4.0 );\n* // returns ~0.22\n*\n* y = cdf( 2.0 );\n* // returns 0.0\n*/\nfunction factory( mu, c ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( c ) ||\n\t\tc <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a Lévy distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tvar z;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < mu ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tz = sqrt( c / ( 2.0 * ( x-mu ) ) );\n\t\treturn erfc( z );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Logistic distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-logistic-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-logistic-cdf';\n*\n* var y = cdf( 2.0, 0.0, 1.0 );\n* // returns ~0.881\n*\n* var mycdf = cdf.factory( 3.0, 1.5 );\n*\n* y = mycdf( 1.0 );\n* // returns ~0.209\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport { factory as degenerate } from '@stdlib/stats-base-dists-degenerate-cdf';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a logistic distribution with location parameter `mu` and scale parameter `s`.\n*\n* @param {number} mu - location parameter\n* @param {NonNegativeNumber} s - scale parameter\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 3.0, 1.5 );\n*\n* var y = cdf( 1.0 );\n* // returns ~0.209\n*\n* y = cdf( 4.0 );\n* // returns ~0.661\n*/\nfunction factory( mu, s ) {\n\tif ( isnan( mu ) || isnan( s ) || s < 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( s === 0.0 ) {\n\t\treturn degenerate( mu );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a logistic distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tvar z;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tz = ( x - mu ) / s;\n\t\treturn 1.0 / ( 1.0 + exp( -z ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Normal distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-normal-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-normal-cdf';\n*\n* var y = cdf( 2.0, 0.0, 1.0 );\n* // returns ~0.977\n*\n* var myCDF = cdf.factory( 10.0, 2.0 );\n* y = myCDF( 10.0 );\n* // returns 0.5\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport { factory as degenerate } from '@stdlib/stats-base-dists-degenerate-cdf';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport erfc from '@stdlib/math-base-special-erfc';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a Normal distribution.\n*\n* @param {number} mu - mean\n* @param {NonNegativeNumber} sigma - standard deviation\n* @returns {Function} function to evaluate the cumulative distribution function\n*\n* @example\n* var cdf = factory( 10.0, 2.0 );\n* var y = cdf( 10.0 );\n* // returns 0.5\n*\n* y = cdf( 12.0 );\n* // returns ~0.841\n*/\nfunction factory( mu, sigma ) {\n\tvar denom;\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( sigma ) ||\n\t\tsigma < 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( sigma === 0.0 ) {\n\t\treturn degenerate( mu );\n\t}\n\tdenom = sigma * sqrt( 2.0 );\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a Normal distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tvar xc;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\txc = x - mu;\n\t\treturn 0.5 * erfc( -xc / denom );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the lognormal distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-lognormal-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-lognormal-cdf';\n*\n* var y = cdf( 2.0, 0.0, 1.0 );\n* // returns ~0.756\n*\n* y = cdf( 5.0, 10.0, 3.0 );\n* // returns ~0.003\n*\n* var mycdf = cdf.factory( 3.0, 1.5 );\n*\n* y = mycdf( 1.0 );\n* // returns ~0.023\n*\n* y = mycdf( 4.0 );\n* // returns ~0.141\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport normalCDF from '@stdlib/stats-base-dists-normal-cdf';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a lognormal distribution with location parameter `mu` and scale parameter `sigma`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} sigma - scale parameter\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 3.0, 1.5 );\n*\n* var y = cdf( 1.0 );\n* // returns ~0.023\n*\n* y = cdf( 4.0 );\n* // returns ~0.141\n*/\nfunction factory( mu, sigma ) {\n\tif ( isnan( mu ) || isnan( sigma ) || sigma <= 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a lognormal distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x <= 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn normalCDF( ln(x), mu, sigma );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Pareto (Type I) distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-pareto-type1-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-pareto-type1-cdf';\n*\n* var y = cdf( 2.0, 1.0, 1.0 );\n* // returns 0.5\n*\n* y = cdf( 5.0, 2.0, 4.0 );\n* // returns ~0.36\n*\n* y = cdf( 4.0, 2.0, 2.0 );\n* // returns 0.75\n*\n* y = cdf( 1.9, 2.0, 2.0 );\n* // returns 0.0\n*\n* y = cdf( +Infinity, 4.0, 2.0 );\n* // returns 1.0\n*\n* var mycdf = cdf.factory( 10.0, 2.0 );\n* y = mycdf( 3.0 );\n* // returns ~0.983\n*\n* y = mycdf( 2.5 );\n* // returns ~0.893\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a Pareto (Type I) distribution with shape parameter `alpha` and scale parameter `beta`.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 10.0, 2.0 );\n* var y = cdf( 3.0 );\n* // returns ~0.983\n*\n* y = cdf( 2.5 );\n* // returns ~0.893\n*/\nfunction factory( alpha, beta ) {\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a Pareto (Type I) distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < beta ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn 1.0 - pow( beta / x, alpha );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Rayleigh distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-rayleigh-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-rayleigh-cdf';\n*\n* var y = cdf( 2.0, 5.0 );\n* // returns ~0.077\n*\n* var myCDF = cdf.factory( 0.5 );\n* y = myCDF( 1.0 );\n* // returns ~0.865\n*\n* y = myCDF( 0.5 );\n* // returns ~0.393\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport { factory as degenerate } from '@stdlib/stats-base-dists-degenerate-cdf';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a Rayleigh distribution with scale parameter `sigma`.\n*\n* @param {NonNegativeNumber} sigma - scale parameter\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 2.0 );\n* var y = cdf( 3.0 );\n* // returns ~0.675\n*\n* y = cdf( 1.0 );\n* // returns ~0.118\n*/\nfunction factory( sigma ) {\n\tvar s2;\n\tif ( isnan( sigma ) || sigma < 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( sigma === 0.0 ) {\n\t\treturn degenerate( 0.0 );\n\t}\n\ts2 = pow( sigma, 2.0 );\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a Rayleigh distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn 1.0 - exp( -pow( x, 2.0 ) / ( 2.0 * s2 ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Student's t distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-t-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-t-cdf';\n*\n* var y = cdf( 2.0, 0.1 );\n* // returns ~0.611\n*\n* y = cdf( 1.0, 2.0 );\n* // returns ~0.789\n*\n* y = cdf( -1.0, 4.0 );\n* // returns ~0.187\n*\n* var mycdf = cdf.factory( 0.5 );\n* y = mycdf( 3.0 );\n* // returns ~0.816\n*\n* y = mycdf( 1.0 );\n* // returns ~0.699\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport betainc from '@stdlib/math-base-special-betainc';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a Student's t distribution with degrees of freedom `v`.\n*\n* @param {PositiveNumber} v - degrees of freedom\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 0.5 );\n* var y = cdf( 3.0 );\n* // returns ~0.816\n*\n* y = cdf( 1.0 );\n* // returns ~0.699\n*/\nfunction factory( v ) {\n\tif ( isnan( v ) || v <= 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a Student's t distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tvar x2;\n\t\tvar p;\n\t\tvar z;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x === 0.0 ) {\n\t\t\treturn 0.5;\n\t\t}\n\t\tx2 = pow( x, 2.0 );\n\t\tif ( v > 2.0*x2 ) {\n\t\t\tz = x2 / ( v + x2 );\n\t\t\tp = betainc( z, 0.5, v/2.0, true, true ) / 2.0;\n\t\t} else {\n\t\t\tz = v / ( v + x2 );\n\t\t\tp = betainc( z, v/2.0, 0.5, true, false ) / 2.0;\n\t\t}\n\t\treturn ( x > 0.0 ) ? 1.0 - p : p;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Triangular distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-triangular-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-triangular-cdf';\n*\n* var y = cdf( 0.5, -1.0, 1.0, 0.0 );\n* // returns 0.875\n*\n* y = cdf( 0.5, -1.0, 1.0, 0.5 );\n* // returns 0.75\n*\n* y = cdf( -10.0, -20.0, 0.0, -2.0 );\n* // returns ~0.278\n*\n* y = cdf( -2.0, -1.0, 1.0, 0.0 );\n* // returns 0.0\n*\n* var mycdf = cdf.factory( 0.0, 10.0, 2.0 );\n* y = mycdf( 0.5 );\n* // returns 0.0125\n*\n* y = mycdf( 8.0 );\n* // returns 0.95\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a triangular distribution with lower limit `a` and upper limit `b` and mode `c`.\n*\n* @param {number} a - lower limit\n* @param {number} b - upper limit\n* @param {number} c - mode\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 0.0, 10.0, 2.0 );\n* var y = cdf( 0.5 );\n* // returns 0.0125\n*\n* y = cdf( 8.0 );\n* // returns 0.95\n*/\nfunction factory( a, b, c ) {\n\tvar denom1;\n\tvar denom2;\n\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\tisnan( c )\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( !( a <= c && c <= b ) ) {\n\t\treturn constantFunction( NaN );\n\t}\n\n\tdenom1 = ( b - a ) * ( c - a );\n\tdenom2 = ( b - a ) * ( b - c );\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a triangular distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x <= a ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\t// Case: x > a\n\t\tif ( x <= c ) {\n\t\t\treturn pow( x - a, 2.0 ) / denom1;\n\t\t}\n\t\t// Case: x > c\n\t\tif ( x < b ) {\n\t\t\treturn 1 - ( pow( b - x, 2.0 ) / denom2 );\n\t\t}\n\t\t// Case: x >= b\n\t\treturn 1.0;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Uniform distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-uniform-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-uniform-cdf';\n*\n* var y = cdf( 5.0, 0.0, 4.0 );\n* // returns 1.0\n*\n* var mycdf = cdf.factory( 0.0, 10.0 );\n* y = mycdf( 0.5 );\n* // returns 0.05\n*\n* y = mycdf( 8.0 );\n* // returns 0.8\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a uniform distribution with minimum support `a` and maximum support `b`.\n*\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 0.0, 10.0 );\n* var y = cdf( 0.5 );\n* // returns 0.05\n*\n* y = cdf( 8.0 );\n* // returns 0.8\n*/\nfunction factory( a, b ) {\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\ta >= b\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a uniform distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < a ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tif ( x >= b ) {\n\t\t\treturn 1.0;\n\t\t}\n\t\treturn ( x - a ) / ( b - a );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Weibull distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-weibull-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-weibull-cdf';\n*\n* var y = cdf( 2.0, 1.0, 1.0 );\n* // returns ~0.865\n*\n* var myCDF = cdf.factory( 2.0, 10.0 );\n* y = myCDF( 12.0 );\n* // returns ~0.763\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport expm1 from '@stdlib/math-base-special-expm1';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a Weibull distribution.\n*\n* @param {PositiveNumber} k - scale parameter\n* @param {PositiveNumber} lambda - shape parameter\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 2.0, 10.0 );\n* var y = cdf( 12.0 );\n* // returns ~0.763\n*\n* y = cdf( 8.0 );\n* // returns ~0.473\n*/\nfunction factory( k, lambda ) {\n\tif (\n\t\tisnan( k ) ||\n\t\tisnan( lambda ) ||\n\t\tk <= 0.0 ||\n\t\tlambda <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a Weibull distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn -expm1( -pow( x / lambda, k ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport arcsine from '@stdlib/stats-base-dists-arcsine-cdf';\nimport beta from '@stdlib/stats-base-dists-beta-cdf';\nimport betaprime from '@stdlib/stats-base-dists-betaprime-cdf';\nimport cauchy from '@stdlib/stats-base-dists-cauchy-cdf';\nimport chi from '@stdlib/stats-base-dists-chi-cdf';\nimport chisquare from '@stdlib/stats-base-dists-chisquare-cdf';\nimport cosine from '@stdlib/stats-base-dists-cosine-cdf';\nimport erlang from '@stdlib/stats-base-dists-erlang-cdf';\nimport exponential from '@stdlib/stats-base-dists-exponential-cdf';\nimport f from '@stdlib/stats-base-dists-f-cdf';\nimport frechet from '@stdlib/stats-base-dists-frechet-cdf';\nimport gamma from '@stdlib/stats-base-dists-gamma-cdf';\nimport gumbel from '@stdlib/stats-base-dists-gumbel-cdf';\nimport invgamma from '@stdlib/stats-base-dists-invgamma-cdf';\nimport kumaraswamy from '@stdlib/stats-base-dists-kumaraswamy-cdf';\nimport laplace from '@stdlib/stats-base-dists-laplace-cdf';\nimport levy from '@stdlib/stats-base-dists-levy-cdf';\nimport logistic from '@stdlib/stats-base-dists-logistic-cdf';\nimport lognormal from '@stdlib/stats-base-dists-lognormal-cdf';\nimport normal from '@stdlib/stats-base-dists-normal-cdf';\nimport pareto1 from '@stdlib/stats-base-dists-pareto-type1-cdf';\nimport rayleigh from '@stdlib/stats-base-dists-rayleigh-cdf';\nimport t from '@stdlib/stats-base-dists-t-cdf';\nimport triangular from '@stdlib/stats-base-dists-triangular-cdf';\nimport uniform from '@stdlib/stats-base-dists-uniform-cdf';\nimport weibull from '@stdlib/stats-base-dists-weibull-cdf';\n\n\n// MAIN //\n\nvar CDF = {};\n\nCDF[ 'arcsine' ] = arcsine;\nCDF[ 'beta' ] = beta;\nCDF[ 'betaprime' ] = betaprime;\nCDF[ 'cauchy' ] = cauchy;\nCDF[ 'chi' ] = chi;\nCDF[ 'chisquare' ] = chisquare;\nCDF[ 'cosine' ] = cosine;\nCDF[ 'erlang' ] = erlang;\nCDF[ 'exponential' ] = exponential;\nCDF[ 'f' ] = f;\nCDF[ 'frechet' ] = frechet;\nCDF[ 'gamma' ] = gamma;\nCDF[ 'gumbel' ] = gumbel;\nCDF[ 'invgamma' ] = invgamma;\nCDF[ 'kumaraswamy' ] = kumaraswamy;\nCDF[ 'laplace' ] = laplace;\nCDF[ 'levy' ] = levy;\nCDF[ 'logistic' ] = logistic;\nCDF[ 'lognormal' ] = lognormal;\nCDF[ 'normal' ] = normal;\nCDF[ 'pareto-type1' ] = pareto1;\nCDF[ 'rayleigh' ] = rayleigh;\nCDF[ 't' ] = t;\nCDF[ 'triangular' ] = triangular;\nCDF[ 'uniform' ] = uniform;\nCDF[ 'weibull' ] = weibull;\n\n\n// EXPORTS //\n\nexport default CDF;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport format from '@stdlib/string-format';\nimport CDF from './cdf.js';\n\n\n// MAIN //\n\n/**\n* Returns the cumulative distribution function (CDF) corresponding to a provided distribution name.\n*\n* @private\n* @param {string} name - distribution name\n* @throws {Error} unsupported/unrecognized distribution name\n* @returns {Function} cumulative distribution function (CDF)\n*/\nfunction getCDF( name ) {\n\tvar cdf = CDF[ name ];\n\tif ( cdf === void 0 ) {\n\t\tthrow new Error( format( 'invalid argument. Unsupported/unrecognized distribution name. Value: `%s`.', name ) );\n\t}\n\treturn cdf;\n}\n\n\n// EXPORTS //\n\nexport default getCDF;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isInteger } from '@stdlib/assert-is-integer';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number primitive having a positive integer value.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number primitive having a positive integer value\n*\n* @example\n* var bool = isPositiveInteger( 3.0 );\n* // returns true\n*\n* @example\n* var bool = isPositiveInteger( new Number( 3.0 ) );\n* // returns false\n*/\nfunction isPositiveInteger( value ) {\n\treturn (\n\t\tisInteger( value ) &&\n\t\tvalue > 0.0\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isPositiveInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isObject as isInteger } from '@stdlib/assert-is-integer';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number object having a positive integer value.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number object having a positive integer value\n*\n* @example\n* var bool = isPositiveInteger( 3.0 );\n* // returns false\n*\n* @example\n* var bool = isPositiveInteger( new Number( 3.0 ) );\n* // returns true\n*/\nfunction isPositiveInteger( value ) {\n\treturn (\n\t\tisInteger( value ) &&\n\t\tvalue.valueOf() > 0.0\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isPositiveInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a positive integer.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a positive integer\n*\n* @example\n* var bool = isPositiveInteger( 5.0 );\n* // returns true\n*\n* @example\n* var bool = isPositiveInteger( new Number( 5.0 ) );\n* // returns true\n*\n* @example\n* var bool = isPositiveInteger( 0.0 );\n* // returns false\n*\n* @example\n* var bool = isPositiveInteger( -5.0 );\n* // returns false\n*\n* @example\n* var bool = isPositiveInteger( 3.14 );\n* // returns false\n*\n* @example\n* var bool = isPositiveInteger( null );\n* // returns false\n*/\nfunction isPositiveInteger( value ) {\n\treturn ( isPrimitive( value ) || isObject( value ) );\n}\n\n\n// EXPORTS //\n\nexport default isPositiveInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is a positive integer.\n*\n* @module @stdlib/assert-is-positive-integer\n*\n* @example\n* import isPositiveInteger from '@stdlib/assert-is-positive-integer';\n*\n* var bool = isPositiveInteger( 5.0 );\n* // returns true\n*\n* bool = isPositiveInteger( new Number( 5.0 ) );\n* // returns true\n*\n* bool = isPositiveInteger( -5.0 );\n* // returns false\n*\n* bool = isPositiveInteger( 3.14 );\n* // returns false\n*\n* bool = isPositiveInteger( null );\n* // returns false\n*\n* @example\n* import { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer';\n*\n* var bool = isPositiveInteger( 3.0 );\n* // returns true\n*\n* bool = isPositiveInteger( new Number( 3.0 ) );\n* // returns false\n*\n* @example\n* import { isObject as isPositiveInteger } from '@stdlib/assert-is-positive-integer';\n*\n* var bool = isPositiveInteger( 3.0 );\n* // returns false\n*\n* bool = isPositiveInteger( new Number( 3.0 ) );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'isPrimitive', isPrimitive );\nsetReadOnly( main, 'isObject', isObject );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum safe double-precision floating-point integer.\n*\n* @module @stdlib/constants-float64-max-safe-integer\n* @type {number}\n*\n* @example\n* import FLOAT64_MAX_SAFE_INTEGER from '@stdlib/constants-float64-max-safe-integer';\n* // returns 9007199254740991\n*/\n\n\n// MAIN //\n\n/**\n* Maximum safe double-precision floating-point integer.\n*\n* ## Notes\n*\n* The integer has the value\n*\n* ```tex\n* 2^{53} - 1\n* ```\n*\n* @constant\n* @type {number}\n* @default 9007199254740991\n* @see [Safe Integers]{@link http://www.2ality.com/2013/10/safe-integers.html}\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MAX_SAFE_INTEGER = 9007199254740991;\n\n\n// EXPORTS //\n\nexport default FLOAT64_MAX_SAFE_INTEGER;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInfinite from '@stdlib/math-base-assert-is-infinite';\nimport pow from '@stdlib/math-base-special-pow';\nimport abs from '@stdlib/math-base-special-abs';\nimport round from '@stdlib/math-base-special-round';\nimport MAX_SAFE_INTEGER from '@stdlib/constants-float64-max-safe-integer';\nimport MAX_EXP from '@stdlib/constants-float64-max-base10-exponent';\nimport MIN_EXP from '@stdlib/constants-float64-min-base10-exponent';\nimport MIN_EXP_SUBNORMAL from '@stdlib/constants-float64-min-base10-exponent-subnormal';\n\n\n// VARIABLES //\n\nvar MAX_INT = MAX_SAFE_INTEGER + 1;\nvar HUGE = 1.0e+308;\n\n\n// MAIN //\n\n/**\n* Rounds a double-precision floating-point number to the nearest multiple of \\\\(10^n\\\\).\n*\n* ## Method\n*\n* 1.  If \\\\(|x| <= 2^{53}\\\\) and \\\\(|n| <= 308\\\\), we can use the formula\n*\n*     ```tex\n*     \\operatorname{roundn}(x,n) = \\frac{\\operatorname{round}(x \\cdot 10^{-n})}{10^{-n}}\n*     ```\n*\n*     which shifts the decimal to the nearest multiple of \\\\(10^n\\\\), performs a standard \\\\(\\mathrm{round}\\\\) operation, and then shifts the decimal to its original position.\n*\n*     <!-- <note> -->\n*\n*     If \\\\(x \\cdot 10^{-n}\\\\) overflows, \\\\(x\\\\) lacks a sufficient number of decimal digits to have any effect when rounding. Accordingly, the rounded value is \\\\(x\\\\).\n*\n*     <!-- </note> -->\n*\n*     <!-- <note> -->\n*\n*     Note that rescaling \\\\(x\\\\) can result in unexpected behavior. For instance, the result of \\\\(\\operatorname{roundn}(0.2+0.1,-16)\\\\) is \\\\(0.3000000000000001\\\\) and not \\\\(0.3\\\\). While possibly unexpected, this is not a bug. The behavior stems from the fact that most decimal fractions cannot be exactly represented as floating-point numbers. And further, rescaling can lead to slightly different fractional values, which, in turn, affects the result of \\\\(\\mathrm{round}\\\\).\n*\n*     <!-- </note> -->\n*\n* 2.  If \\\\(n > 308\\\\), we recognize that the maximum absolute double-precision floating-point number is \\\\(\\approx 1.8\\mbox{e}308\\\\) and, thus, the result of rounding any possible finite number \\\\(x\\\\) to the nearest \\\\(10^n\\\\) is \\\\(0.0\\\\). To ensure consistent behavior with \\\\(\\operatorname{round}(x)\\\\), the sign of \\\\(x\\\\) is preserved.\n*\n* 3.  If \\\\(n < -324\\\\), \\\\(n\\\\) exceeds the maximum number of possible decimal places (such as with subnormal numbers), and, thus, the rounded value is \\\\(x\\\\).\n*\n* 4.  If \\\\(x > 2^{53}\\\\), \\\\(x\\\\) is **always** an integer (i.e., \\\\(x\\\\) has no decimal digits). If \\\\(n <= 0\\\\), the rounded value is \\\\(x\\\\).\n*\n* 5.  If \\\\(n < -308\\\\), we let \\\\(m = n + 308\\\\) and modify the above formula to avoid overflow.\n*\n*     ```tex\n*     \\operatorname{roundn}(x,n) = \\frac{\\biggl(\\frac{\\operatorname{round}( (x \\cdot 10^{308}) 10^{-m})}{10^{308}}\\biggr)}{10^{-m}}\n*     ```\n*\n*     If overflow occurs, the rounded value is \\\\(x\\\\).\n*\n* ## Special Cases\n*\n* ```tex\n* \\begin{align*}\n* \\operatorname{roundn}(\\mathrm{NaN}, n) &= \\mathrm{NaN} \\\\\n* \\operatorname{roundn}(x, \\mathrm{NaN}) &= \\mathrm{NaN} \\\\\n* \\operatorname{roundn}(x, \\pm\\infty) &= \\mathrm{NaN} \\\\\n* \\operatorname{roundn}(\\pm\\infty, n) &= \\pm\\infty \\\\\n* \\operatorname{roundn}(\\pm 0, n) &= \\pm 0\n* \\end{align*}\n* ```\n*\n* ## Notes\n*\n* 1.  Alternative algorithms:\n*\n*     -   Round by [casting][1] \\\\(x\\\\) to an exponential string.\n*     -   Native Python implementation [1][2] and [2][3].\n*\n* [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round\n* [2]: https://hg.python.org/releasing/2.7.9/file/tip/Objects/floatobject.c#l1082\n* [3]: https://hg.python.org/releasing/2.7.9/file/tip/Objects/floatobject.c#l1226\n*\n* @param {number} x - input value\n* @param {integer} n - integer power of `10`\n* @returns {number} rounded value\n*\n* @example\n* // Round a value to 2 decimal places:\n* var v = roundn( 3.141592653589793, -2 );\n* // returns 3.14\n*\n* @example\n* // If n = 0, `roundn` behaves like `round`:\n* var v = roundn( 3.141592653589793, 0 );\n* // returns 3.0\n*\n* @example\n* // Round a value to the nearest thousand:\n* var v = roundn( 12368.0, 3 );\n* // returns 12000.0\n*/\nfunction roundn( x, n ) {\n\tvar s;\n\tvar y;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( n ) ||\n\t\tisInfinite( n )\n\t) {\n\t\treturn NaN;\n\t}\n\tif (\n\t\t// Handle infinities...\n\t\tisInfinite( x ) ||\n\n\t\t// Handle +-0...\n\t\tx === 0.0 ||\n\n\t\t// If `n` exceeds the maximum number of feasible decimal places (such as with subnormal numbers), nothing to round...\n\t\tn < MIN_EXP_SUBNORMAL ||\n\n\t\t// If `|x|` is large enough, no decimals to round...\n\t\t( abs( x ) > MAX_INT && n <= 0 )\n\t) {\n\t\treturn x;\n\t}\n\t// The maximum absolute double is ~1.8e308. Accordingly, any possible finite `x` rounded to the nearest >=10^309 is 0.0.\n\tif ( n > MAX_EXP ) {\n\t\treturn 0.0 * x; // preserve the sign (same behavior as round)\n\t}\n\t// If we overflow, return `x`, as the number of digits to the right of the decimal is too small (i.e., `x` is too large / lacks sufficient fractional precision) for there to be any effect when rounding...\n\tif ( n < MIN_EXP ) {\n\t\ts = pow( 10.0, -(n + MAX_EXP) );\n\t\ty = (x*HUGE) * s; // order of operation matters!\n\t\tif ( isInfinite( y ) ) {\n\t\t\treturn x;\n\t\t}\n\t\treturn ( round(y)/HUGE ) / s;\n\t}\n\ts = pow( 10.0, -n );\n\ty = x * s;\n\tif ( isInfinite( y ) ) {\n\t\treturn x;\n\t}\n\treturn round( y ) / s;\n}\n\n\n// EXPORTS //\n\nexport default roundn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The minimum base 10 exponent for a subnormal double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-min-base10-exponent-subnormal\n* @type {integer32}\n*\n* @example\n* import FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL from '@stdlib/constants-float64-min-base10-exponent-subnormal';\n* // returns -324\n*/\n\n\n// MAIN //\n\n/**\n* The minimum base 10 exponent for a subnormal double-precision floating-point number.\n*\n* @constant\n* @type {integer32}\n* @default -324\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL = -324|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The maximum base 10 exponent for a double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-max-base10-exponent\n* @type {integer32}\n*\n* @example\n* import FLOAT64_MAX_BASE10_EXPONENT from '@stdlib/constants-float64-max-base10-exponent';\n* // returns 308\n*/\n\n\n// MAIN //\n\n/**\n* The maximum base 10 exponent for a double-precision floating-point number.\n*\n* @constant\n* @type {integer32}\n* @default 308\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MAX_BASE10_EXPONENT = 308|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default FLOAT64_MAX_BASE10_EXPONENT;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The minimum base 10 exponent for a normal double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-min-base10-exponent\n* @type {integer32}\n*\n* @example\n* import FLOAT64_MIN_BASE10_EXPONENT from '@stdlib/constants-float64-min-base10-exponent';\n* // returns -308\n*/\n\n\n// MAIN //\n\n/**\n* The minimum base 10 exponent for a normal double-precision floating-point number.\n*\n* ```text\n* 2^-1022 = 2.2250738585072014e-308 => -308\n* ```\n*\n* @constant\n* @type {integer32}\n* @default -308\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MIN_BASE10_EXPONENT = -308|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default FLOAT64_MIN_BASE10_EXPONENT;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveInteger from '@stdlib/assert-is-positive-integer';\nimport isObject from '@stdlib/assert-is-plain-object';\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport roundn from '@stdlib/math-base-special-roundn';\nimport format from '@stdlib/string-format';\n\n\n// MAIN //\n\n/**\n* Pretty-print output of test.\n*\n* @param {Object} [opts] - options object\n* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {string} formatted output\n*/\nfunction print( opts ) { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar decision;\n\tvar dgts;\n\tvar str;\n\n\tdgts = 4;\n\tdecision = true;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'digits', opts.digits ) );\n\t\t\t}\n\t\t\tdgts = opts.digits;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'decision', opts.decision ) );\n\t\t\t}\n\t\t\tdecision = opts.decision;\n\t\t}\n\t}\n\n\tstr = '';\n\tstr += this.method;\n\tstr += '\\n\\n';\n\tstr += 'Null hypothesis: the CDF of `x` is ';\n\tswitch ( this.alternative ) {\n\tcase 'less':\n\t\tstr += 'greater than or equal to ';\n\t\tbreak;\n\tcase 'greater':\n\t\tstr += 'less than or equal to ';\n\t\tbreak;\n\tcase 'two-sided':\n\tdefault:\n\t\tstr += 'equal to ';\n\t\tbreak;\n\t}\n\tstr += 'the reference CDF';\n\tstr += '\\n\\n';\n\tstr += '    pValue: ' + roundn( this.pValue, -dgts ) + '\\n';\n\tstr += '    statistic: ' + roundn( this.statistic, -dgts );\n\tstr += '\\n\\n';\n\tif ( decision ) {\n\t\tstr += 'Test Decision: ';\n\t\tif ( this.rejected ) {\n\t\t\tstr += 'Reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t} else {\n\t\t\tstr += 'Fail to reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t}\n\t\tstr += '\\n';\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nexport default print;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isTypedArrayLike from '@stdlib/assert-is-typed-array-like';\nimport isNumber from '@stdlib/assert-is-number';\nimport { primitives as isNumberArray } from '@stdlib/assert-is-number-array';\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\nimport isFunction from '@stdlib/assert-is-function';\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport format from '@stdlib/string-format';\nimport isnan from '@stdlib/assert-is-nan';\nimport max from '@stdlib/stats-base-max';\nimport pKolmogorov1 from './smirnov.js';\nimport pKolmogorov from './marsaglia.js';\nimport ascending from './ascending.js';\nimport subtract from './subtract.js';\nimport validate from './validate.js';\nimport getCDF from './get_cdf.js';\nimport print from './print.js'; // eslint-disable-line stdlib/no-redeclare\n\n\n// FUNCTIONS //\n\nvar slice = Array.prototype.slice;\n\n\n// MAIN //\n\n/**\n* Computes a Kolmogorov-Smirnov goodness-of-fit test.\n*\n* @param {NumericArray} x - input array holding numeric values\n* @param {(Function|string)} y - either a CDF function or a string denoting the name of a distribution\n* @param {...number} [params] - distribution parameters passed to reference CDF\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {boolean} [options.sorted=false] - boolean indicating if the input array is already in sorted order\n* @param {string} [options.alternative=\"two-sided\"] - string indicating whether to conduct two-sided or one-sided hypothesis test (other options: `less`, `greater`)\n* @throws {TypeError} argument x has to be a typed array or array of numbers\n* @throws {TypeError} argument y has to be a CDF function or string\n* @throws {TypeError} options must be an object\n* @throws {TypeError} alpha option has to be a number\n* @throws {RangeError} alpha option has to be a number in the interval `[0,1]`\n* @throws {TypeError} alternative option has to be a string\n* @throws {Error} alternative option must be `two-sided`, `less` or `greater`\n* @throws {TypeError} sorted option has to be a boolean\n* @returns {Object} test result object\n*\n* @example\n* var out = kstest( [ 2.0, 1.0, 5.0, -5.0, 3.0, 0.5, 6.0 ], 'normal', 0.0, 1.0 );\n* // returns { 'pValue': ~0.015, 'statistic': ~0.556, ... }\n*/\nfunction kstest() {\n\tvar nDistParams;\n\tvar distParams;\n\tvar distArgs;\n\tvar options;\n\tvar alpha;\n\tvar opts;\n\tvar pval;\n\tvar stat;\n\tvar yVal;\n\tvar alt;\n\tvar err;\n\tvar idx;\n\tvar out;\n\tvar val;\n\tvar i;\n\tvar n;\n\tvar x;\n\tvar y;\n\n\tx = arguments[ 0 ];\n\ty = arguments[ 1 ];\n\tif ( !isNumberArray( x ) && !isTypedArrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a typed array or number array. Value: `%s`.', x ) );\n\t}\n\tif ( !isFunction( y ) && !isString( y ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be either a CDF function or a string. Value: `%s`.', y ) );\n\t}\n\tif ( isString( y ) ) {\n\t\ty = getCDF( y );\n\t}\n\tnDistParams = y.length - 1.0;\n\tn = x.length;\n\n\tdistParams = new Array( nDistParams );\n\tfor ( i = 0; i < nDistParams; i++ ) {\n\t\tidx = i + 2;\n\t\tval = arguments[ idx ];\n\t\tif ( !isNumber( val ) || isnan( val ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Distribution parameter must be a number. Value: `%s`.', val ) );\n\t\t}\n\t\tdistParams[ i ] = arguments[ idx ];\n\t}\n\topts = {};\n\tif ( arguments.length > 2 + nDistParams ) {\n\t\toptions = arguments[ 2 + nDistParams ];\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Make a copy to prevent mutation of x:\n\tx = slice.call( x );\n\n\tif ( opts.alpha === void 0 ) {\n\t\talpha = 0.05;\n\t} else {\n\t\talpha = opts.alpha;\n\t}\n\tif ( alpha < 0.0 || alpha > 1.0 ) {\n\t\tthrow new RangeError( format( 'invalid option. `%s` option must be a number on the interval: [0, 1]. Option: `%f`.', 'alpha', alpha ) );\n\t}\n\n\t// Input data has to be sorted:\n\tif ( opts.sorted !== true ) {\n\t\tx.sort( ascending );\n\t}\n\tdistArgs = [ null ].concat( distParams );\n\tfor ( i = 0; i < n; i++ ) {\n\t\tdistArgs[ 0 ] = x[ i ];\n\t\tyVal = y.apply( null, distArgs );\n\t\tx[ i ] = yVal - ( i / n );\n\t}\n\n\talt = opts.alternative || 'two-sided';\n\tswitch ( alt ) {\n\tcase 'two-sided':\n\t\tstat = max( n, [ max( n, x, 1 ), max( n, subtract( 1/n, x ), 1 ) ], 1 );\n\t\tbreak;\n\tcase 'greater':\n\t\tstat = max( n, subtract( 1/n, x ), 1 );\n\t\tbreak;\n\tcase 'less':\n\t\tstat = max( n, x, 1 );\n\t\tbreak;\n\tdefault:\n\t\tthrow new Error( format( 'invalid option. `%s` option must be one of the following: \"%s\". Option: `%s`.', 'alternative', [ 'two-sided', 'less', 'greater' ].join( '\", \"' ), alt ) );\n\t}\n\tif ( alt === 'two-sided' ) {\n\t\tpval = 1.0 - pKolmogorov( stat, n );\n\t} else {\n\t\tpval = 1.0 - pKolmogorov1( stat, n );\n\t}\n\n\tout = {};\n\tsetReadOnly( out, 'rejected', pval <= alpha );\n\tsetReadOnly( out, 'alpha', alpha );\n\tsetReadOnly( out, 'pValue', pval );\n\tsetReadOnly( out, 'statistic', stat );\n\tsetReadOnly( out, 'method', 'Kolmogorov-Smirnov goodness-of-fit test' );\n\tsetReadOnly( out, 'print', print );\n\tsetReadOnly( out, 'alternative', alt );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default kstest;\n"],"names":["main","Object","defineProperty","isNumber","value","zeros","n","i","out","zeroPad","str","width","right","negative","pad","length","startsWithMinus","substr","lowercase","String","prototype","toLowerCase","uppercase","toUpperCase","formatInteger","token","base","specifier","arg","parseInt","isFinite","Error","toString","precision","padRight","sign","alternate","call","charAt","isString","abs","Math","replace","RE_EXP_POS_DIGITS","RE_EXP_NEG_DIGITS","RE_ONLY_DIGITS","RE_DIGITS_BEFORE_EXP","RE_TRAILING_PERIOD_ZERO","RE_PERIOD_ZERO_EXP","RE_ZERO_BEFORE_EXP","formatDouble","digits","f","parseFloat","toExponential","toFixed","toPrecision","spaces","spacePad","fromCharCode","isnan","isNaN","isArray","Array","initialize","flags","mapping","formatInterpolate","tokens","hasPeriod","flag","num","pos","j","TypeError","padZeros","indexOf","arguments","maxWidth","substring","RE","parse","match","formatTokenize","content","prev","exec","slice","lastIndex","push","format","args","tokenize","interpolate","apply","objectProtoype","toStr","defineGetter","__defineGetter__","defineSetter","__defineSetter__","lookupGetter","__lookupGetter__","lookupSetter","__lookupSetter__","err","hasDefinePropertySupport","builtin","obj","prop","descriptor","hasValue","hasGet","hasSet","__proto__","get","set","defineProperty$1","setNonEnumerableReadOnly","configurable","enumerable","writable","FLG","Symbol","hasToStringTagSupport","toStringTag","has","hasOwnProperty","hasOwnProp","property","Sym","toStrTag","nativeClass","hasToStringTag","v","isOwn","tag","main$6","Number","test","isPrimitive","isObject","setReadOnly","FLOAT64_PINF","POSITIVE_INFINITY","FLOAT64_NINF","NEGATIVE_INFINITY","floor","isInteger","x","PINF","NINF","isInt","valueOf","isNonNegativeInteger","isTypedArrayLike","BYTES_PER_ELEMENT","byteOffset","byteLength","arraylikefcn","predicate","len","isArrayLike","isPrimitiveArray","arrayfun","isObjectArray","isNumberArray","isBoolean","Bool","Boolean","getGlobal","Function","self","window","global","globalThis","root","codegen","getThis","GlobalThis","Self","Win","Global","nodeList","document","childNodes","typedarray","Int8Array","reFunctionName","RE_FUNCTION_NAME","REGEXP","main$5","isObjectLike","constructorName","name","ctor","constructor","_isBuffer","isBuffer","ctorName","type","isFunction","typeOf","isNan","isPositiveZero","max","N","stride","ix","NaN","isInfinite","offset","hasUint32Array","Uint32Array","bool","arr","GlobalUint32Array","UINT32_MAX","hasUint32ArraySupport","Uint32Array$1","hasFloat64Array","Float64Array","GlobalFloat64Array","hasFloat64ArraySupport","Float64Array$1","hasUint8Array","Uint8Array","GlobalUint8Array","UINT8_MAX","hasUint8ArraySupport","Uint8Array$1","hasUint16Array","Uint16Array","GlobalUint16Array","UINT16_MAX","hasUint16ArraySupport","uint16view","ctors","uint16","uint8","IS_LITTLE_ENDIAN","buffer","HIGH$7","isLittleEndian","FLOAT64_VIEW","UINT32_VIEW","getHighWord","HIGH","HIGH$5","setHighWord","high","LN2_HI","LN2_LO","ln","hfsq","hx","t2","t1","k","R","s","w","z","polyvalP","polyvalQ","ceil","trunc","kernelCos","y","hz","r","polyval13","polyval46","S1","kernelSin","LOW","LOW$7","indices$3","indices","fromWords","low","indices$1","toWords","fcn","assign","WORDS","copysign","hy","normalize","FRAC","ldexp","frac","exp","m","floatExp","filled","IPIO2","PIO2","TWON24","F","Q","FQ","IQ","compute","jz","q","q0","jk","jv","jx","carry","fw","ih","jp","kernelRempio2","e0","nx","round","rempio2Medium","t","PIO2_1","PIO2_1T","TWO_PIO2_1T","FOUR_PIO2_1T","TX","TY","rempio2","getLowWord","rempio2Kernel","cos","Y","sin","PI","sinpi","ar","YMIN","TC","gammaln","isNegative","nadj","flg","p3","p2","p1","p","polyvalA1","polyvalA2","polyvalT1","polyvalT2","polyvalT3","polyvalU","polyvalV","polyvalS","polyvalR","polyvalW","log1p","hu","c","u","polyval","isNegativeZero","isEven","isOdd","sqrt","LOW$1","setLowWord","uint32ToInt32","BP","DP_HI","DP_LO","HUGE","LOG_WORKSPACE","pow","ahx","ahy","ax","sx","sy","y1","hp","lp","yIsInfinite","xIsZero","TINY","yIsHuge","logx","tmp","ss","s2","hs","ls","ht","bp","dp","lz","log2ax","pow2","hi","lo","expmulti","gamma","stirlingApprox","smallApprox","s1","rateval","min","ALGMCS","LEN","gammaCorrection","twox","b2","b1","b0","dceval","binomcoefln","a","b","corr","correction","betaln","pKolmogorov1","d","pKolmogorov","eQ","h","H","g","mpow","A","eA","eB","B","mmult","ascending","subtract","res","getProto","Obj","getPrototypeOf","proto","getProto$1","objectPrototype","isPlainObject","isPrototypeOf","key","ownProps","validate","opts","options","alpha","alternative","sorted","asin","sgn","zz","ratevalRS","ratevalPQ","cdf","wrap","constantFunction","expm1","halfX","twopk","r1","e","E","FLOAT64_EPSILON","evalrational","Infinity","G","beta","ambh","agh","bgh","cgh","EPSILON","lanczosSumExpGScaled","FLOAT64_MAX","HALF_PI","factorial","FACTORIALS","gammaDeltaRatioLanczos","delta","result","ratio","zgh","lanczosSum","gammaDeltaRatio","idelta","iz","FLOAT64_MAX_LN","ERX","erfc","polyvalPP","polyvalQQ","polyvalPA","polyvalQA","polyvalRA","polyvalSA","polyvalRB","polyvalSB","FLOAT64_MIN_LN","fullIGammaPrefix","alz","MAX_LN","MIN_LN","evalpoly","Fcn","evil","eval","hasGeneratorSupport","sumSeries","generator","tolerance","nextTerm","counter","EPS","maxTerms","initialValue","next","sumSeries$1","workspace","igammaTemmeLarge","phi","FLOAT_EPS","mMult","mProd","log1pSeries","log1pmx","polyvalC0","polyvalC1","polyvalC2","polyvalC3","polyvalC4","polyvalC5","polyvalC6","polyvalC7","polyvalC8","lowerGammaSeries","a1","z1","lowerIncompleteGammaSeries","regularisedGammaPrefix","prefix","amza","amz","sq","lgammaSmallImp","zm1","zm2","rateval2","rateval3","tgammaSmallUpperPart","invert","pgam","gamma1pm1","powm1","apn","smallGamma2Series","continuedFractionA","gen","factor","maxIter","isgenerator","a0","C","D","continuedFractionB","continuedFraction","eps","keep","continuedFraction$1","upperGammaFraction","upperIncompleteGammaFract","gammainc","regularized","upper","optimisedInvert","normalized","evalMethod","initValue","isHalfInt","useTemme","sigma","fa","term","sum","finiteGammaQ","finiteHalfGammaQ","betaSmallBLargeASeries","s0","mult","tmp1","tnp1","b2n","bm1","lx2","lxp","mbn","lx","t4","regularizedGammaPrefix","risingFactorialRatio","ibetaPowerTerms","smallA","l1","l2","l3","l","minabs","maxabs","OPTS","ibetaFraction2","denom","aN","bN","ibetaFraction2t","binomcoef","ibetaAStep","ibetaSeries","poch","ibetaSeriesT","ibetaImp","fract","bbar","div","i0","i1","MAX_FLOAT64","MIN_FLOAT64","MAX_INT32","startTerm","start","binomialCCDF","betainc","kernelBetainc","factory","betaCDF","betaFactory","atan2","isinfinite","signbit","atan","x0","mu","degenerate","gammaCDF","lambda","d1","d2","normalCDF","x2","denom1","denom2","gammaFactory","factoryGamma","CDF","getCDF","isPositiveInteger","arcsine","betaprime","cauchy","chi","chisquare","cosine","erlang","exponential","frechet","gumbel","invgamma","kumaraswamy","laplace","levy","logistic","lognormal","normal","pareto1","rayleigh","triangular","uniform","weibull","roundn","MAX_SAFE_INTEGER","print","decision","dgts","this","method","pValue","statistic","rejected","kstest","nDistParams","distParams","distArgs","pval","stat","yVal","alt","idx","val","RangeError","sort","concat","join"],"mappings":"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"}